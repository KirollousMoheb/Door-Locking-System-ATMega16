
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00002a12  00002aa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080017e  0080017e  00002bc4  2**0
                  ALLOC
  3 .stab         00002910  00000000  00000000  00002bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001664  00000000  00000000  000054d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000092d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b834  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bcea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__vector_3>
      10:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__vector_8>
      24:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
 *
 *******************************************************************************/

#include "CONTROL_ECU.h"

int main(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <main+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global Interrupts*/
	SREG |= (1<<7);
     e38:	af e5       	ldi	r26, 0x5F	; 95
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ef e5       	ldi	r30, 0x5F	; 95
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	8c 93       	st	X, r24
	/*Initialize the UART*/
	UART_init(&uart_config);
     e46:	83 e7       	ldi	r24, 0x73	; 115
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 75 13 	call	0x26ea	; 0x26ea <UART_init>
	/*Initialize the Buzzer*/
	BUZZER_init();
     e4e:	0e 94 13 0a 	call	0x1426	; 0x1426 <BUZZER_init>

	while(1){
		/*CONTROL ECU is always waiting for the HMI ECU stae's*/
		switch(CONTROL_receiveState()){
     e52:	0e 94 e7 07 	call	0xfce	; 0xfce <CONTROL_receiveState>
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	3a 83       	std	Y+2, r19	; 0x02
     e5c:	29 83       	std	Y+1, r18	; 0x01
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	85 30       	cpi	r24, 0x05	; 5
     e64:	91 05       	cpc	r25, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <main+0x3c>
     e68:	57 c0       	rjmp	.+174    	; 0xf18 <main+0xea>
     e6a:	29 81       	ldd	r18, Y+1	; 0x01
     e6c:	3a 81       	ldd	r19, Y+2	; 0x02
     e6e:	26 30       	cpi	r18, 0x06	; 6
     e70:	31 05       	cpc	r19, r1
     e72:	5c f4       	brge	.+22     	; 0xe8a <main+0x5c>
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	91 05       	cpc	r25, r1
     e7c:	91 f0       	breq	.+36     	; 0xea2 <main+0x74>
     e7e:	29 81       	ldd	r18, Y+1	; 0x01
     e80:	3a 81       	ldd	r19, Y+2	; 0x02
     e82:	24 30       	cpi	r18, 0x04	; 4
     e84:	31 05       	cpc	r19, r1
     e86:	91 f0       	breq	.+36     	; 0xeac <main+0x7e>
     e88:	e4 cf       	rjmp	.-56     	; 0xe52 <main+0x24>
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	88 30       	cpi	r24, 0x08	; 8
     e90:	91 05       	cpc	r25, r1
     e92:	39 f1       	breq	.+78     	; 0xee2 <main+0xb4>
     e94:	29 81       	ldd	r18, Y+1	; 0x01
     e96:	3a 81       	ldd	r19, Y+2	; 0x02
     e98:	29 30       	cpi	r18, 0x09	; 9
     e9a:	31 05       	cpc	r19, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <main+0x72>
     e9e:	48 c0       	rjmp	.+144    	; 0xf30 <main+0x102>
     ea0:	d8 cf       	rjmp	.-80     	; 0xe52 <main+0x24>
		/*If password is sent from HMI ECU*/
		case SEND_PASSWORD:
			/*Save the password in g_password_arr array*/
			CONTROL_receivePassword(g_password_arr);
     ea2:	8e e8       	ldi	r24, 0x8E	; 142
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 3e 08 	call	0x107c	; 0x107c <CONTROL_receivePassword>
     eaa:	d3 cf       	rjmp	.-90     	; 0xe52 <main+0x24>
			break;
		/*If confirmation password is sent from HMI ECU*/
		case SEND_CONFIRMATION_PASSWORD:
			/*Save the confirmation password in g_password_confirm_arr*/
			CONTROL_receivePassword(g_password_confirm_arr);
     eac:	83 e9       	ldi	r24, 0x93	; 147
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 3e 08 	call	0x107c	; 0x107c <CONTROL_receivePassword>
			/*Check if both password are matched*/
			if(CONTROL_matchPassword(g_password_arr,g_password_confirm_arr)){
     eb4:	8e e8       	ldi	r24, 0x8E	; 142
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	23 e9       	ldi	r18, 0x93	; 147
     eba:	31 e0       	ldi	r19, 0x01	; 1
     ebc:	b9 01       	movw	r22, r18
     ebe:	0e 94 fe 07 	call	0xffc	; 0xffc <CONTROL_matchPassword>
     ec2:	88 23       	and	r24, r24
     ec4:	51 f0       	breq	.+20     	; 0xeda <main+0xac>
				 * 1)Save the password in the memmory
				 * 2)Read the password from the memory and save it in g_saved_password array
				 * 3)g_saved_password array is the array to be used after this point
				 * 4)Send Matched state to HMI ECU
				 * */
				CONTROL_savePassInMemory();
     ec6:	0e 94 65 08 	call	0x10ca	; 0x10ca <CONTROL_savePassInMemory>
				CONTROL_readPassFromMemory(g_saved_password);
     eca:	89 e8       	ldi	r24, 0x89	; 137
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 0a 09 	call	0x1214	; 0x1214 <CONTROL_readPassFromMemory>
				CONTROL_sendState(MATCHED);
     ed2:	86 e0       	ldi	r24, 0x06	; 6
     ed4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CONTROL_sendState>
     ed8:	bc cf       	rjmp	.-136    	; 0xe52 <main+0x24>
			}else{
				/*Otherwise sent Not Matched state*/
				CONTROL_sendState(NOT_MATCHED);
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CONTROL_sendState>
     ee0:	b8 cf       	rjmp	.-144    	; 0xe52 <main+0x24>
			 * 1)Opening the door
			 * 2)Changing the password
			 * It's used to check the user's entered password with the saved password in memory
			 * Whenever one of these two operations are needed
			 * */
			CONTROL_receivePassword(g_password_arr);
     ee2:	8e e8       	ldi	r24, 0x8E	; 142
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	0e 94 3e 08 	call	0x107c	; 0x107c <CONTROL_receivePassword>
			CONTROL_readPassFromMemory(g_saved_password);
     eea:	89 e8       	ldi	r24, 0x89	; 137
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 0a 09 	call	0x1214	; 0x1214 <CONTROL_readPassFromMemory>
			/*If password is matched send Matched state and make number of wrong tries 0
			 * Otherwise send Not Matched
			 * */
			if(CONTROL_matchPassword(g_password_arr,g_saved_password)){
     ef2:	8e e8       	ldi	r24, 0x8E	; 142
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	29 e8       	ldi	r18, 0x89	; 137
     ef8:	31 e0       	ldi	r19, 0x01	; 1
     efa:	b9 01       	movw	r22, r18
     efc:	0e 94 fe 07 	call	0xffc	; 0xffc <CONTROL_matchPassword>
     f00:	88 23       	and	r24, r24
     f02:	31 f0       	breq	.+12     	; 0xf10 <main+0xe2>
				CONTROL_sendState(MATCHED);
     f04:	86 e0       	ldi	r24, 0x06	; 6
     f06:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CONTROL_sendState>
				g_wrong_tries=0;
     f0a:	10 92 7e 01 	sts	0x017E, r1
     f0e:	a1 cf       	rjmp	.-190    	; 0xe52 <main+0x24>
			}else{
				CONTROL_sendState(NOT_MATCHED);
     f10:	87 e0       	ldi	r24, 0x07	; 7
     f12:	0e 94 cf 07 	call	0xf9e	; 0xf9e <CONTROL_sendState>
     f16:	9d cf       	rjmp	.-198    	; 0xe52 <main+0x24>
			/*Set the call back function to manage the time for the motor to :
			 * 1)Rotate clockwisely for 15 seconds
			 * 2)Stop for 3 seconds
			 * 3)Rotate Anti_Clockwisely for 15 seconds
			 * 4)Stop*/
			TIMER_setCallBack(Door_stateCallBack,TIMER0);
     f18:	81 eb       	ldi	r24, 0xB1	; 177
     f1a:	99 e0       	ldi	r25, 0x09	; 9
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	0e 94 2b 12 	call	0x2456	; 0x2456 <TIMER_setCallBack>
			/*Initialize the motor*/
			DcMotor_Init();
     f22:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DcMotor_Init>
			/*Make the timer Starts counting*/
			TIMER_init(&timer_Config);
     f26:	88 e6       	ldi	r24, 0x68	; 104
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 16 10 	call	0x202c	; 0x202c <TIMER_init>
     f2e:	91 cf       	rjmp	.-222    	; 0xe52 <main+0x24>
		case ALARM:
			/*Everytime the password is wrong in case of opening the door or changing the password
			 * HMI ECU receives Not Matched State and Sends Alarm state
			 * Each time we increment the number of wrong tries
			 * */
			g_wrong_tries++;
     f30:	80 91 7e 01 	lds	r24, 0x017E
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	80 93 7e 01 	sts	0x017E, r24
			if(g_wrong_tries==MAX_ERRORS){/*If number of wrong tries reaches the maximum allowable numbers*/
     f3a:	80 91 7e 01 	lds	r24, 0x017E
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	09 f0       	breq	.+2      	; 0xf44 <main+0x116>
     f42:	87 cf       	rjmp	.-242    	; 0xe52 <main+0x24>
				/*We start the buzzer for one minute*/
				g_wrong_tries=0;
     f44:	10 92 7e 01 	sts	0x017E, r1
				g_alarm_ticks=0;
     f48:	10 92 82 01 	sts	0x0182, r1
     f4c:	10 92 81 01 	sts	0x0181, r1
				TIMER_setCallBack(CONTROL_alarmCallBack,TIMER0);
     f50:	84 ef       	ldi	r24, 0xF4	; 244
     f52:	99 e0       	ldi	r25, 0x09	; 9
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	0e 94 2b 12 	call	0x2456	; 0x2456 <TIMER_setCallBack>
				TIMER_init(&timer_Config);
     f5a:	88 e6       	ldi	r24, 0x68	; 104
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 16 10 	call	0x202c	; 0x202c <TIMER_init>
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <main+0x13a>
				while(g_alarm_ticks<NUMBER_OF_OVERFLOWS_1_minute){
					BUZZER_on();
     f64:	0e 94 24 0a 	call	0x1448	; 0x1448 <BUZZER_on>
				/*We start the buzzer for one minute*/
				g_wrong_tries=0;
				g_alarm_ticks=0;
				TIMER_setCallBack(CONTROL_alarmCallBack,TIMER0);
				TIMER_init(&timer_Config);
				while(g_alarm_ticks<NUMBER_OF_OVERFLOWS_1_minute){
     f68:	80 91 81 01 	lds	r24, 0x0181
     f6c:	90 91 82 01 	lds	r25, 0x0182
     f70:	37 e0       	ldi	r19, 0x07	; 7
     f72:	87 32       	cpi	r24, 0x27	; 39
     f74:	93 07       	cpc	r25, r19
     f76:	b0 f3       	brcs	.-20     	; 0xf64 <main+0x136>
					BUZZER_on();
				}
				if(g_alarm_ticks==NUMBER_OF_OVERFLOWS_1_minute){
     f78:	80 91 81 01 	lds	r24, 0x0181
     f7c:	90 91 82 01 	lds	r25, 0x0182
     f80:	27 e0       	ldi	r18, 0x07	; 7
     f82:	87 32       	cpi	r24, 0x27	; 39
     f84:	92 07       	cpc	r25, r18
     f86:	09 f0       	breq	.+2      	; 0xf8a <main+0x15c>
     f88:	64 cf       	rjmp	.-312    	; 0xe52 <main+0x24>
					BUZZER_off();
     f8a:	0e 94 30 0a 	call	0x1460	; 0x1460 <BUZZER_off>
					TIMER_deinit(TIMER0);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	0e 94 9b 12 	call	0x2536	; 0x2536 <TIMER_deinit>
					g_alarm_ticks=0;
     f94:	10 92 82 01 	sts	0x0182, r1
     f98:	10 92 81 01 	sts	0x0181, r1
     f9c:	5a cf       	rjmp	.-332    	; 0xe52 <main+0x24>

00000f9e <CONTROL_sendState>:
 *
 * [Arguments]:              uint8 state
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void CONTROL_sendState(uint8 state){
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	89 83       	std	Y+1, r24	; 0x01
	/*Send Ready for HMI ECU*/
	UART_sendByte(READY);
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 1c 14 	call	0x2838	; 0x2838 <UART_sendByte>
	/*Wait for HMI ECU to send back Ready state*/
	while(UART_recieveByte()!=READY);
     fb0:	0e 94 33 14 	call	0x2866	; 0x2866 <UART_recieveByte>
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <CONTROL_sendState+0x12>
	/*Send the required state to HMI ECU*/
	UART_sendByte(state);
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	0e 94 1c 14 	call	0x2838	; 0x2838 <UART_sendByte>
	/*Wait for HMI ECU to send that it received the state*/
	while(UART_recieveByte()!=DONE);
     fbe:	0e 94 33 14 	call	0x2866	; 0x2866 <UART_recieveByte>
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <CONTROL_sendState+0x20>
}
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <CONTROL_receiveState>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
uint8 CONTROL_receiveState(void){
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	/*Wait until HMI ECU sends that it's ready*/
	while(UART_recieveByte() != READY){};
     fd6:	0e 94 33 14 	call	0x2866	; 0x2866 <UART_recieveByte>
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <CONTROL_receiveState+0x8>
	/*Send Ready to HMI ECU to make it send the state*/
	UART_sendByte(READY);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	0e 94 1c 14 	call	0x2838	; 0x2838 <UART_sendByte>
	/*Receive the sent state in a global variable called state*/
	state=UART_recieveByte();
     fe4:	0e 94 33 14 	call	0x2866	; 0x2866 <UART_recieveByte>
     fe8:	80 93 98 01 	sts	0x0198, r24
	/*Tell HMI ECU that the state it sent is received*/
	UART_sendByte(DONE);
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	0e 94 1c 14 	call	0x2838	; 0x2838 <UART_sendByte>
	return state;
     ff2:	80 91 98 01 	lds	r24, 0x0198
}
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <CONTROL_matchPassword>:
 *
 * [Arguments]:              The original password and the confirmation password
 *
 * [Returns]:                true or false
 ***************************************************************************************************/
boolean CONTROL_matchPassword(uint8 arr1[],uint8 arr2[]){
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	27 97       	sbiw	r28, 0x07	; 7
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	7e 83       	std	Y+6, r23	; 0x06
    1016:	6d 83       	std	Y+5, r22	; 0x05
	/*Simple function comparing the two passwords array and return true if they match*/
	uint8 i=0;
    1018:	1a 82       	std	Y+2, r1	; 0x02
	uint8 match_count=0;
    101a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<PASSWORD_SIZE;i++){
    101c:	1a 82       	std	Y+2, r1	; 0x02
    101e:	1a c0       	rjmp	.+52     	; 0x1054 <CONTROL_matchPassword+0x58>
		if(arr1[i]==arr2[i]){
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	fc 01       	movw	r30, r24
    102c:	e2 0f       	add	r30, r18
    102e:	f3 1f       	adc	r31, r19
    1030:	40 81       	ld	r20, Z
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	fc 01       	movw	r30, r24
    103e:	e2 0f       	add	r30, r18
    1040:	f3 1f       	adc	r31, r19
    1042:	80 81       	ld	r24, Z
    1044:	48 17       	cp	r20, r24
    1046:	19 f4       	brne	.+6      	; 0x104e <CONTROL_matchPassword+0x52>
			match_count++;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	89 83       	std	Y+1, r24	; 0x01
 ***************************************************************************************************/
boolean CONTROL_matchPassword(uint8 arr1[],uint8 arr2[]){
	/*Simple function comparing the two passwords array and return true if they match*/
	uint8 i=0;
	uint8 match_count=0;
	for(i=0;i<PASSWORD_SIZE;i++){
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	8a 83       	std	Y+2, r24	; 0x02
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	85 30       	cpi	r24, 0x05	; 5
    1058:	18 f3       	brcs	.-58     	; 0x1020 <CONTROL_matchPassword+0x24>
		if(arr1[i]==arr2[i]){
			match_count++;
		}
	}
	/*If match count is equal to the Password's size then all elements are matched and return true*/
	if(match_count==PASSWORD_SIZE){
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	85 30       	cpi	r24, 0x05	; 5
    105e:	19 f4       	brne	.+6      	; 0x1066 <CONTROL_matchPassword+0x6a>
		return TRUE;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	8f 83       	std	Y+7, r24	; 0x07
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <CONTROL_matchPassword+0x6c>
		/*otherwise return false*/
	}else{
		return FALSE;
    1066:	1f 82       	std	Y+7, r1	; 0x07
    1068:	8f 81       	ldd	r24, Y+7	; 0x07
	}

}
    106a:	27 96       	adiw	r28, 0x07	; 7
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <CONTROL_receivePassword>:
 *
 * [Arguments]:              An array where the password is to be saved
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void CONTROL_receivePassword(uint8 arr[]){
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <CONTROL_receivePassword+0xa>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	9b 83       	std	Y+3, r25	; 0x03
    108e:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    1090:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<PASSWORD_SIZE;i++){
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <CONTROL_receivePassword+0x38>
		arr[i]=UART_recieveByte();
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	9b 81       	ldd	r25, Y+3	; 0x03
    10a0:	8c 01       	movw	r16, r24
    10a2:	02 0f       	add	r16, r18
    10a4:	13 1f       	adc	r17, r19
    10a6:	0e 94 33 14 	call	0x2866	; 0x2866 <UART_recieveByte>
    10aa:	f8 01       	movw	r30, r16
    10ac:	80 83       	st	Z, r24
 * [Returns]:                VOID
 ***************************************************************************************************/
void CONTROL_receivePassword(uint8 arr[]){

	uint8 i=0;
	for(i=0;i<PASSWORD_SIZE;i++){
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	85 30       	cpi	r24, 0x05	; 5
    10b8:	70 f3       	brcs	.-36     	; 0x1096 <CONTROL_receivePassword+0x1a>
		arr[i]=UART_recieveByte();
	}


}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <CONTROL_savePassInMemory>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void CONTROL_savePassInMemory(void){
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	60 97       	sbiw	r28, 0x10	; 16
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
	EEPROM_init();
    10de:	0e 94 3c 0a 	call	0x1478	; 0x1478 <EEPROM_init>
	int i=0;
    10e2:	18 8a       	std	Y+16, r1	; 0x10
    10e4:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<PASSWORD_SIZE;i++){
    10e6:	18 8a       	std	Y+16, r1	; 0x10
    10e8:	1f 86       	std	Y+15, r1	; 0x0f
    10ea:	85 c0       	rjmp	.+266    	; 0x11f6 <CONTROL_savePassInMemory+0x12c>
		/*The delay is essential to prevent writing or reading all the bytes in or from the same adress*/

		EEPROM_writeByte(EEPROM_ADRESS+i,g_password_arr[i]);
    10ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ee:	98 89       	ldd	r25, Y+16	; 0x10
    10f0:	88 96       	adiw	r24, 0x28	; 40
    10f2:	9c 01       	movw	r18, r24
    10f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f6:	98 89       	ldd	r25, Y+16	; 0x10
    10f8:	fc 01       	movw	r30, r24
    10fa:	e2 57       	subi	r30, 0x72	; 114
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	40 81       	ld	r20, Z
    1100:	c9 01       	movw	r24, r18
    1102:	64 2f       	mov	r22, r20
    1104:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <EEPROM_writeByte>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a0 e2       	ldi	r26, 0x20	; 32
    110e:	b1 e4       	ldi	r27, 0x41	; 65
    1110:	8b 87       	std	Y+11, r24	; 0x0b
    1112:	9c 87       	std	Y+12, r25	; 0x0c
    1114:	ad 87       	std	Y+13, r26	; 0x0d
    1116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	6b 85       	ldd	r22, Y+11	; 0x0b
    111a:	7c 85       	ldd	r23, Y+12	; 0x0c
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a ef       	ldi	r20, 0xFA	; 250
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8f 83       	std	Y+7, r24	; 0x07
    1132:	98 87       	std	Y+8, r25	; 0x08
    1134:	a9 87       	std	Y+9, r26	; 0x09
    1136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1138:	6f 81       	ldd	r22, Y+7	; 0x07
    113a:	78 85       	ldd	r23, Y+8	; 0x08
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <CONTROL_savePassInMemory+0x90>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <CONTROL_savePassInMemory+0x10e>
	else if (__tmp > 65535)
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <CONTROL_savePassInMemory+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	6b 85       	ldd	r22, Y+11	; 0x0b
    1174:	7c 85       	ldd	r23, Y+12	; 0x0c
    1176:	8d 85       	ldd	r24, Y+13	; 0x0d
    1178:	9e 85       	ldd	r25, Y+14	; 0x0e
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <CONTROL_savePassInMemory+0xf0>
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <CONTROL_savePassInMemory+0xde>
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <CONTROL_savePassInMemory+0xd2>
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <CONTROL_savePassInMemory+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	6f 81       	ldd	r22, Y+7	; 0x07
    11c6:	78 85       	ldd	r23, Y+8	; 0x08
    11c8:	89 85       	ldd	r24, Y+9	; 0x09
    11ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <CONTROL_savePassInMemory+0x11a>
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
 * [Returns]:                VOID
 ***************************************************************************************************/
void CONTROL_savePassInMemory(void){
	EEPROM_init();
	int i=0;
	for(i=0;i<PASSWORD_SIZE;i++){
    11ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ee:	98 89       	ldd	r25, Y+16	; 0x10
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	98 8b       	std	Y+16, r25	; 0x10
    11f4:	8f 87       	std	Y+15, r24	; 0x0f
    11f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f8:	98 89       	ldd	r25, Y+16	; 0x10
    11fa:	85 30       	cpi	r24, 0x05	; 5
    11fc:	91 05       	cpc	r25, r1
    11fe:	0c f4       	brge	.+2      	; 0x1202 <CONTROL_savePassInMemory+0x138>
    1200:	75 cf       	rjmp	.-278    	; 0x10ec <CONTROL_savePassInMemory+0x22>

		EEPROM_writeByte(EEPROM_ADRESS+i,g_password_arr[i]);
		_delay_ms(10);

	}
}
    1202:	60 96       	adiw	r28, 0x10	; 16
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <CONTROL_readPassFromMemory>:
 *
 * [Arguments]:              Adress of the array which the password read from EEPROM is to be saved into
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void CONTROL_readPassFromMemory(uint8 *arr){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	62 97       	sbiw	r28, 0x12	; 18
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	9a 8b       	std	Y+18, r25	; 0x12
    122a:	89 8b       	std	Y+17, r24	; 0x11
	EEPROM_init();
    122c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <EEPROM_init>
	int i=0;
    1230:	18 8a       	std	Y+16, r1	; 0x10
    1232:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<PASSWORD_SIZE;i++){
    1234:	18 8a       	std	Y+16, r1	; 0x10
    1236:	1f 86       	std	Y+15, r1	; 0x0f
    1238:	85 c0       	rjmp	.+266    	; 0x1344 <CONTROL_readPassFromMemory+0x130>
		EEPROM_readByte(EEPROM_ADRESS+i,&arr[i]);
    123a:	8f 85       	ldd	r24, Y+15	; 0x0f
    123c:	98 89       	ldd	r25, Y+16	; 0x10
    123e:	88 96       	adiw	r24, 0x28	; 40
    1240:	ac 01       	movw	r20, r24
    1242:	2f 85       	ldd	r18, Y+15	; 0x0f
    1244:	38 89       	ldd	r19, Y+16	; 0x10
    1246:	89 89       	ldd	r24, Y+17	; 0x11
    1248:	9a 89       	ldd	r25, Y+18	; 0x12
    124a:	28 0f       	add	r18, r24
    124c:	39 1f       	adc	r19, r25
    124e:	ca 01       	movw	r24, r20
    1250:	b9 01       	movw	r22, r18
    1252:	0e 94 b4 0a 	call	0x1568	; 0x1568 <EEPROM_readByte>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e2       	ldi	r26, 0x20	; 32
    125c:	b1 e4       	ldi	r27, 0x41	; 65
    125e:	8b 87       	std	Y+11, r24	; 0x0b
    1260:	9c 87       	std	Y+12, r25	; 0x0c
    1262:	ad 87       	std	Y+13, r26	; 0x0d
    1264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1266:	6b 85       	ldd	r22, Y+11	; 0x0b
    1268:	7c 85       	ldd	r23, Y+12	; 0x0c
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4a ef       	ldi	r20, 0xFA	; 250
    1274:	54 e4       	ldi	r21, 0x44	; 68
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	8f 83       	std	Y+7, r24	; 0x07
    1280:	98 87       	std	Y+8, r25	; 0x08
    1282:	a9 87       	std	Y+9, r26	; 0x09
    1284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1286:	6f 81       	ldd	r22, Y+7	; 0x07
    1288:	78 85       	ldd	r23, Y+8	; 0x08
    128a:	89 85       	ldd	r24, Y+9	; 0x09
    128c:	9a 85       	ldd	r25, Y+10	; 0x0a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	2c f4       	brge	.+10     	; 0x12a8 <CONTROL_readPassFromMemory+0x94>
		__ticks = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 83       	std	Y+5, r24	; 0x05
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <CONTROL_readPassFromMemory+0x112>
	else if (__tmp > 65535)
    12a8:	6f 81       	ldd	r22, Y+7	; 0x07
    12aa:	78 85       	ldd	r23, Y+8	; 0x08
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	4c f5       	brge	.+82     	; 0x1312 <CONTROL_readPassFromMemory+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <CONTROL_readPassFromMemory+0xf4>
    12ea:	88 ec       	ldi	r24, 0xC8	; 200
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	8b 83       	std	Y+3, r24	; 0x03
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <CONTROL_readPassFromMemory+0xe2>
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	69 f7       	brne	.-38     	; 0x12ea <CONTROL_readPassFromMemory+0xd6>
    1310:	14 c0       	rjmp	.+40     	; 0x133a <CONTROL_readPassFromMemory+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <CONTROL_readPassFromMemory+0x11e>
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
 * [Returns]:                VOID
 ***************************************************************************************************/
void CONTROL_readPassFromMemory(uint8 *arr){
	EEPROM_init();
	int i=0;
	for(i=0;i<PASSWORD_SIZE;i++){
    133a:	8f 85       	ldd	r24, Y+15	; 0x0f
    133c:	98 89       	ldd	r25, Y+16	; 0x10
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	98 8b       	std	Y+16, r25	; 0x10
    1342:	8f 87       	std	Y+15, r24	; 0x0f
    1344:	8f 85       	ldd	r24, Y+15	; 0x0f
    1346:	98 89       	ldd	r25, Y+16	; 0x10
    1348:	85 30       	cpi	r24, 0x05	; 5
    134a:	91 05       	cpc	r25, r1
    134c:	0c f4       	brge	.+2      	; 0x1350 <CONTROL_readPassFromMemory+0x13c>
    134e:	75 cf       	rjmp	.-278    	; 0x123a <CONTROL_readPassFromMemory+0x26>
		EEPROM_readByte(EEPROM_ADRESS+i,&arr[i]);
		/*The delay is essential to prevent writing or reading all the bytes in or from the same adress*/
		_delay_ms(10);

	}
}
    1350:	62 96       	adiw	r28, 0x12	; 18
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <Door_stateCallBack>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void Door_stateCallBack(void){
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    136a:	80 91 7f 01 	lds	r24, 0x017F
    136e:	90 91 80 01 	lds	r25, 0x0180
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	90 93 80 01 	sts	0x0180, r25
    1378:	80 93 7f 01 	sts	0x017F, r24
	/*If timer counts is less than 15 seconds rotate the motor clockwise*/
	if(g_ticks<NUMBER_OF_OVERFLOWS_15_seconds){
    137c:	80 91 7f 01 	lds	r24, 0x017F
    1380:	90 91 80 01 	lds	r25, 0x0180
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	89 3c       	cpi	r24, 0xC9	; 201
    1388:	92 07       	cpc	r25, r18
    138a:	18 f4       	brcc	.+6      	; 0x1392 <Door_stateCallBack+0x30>
		DcMotor_Rotate(CLOCKWISE);
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DcMotor_Rotate>
	}
	/*If we reached 15 seconds stop the motor for 3 seconds*/
	if(g_ticks==NUMBER_OF_OVERFLOWS_15_seconds){
    1392:	80 91 7f 01 	lds	r24, 0x017F
    1396:	90 91 80 01 	lds	r25, 0x0180
    139a:	21 e0       	ldi	r18, 0x01	; 1
    139c:	89 3c       	cpi	r24, 0xC9	; 201
    139e:	92 07       	cpc	r25, r18
    13a0:	19 f4       	brne	.+6      	; 0x13a8 <Door_stateCallBack+0x46>
		DcMotor_Rotate(STOP);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DcMotor_Rotate>
	}
	/*After 3 seconds rotate the motor anti-clockwisely*/
	if(g_ticks==NUMBER_OF_OVERFLOWS_18_seconds){
    13a8:	80 91 7f 01 	lds	r24, 0x017F
    13ac:	90 91 80 01 	lds	r25, 0x0180
    13b0:	22 e0       	ldi	r18, 0x02	; 2
    13b2:	84 32       	cpi	r24, 0x24	; 36
    13b4:	92 07       	cpc	r25, r18
    13b6:	19 f4       	brne	.+6      	; 0x13be <Door_stateCallBack+0x5c>
		DcMotor_Rotate(ANTI_CLOCKWISE);
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DcMotor_Rotate>
	}
	/*After another 15 seconds stop the motor and the timer*/
	if(g_ticks==NUMBER_OF_OVERFLOWS_33_seconds){
    13be:	80 91 7f 01 	lds	r24, 0x017F
    13c2:	90 91 80 01 	lds	r25, 0x0180
    13c6:	23 e0       	ldi	r18, 0x03	; 3
    13c8:	8d 3e       	cpi	r24, 0xED	; 237
    13ca:	92 07       	cpc	r25, r18
    13cc:	51 f4       	brne	.+20     	; 0x13e2 <Door_stateCallBack+0x80>
		DcMotor_Rotate(STOP);
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DcMotor_Rotate>
		TIMER_deinit(TIMER0);
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	0e 94 9b 12 	call	0x2536	; 0x2536 <TIMER_deinit>
		g_ticks=0;
    13da:	10 92 80 01 	sts	0x0180, r1
    13de:	10 92 7f 01 	sts	0x017F, r1
	}
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <CONTROL_alarmCallBack>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void CONTROL_alarmCallBack(void){
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	g_alarm_ticks++;
    13f0:	80 91 81 01 	lds	r24, 0x0181
    13f4:	90 91 82 01 	lds	r25, 0x0182
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	90 93 82 01 	sts	0x0182, r25
    13fe:	80 93 81 01 	sts	0x0181, r24
	/*Count 1 minute for the buzzer*/
	if(g_ticks>NUMBER_OF_OVERFLOWS_1_minute){
    1402:	80 91 7f 01 	lds	r24, 0x017F
    1406:	90 91 80 01 	lds	r25, 0x0180
    140a:	27 e0       	ldi	r18, 0x07	; 7
    140c:	88 32       	cpi	r24, 0x28	; 40
    140e:	92 07       	cpc	r25, r18
    1410:	38 f0       	brcs	.+14     	; 0x1420 <CONTROL_alarmCallBack+0x38>
		TIMER_deinit(TIMER0);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	0e 94 9b 12 	call	0x2536	; 0x2536 <TIMER_deinit>
		g_alarm_ticks=0;
    1418:	10 92 82 01 	sts	0x0182, r1
    141c:	10 92 81 01 	sts	0x0181, r1
	}
}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <BUZZER_init>:
 */

#include "gpio.h"
#include "buzzer.h"

void BUZZER_init(){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	67 e0       	ldi	r22, 0x07	; 7
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	67 e0       	ldi	r22, 0x07	; 7
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <BUZZER_on>:
void BUZZER_on(){
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	67 e0       	ldi	r22, 0x07	; 7
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
}
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <BUZZER_off>:
void BUZZER_off(){
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	67 e0       	ldi	r22, 0x07	; 7
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <EEPROM_init>:




void EEPROM_init(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	28 97       	sbiw	r28, 0x08	; 8
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	I2C_config I2C_CONFIGURATION = {2,0b00000010,PRESCALER_1};
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	9d 83       	std	Y+5, r25	; 0x05
    1492:	8c 83       	std	Y+4, r24	; 0x04
    1494:	eb e7       	ldi	r30, 0x7B	; 123
    1496:	f1 e0       	ldi	r31, 0x01	; 1
    1498:	ff 83       	std	Y+7, r31	; 0x07
    149a:	ee 83       	std	Y+6, r30	; 0x06
    149c:	f3 e0       	ldi	r31, 0x03	; 3
    149e:	f8 87       	std	Y+8, r31	; 0x08
    14a0:	ee 81       	ldd	r30, Y+6	; 0x06
    14a2:	ff 81       	ldd	r31, Y+7	; 0x07
    14a4:	00 80       	ld	r0, Z
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	9f 81       	ldd	r25, Y+7	; 0x07
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	9f 83       	std	Y+7, r25	; 0x07
    14ae:	8e 83       	std	Y+6, r24	; 0x06
    14b0:	ec 81       	ldd	r30, Y+4	; 0x04
    14b2:	fd 81       	ldd	r31, Y+5	; 0x05
    14b4:	00 82       	st	Z, r0
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	9d 83       	std	Y+5, r25	; 0x05
    14be:	8c 83       	std	Y+4, r24	; 0x04
    14c0:	98 85       	ldd	r25, Y+8	; 0x08
    14c2:	91 50       	subi	r25, 0x01	; 1
    14c4:	98 87       	std	Y+8, r25	; 0x08
    14c6:	e8 85       	ldd	r30, Y+8	; 0x08
    14c8:	ee 23       	and	r30, r30
    14ca:	51 f7       	brne	.-44     	; 0x14a0 <EEPROM_init+0x28>
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(&I2C_CONFIGURATION);
    14cc:	ce 01       	movw	r24, r28
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	0e 94 e6 12 	call	0x25cc	; 0x25cc <TWI_init>
}
    14d4:	28 96       	adiw	r28, 0x08	; 8
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <EEPROM_writeByte>:




uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <EEPROM_writeByte+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <EEPROM_writeByte+0x8>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    14f8:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
	if (TWI_getStatus() != TWI_START)
    14fc:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	11 f0       	breq	.+4      	; 0x1508 <EEPROM_writeByte+0x22>
		return ERROR;
    1504:	1c 82       	std	Y+4, r1	; 0x04
    1506:	28 c0       	rjmp	.+80     	; 0x1558 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	80 70       	andi	r24, 0x00	; 0
    150e:	97 70       	andi	r25, 0x07	; 7
    1510:	88 0f       	add	r24, r24
    1512:	89 2f       	mov	r24, r25
    1514:	88 1f       	adc	r24, r24
    1516:	99 0b       	sbc	r25, r25
    1518:	91 95       	neg	r25
    151a:	80 6a       	ori	r24, 0xA0	; 160
    151c:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1520:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1524:	88 31       	cpi	r24, 0x18	; 24
    1526:	11 f0       	breq	.+4      	; 0x152c <EEPROM_writeByte+0x46>
		return ERROR;
    1528:	1c 82       	std	Y+4, r1	; 0x04
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1532:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1536:	88 32       	cpi	r24, 0x28	; 40
    1538:	11 f0       	breq	.+4      	; 0x153e <EEPROM_writeByte+0x58>
		return ERROR;
    153a:	1c 82       	std	Y+4, r1	; 0x04
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1544:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1548:	88 32       	cpi	r24, 0x28	; 40
    154a:	11 f0       	breq	.+4      	; 0x1550 <EEPROM_writeByte+0x6a>
		return ERROR;
    154c:	1c 82       	std	Y+4, r1	; 0x04
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    1550:	0e 94 1e 13 	call	0x263c	; 0x263c <TWI_stop>

	return SUCCESS;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	8c 83       	std	Y+4, r24	; 0x04
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <EEPROM_readByte+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <EEPROM_readByte+0x8>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	7c 83       	std	Y+4, r23	; 0x04
    157c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    157e:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1582:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	11 f0       	breq	.+4      	; 0x158e <EEPROM_readByte+0x26>
		return ERROR;
    158a:	1d 82       	std	Y+5, r1	; 0x05
    158c:	44 c0       	rjmp	.+136    	; 0x1616 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	80 70       	andi	r24, 0x00	; 0
    1594:	97 70       	andi	r25, 0x07	; 7
    1596:	88 0f       	add	r24, r24
    1598:	89 2f       	mov	r24, r25
    159a:	88 1f       	adc	r24, r24
    159c:	99 0b       	sbc	r25, r25
    159e:	91 95       	neg	r25
    15a0:	80 6a       	ori	r24, 0xA0	; 160
    15a2:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15a6:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    15aa:	88 31       	cpi	r24, 0x18	; 24
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <EEPROM_readByte+0x4a>
		return ERROR;
    15ae:	1d 82       	std	Y+5, r1	; 0x05
    15b0:	32 c0       	rjmp	.+100    	; 0x1616 <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15b8:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    15bc:	88 32       	cpi	r24, 0x28	; 40
    15be:	11 f0       	breq	.+4      	; 0x15c4 <EEPROM_readByte+0x5c>
		return ERROR;
    15c0:	1d 82       	std	Y+5, r1	; 0x05
    15c2:	29 c0       	rjmp	.+82     	; 0x1616 <EEPROM_readByte+0xae>

	/* Send the Repeated Start Bit */
	TWI_start();
    15c4:	0e 94 0e 13 	call	0x261c	; 0x261c <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    15c8:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    15cc:	80 31       	cpi	r24, 0x10	; 16
    15ce:	11 f0       	breq	.+4      	; 0x15d4 <EEPROM_readByte+0x6c>
		return ERROR;
    15d0:	1d 82       	std	Y+5, r1	; 0x05
    15d2:	21 c0       	rjmp	.+66     	; 0x1616 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	80 70       	andi	r24, 0x00	; 0
    15da:	97 70       	andi	r25, 0x07	; 7
    15dc:	88 0f       	add	r24, r24
    15de:	89 2f       	mov	r24, r25
    15e0:	88 1f       	adc	r24, r24
    15e2:	99 0b       	sbc	r25, r25
    15e4:	91 95       	neg	r25
    15e6:	81 6a       	ori	r24, 0xA1	; 161
    15e8:	0e 94 29 13 	call	0x2652	; 0x2652 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    15ec:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    15f0:	80 34       	cpi	r24, 0x40	; 64
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <EEPROM_readByte+0x90>
		return ERROR;
    15f4:	1d 82       	std	Y+5, r1	; 0x05
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    15f8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <TWI_readByteWithNACK>
    15fc:	eb 81       	ldd	r30, Y+3	; 0x03
    15fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1600:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1602:	0e 94 66 13 	call	0x26cc	; 0x26cc <TWI_getStatus>
    1606:	88 35       	cpi	r24, 0x58	; 88
    1608:	11 f0       	breq	.+4      	; 0x160e <EEPROM_readByte+0xa6>
		return ERROR;
    160a:	1d 82       	std	Y+5, r1	; 0x05
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
    160e:	0e 94 1e 13 	call	0x263c	; 0x263c <TWI_stop>

	return SUCCESS;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_setupPinDirection+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <GPIO_setupPinDirection+0x8>
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	6a 83       	std	Y+2, r22	; 0x02
    163a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 30       	cpi	r24, 0x08	; 8
    1640:	08 f0       	brcs	.+2      	; 0x1644 <GPIO_setupPinDirection+0x1c>
    1642:	d5 c0       	rjmp	.+426    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	08 f0       	brcs	.+2      	; 0x164c <GPIO_setupPinDirection+0x24>
    164a:	d1 c0       	rjmp	.+418    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3d 83       	std	Y+5, r19	; 0x05
    1654:	2c 83       	std	Y+4, r18	; 0x04
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <GPIO_setupPinDirection+0x3a>
    1660:	43 c0       	rjmp	.+134    	; 0x16e8 <GPIO_setupPinDirection+0xc0>
    1662:	2c 81       	ldd	r18, Y+4	; 0x04
    1664:	3d 81       	ldd	r19, Y+5	; 0x05
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <GPIO_setupPinDirection+0x4e>
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	71 f0       	breq	.+28     	; 0x1690 <GPIO_setupPinDirection+0x68>
    1674:	bc c0       	rjmp	.+376    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
    1676:	2c 81       	ldd	r18, Y+4	; 0x04
    1678:	3d 81       	ldd	r19, Y+5	; 0x05
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <GPIO_setupPinDirection+0x5a>
    1680:	5f c0       	rjmp	.+190    	; 0x1740 <GPIO_setupPinDirection+0x118>
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <GPIO_setupPinDirection+0x66>
    168c:	85 c0       	rjmp	.+266    	; 0x1798 <GPIO_setupPinDirection+0x170>
    168e:	af c0       	rjmp	.+350    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	a1 f4       	brne	.+40     	; 0x16be <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1696:	aa e3       	ldi	r26, 0x3A	; 58
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ea e3       	ldi	r30, 0x3A	; 58
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <GPIO_setupPinDirection+0x8c>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <GPIO_setupPinDirection+0x88>
    16b8:	84 2b       	or	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	98 c0       	rjmp	.+304    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16be:	aa e3       	ldi	r26, 0x3A	; 58
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ea e3       	ldi	r30, 0x3A	; 58
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <GPIO_setupPinDirection+0xb4>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <GPIO_setupPinDirection+0xb0>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	83 c0       	rjmp	.+262    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	a1 f4       	brne	.+40     	; 0x1716 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16ee:	a7 e3       	ldi	r26, 0x37	; 55
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e7 e3       	ldi	r30, 0x37	; 55
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <GPIO_setupPinDirection+0xe4>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <GPIO_setupPinDirection+0xe0>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	6c c0       	rjmp	.+216    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1716:	a7 e3       	ldi	r26, 0x37	; 55
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e7 e3       	ldi	r30, 0x37	; 55
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_setupPinDirection+0x10c>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_setupPinDirection+0x108>
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	57 c0       	rjmp	.+174    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	a1 f4       	brne	.+40     	; 0x176e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1746:	a4 e3       	ldi	r26, 0x34	; 52
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e4 e3       	ldi	r30, 0x34	; 52
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <GPIO_setupPinDirection+0x13c>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <GPIO_setupPinDirection+0x138>
    1768:	84 2b       	or	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	40 c0       	rjmp	.+128    	; 0x17ee <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    176e:	a4 e3       	ldi	r26, 0x34	; 52
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e4 e3       	ldi	r30, 0x34	; 52
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_setupPinDirection+0x164>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_setupPinDirection+0x160>
    1790:	80 95       	com	r24
    1792:	84 23       	and	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	2b c0       	rjmp	.+86     	; 0x17ee <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	a1 f4       	brne	.+40     	; 0x17c6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    179e:	a1 e3       	ldi	r26, 0x31	; 49
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e1 e3       	ldi	r30, 0x31	; 49
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <GPIO_setupPinDirection+0x194>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <GPIO_setupPinDirection+0x190>
    17c0:	84 2b       	or	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	14 c0       	rjmp	.+40     	; 0x17ee <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17c6:	a1 e3       	ldi	r26, 0x31	; 49
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e1 e3       	ldi	r30, 0x31	; 49
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_setupPinDirection+0x1bc>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_setupPinDirection+0x1b8>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <GPIO_writePin+0x6>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <GPIO_writePin+0x8>
    1806:	0f 92       	push	r0
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	6a 83       	std	Y+2, r22	; 0x02
    1810:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	88 30       	cpi	r24, 0x08	; 8
    1816:	08 f0       	brcs	.+2      	; 0x181a <GPIO_writePin+0x1c>
    1818:	d5 c0       	rjmp	.+426    	; 0x19c4 <GPIO_writePin+0x1c6>
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	08 f0       	brcs	.+2      	; 0x1822 <GPIO_writePin+0x24>
    1820:	d1 c0       	rjmp	.+418    	; 0x19c4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3d 83       	std	Y+5, r19	; 0x05
    182a:	2c 83       	std	Y+4, r18	; 0x04
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <GPIO_writePin+0x3a>
    1836:	43 c0       	rjmp	.+134    	; 0x18be <GPIO_writePin+0xc0>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	2c f4       	brge	.+10     	; 0x184c <GPIO_writePin+0x4e>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	71 f0       	breq	.+28     	; 0x1866 <GPIO_writePin+0x68>
    184a:	bc c0       	rjmp	.+376    	; 0x19c4 <GPIO_writePin+0x1c6>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <GPIO_writePin+0x5a>
    1856:	5f c0       	rjmp	.+190    	; 0x1916 <GPIO_writePin+0x118>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <GPIO_writePin+0x66>
    1862:	85 c0       	rjmp	.+266    	; 0x196e <GPIO_writePin+0x170>
    1864:	af c0       	rjmp	.+350    	; 0x19c4 <GPIO_writePin+0x1c6>
			{
			case PORTA_ID:
				if(value==LOGIC_HIGH){
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	a1 f4       	brne	.+40     	; 0x1894 <GPIO_writePin+0x96>
					SET_BIT(PORTA,pin_num);
    186c:	ab e3       	ldi	r26, 0x3B	; 59
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	eb e3       	ldi	r30, 0x3B	; 59
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <GPIO_writePin+0x8c>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <GPIO_writePin+0x88>
    188e:	84 2b       	or	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	98 c0       	rjmp	.+304    	; 0x19c4 <GPIO_writePin+0x1c6>
				}else{
					CLEAR_BIT(PORTA,pin_num);
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_writePin+0xb4>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_writePin+0xb0>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	83 c0       	rjmp	.+262    	; 0x19c4 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value==LOGIC_HIGH){
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	a1 f4       	brne	.+40     	; 0x18ec <GPIO_writePin+0xee>
					SET_BIT(PORTB,pin_num);
    18c4:	a8 e3       	ldi	r26, 0x38	; 56
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e8 e3       	ldi	r30, 0x38	; 56
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <GPIO_writePin+0xe4>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <GPIO_writePin+0xe0>
    18e6:	84 2b       	or	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	6c c0       	rjmp	.+216    	; 0x19c4 <GPIO_writePin+0x1c6>
				}else{
					CLEAR_BIT(PORTB,pin_num);
    18ec:	a8 e3       	ldi	r26, 0x38	; 56
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e8 e3       	ldi	r30, 0x38	; 56
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_writePin+0x10c>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_writePin+0x108>
    190e:	80 95       	com	r24
    1910:	84 23       	and	r24, r20
    1912:	8c 93       	st	X, r24
    1914:	57 c0       	rjmp	.+174    	; 0x19c4 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value==LOGIC_HIGH){
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	a1 f4       	brne	.+40     	; 0x1944 <GPIO_writePin+0x146>
					SET_BIT(PORTC,pin_num);
    191c:	a5 e3       	ldi	r26, 0x35	; 53
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e5 e3       	ldi	r30, 0x35	; 53
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <GPIO_writePin+0x13c>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <GPIO_writePin+0x138>
    193e:	84 2b       	or	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	40 c0       	rjmp	.+128    	; 0x19c4 <GPIO_writePin+0x1c6>
				}else{
					CLEAR_BIT(PORTC,pin_num);
    1944:	a5 e3       	ldi	r26, 0x35	; 53
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e3       	ldi	r30, 0x35	; 53
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_writePin+0x164>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_writePin+0x160>
    1966:	80 95       	com	r24
    1968:	84 23       	and	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	2b c0       	rjmp	.+86     	; 0x19c4 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value==LOGIC_HIGH){
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	a1 f4       	brne	.+40     	; 0x199c <GPIO_writePin+0x19e>
					SET_BIT(PORTD,pin_num);
    1974:	a2 e3       	ldi	r26, 0x32	; 50
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e2 e3       	ldi	r30, 0x32	; 50
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_writePin+0x194>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_writePin+0x190>
    1996:	84 2b       	or	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <GPIO_writePin+0x1c6>
				}else{
					CLEAR_BIT(PORTD,pin_num);
    199c:	a2 e3       	ldi	r26, 0x32	; 50
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e2 e3       	ldi	r30, 0x32	; 50
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_writePin+0x1bc>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_writePin+0x1b8>
    19be:	80 95       	com	r24
    19c0:	84 23       	and	r24, r20
    19c2:	8c 93       	st	X, r24
				}
				break;
			}
		}
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <GPIO_readPin+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <GPIO_readPin+0x8>
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	88 30       	cpi	r24, 0x08	; 8
    19ea:	18 f4       	brcc	.+6      	; 0x19f2 <GPIO_readPin+0x1e>
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	84 30       	cpi	r24, 0x04	; 4
    19f0:	10 f0       	brcs	.+4      	; 0x19f6 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    19f2:	1d 82       	std	Y+5, r1	; 0x05
    19f4:	82 c0       	rjmp	.+260    	; 0x1afa <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	3c 83       	std	Y+4, r19	; 0x04
    19fe:	2b 83       	std	Y+3, r18	; 0x03
    1a00:	4b 81       	ldd	r20, Y+3	; 0x03
    1a02:	5c 81       	ldd	r21, Y+4	; 0x04
    1a04:	41 30       	cpi	r20, 0x01	; 1
    1a06:	51 05       	cpc	r21, r1
    1a08:	79 f1       	breq	.+94     	; 0x1a68 <GPIO_readPin+0x94>
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	91 05       	cpc	r25, r1
    1a12:	34 f4       	brge	.+12     	; 0x1a20 <GPIO_readPin+0x4c>
    1a14:	2b 81       	ldd	r18, Y+3	; 0x03
    1a16:	3c 81       	ldd	r19, Y+4	; 0x04
    1a18:	21 15       	cp	r18, r1
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	69 f0       	breq	.+26     	; 0x1a38 <GPIO_readPin+0x64>
    1a1e:	6c c0       	rjmp	.+216    	; 0x1af8 <GPIO_readPin+0x124>
    1a20:	4b 81       	ldd	r20, Y+3	; 0x03
    1a22:	5c 81       	ldd	r21, Y+4	; 0x04
    1a24:	42 30       	cpi	r20, 0x02	; 2
    1a26:	51 05       	cpc	r21, r1
    1a28:	b9 f1       	breq	.+110    	; 0x1a98 <GPIO_readPin+0xc4>
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	91 05       	cpc	r25, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <GPIO_readPin+0x62>
    1a34:	49 c0       	rjmp	.+146    	; 0x1ac8 <GPIO_readPin+0xf4>
    1a36:	60 c0       	rjmp	.+192    	; 0x1af8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    1a38:	e9 e3       	ldi	r30, 0x39	; 57
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a9 01       	movw	r20, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <GPIO_readPin+0x7c>
    1a4c:	55 95       	asr	r21
    1a4e:	47 95       	ror	r20
    1a50:	8a 95       	dec	r24
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <GPIO_readPin+0x78>
    1a54:	ca 01       	movw	r24, r20
    1a56:	81 70       	andi	r24, 0x01	; 1
    1a58:	90 70       	andi	r25, 0x00	; 0
    1a5a:	88 23       	and	r24, r24
    1a5c:	19 f0       	breq	.+6      	; 0x1a64 <GPIO_readPin+0x90>
				return LOGIC_HIGH;
    1a5e:	51 e0       	ldi	r21, 0x01	; 1
    1a60:	5d 83       	std	Y+5, r21	; 0x05
    1a62:	4b c0       	rjmp	.+150    	; 0x1afa <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    1a64:	1d 82       	std	Y+5, r1	; 0x05
    1a66:	49 c0       	rjmp	.+146    	; 0x1afa <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    1a68:	e6 e3       	ldi	r30, 0x36	; 54
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a9 01       	movw	r20, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <GPIO_readPin+0xac>
    1a7c:	55 95       	asr	r21
    1a7e:	47 95       	ror	r20
    1a80:	8a 95       	dec	r24
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <GPIO_readPin+0xa8>
    1a84:	ca 01       	movw	r24, r20
    1a86:	81 70       	andi	r24, 0x01	; 1
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	88 23       	and	r24, r24
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <GPIO_readPin+0xc0>
				return LOGIC_HIGH;
    1a8e:	51 e0       	ldi	r21, 0x01	; 1
    1a90:	5d 83       	std	Y+5, r21	; 0x05
    1a92:	33 c0       	rjmp	.+102    	; 0x1afa <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    1a94:	1d 82       	std	Y+5, r1	; 0x05
    1a96:	31 c0       	rjmp	.+98     	; 0x1afa <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    1a98:	e3 e3       	ldi	r30, 0x33	; 51
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a9 01       	movw	r20, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <GPIO_readPin+0xdc>
    1aac:	55 95       	asr	r21
    1aae:	47 95       	ror	r20
    1ab0:	8a 95       	dec	r24
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <GPIO_readPin+0xd8>
    1ab4:	ca 01       	movw	r24, r20
    1ab6:	81 70       	andi	r24, 0x01	; 1
    1ab8:	90 70       	andi	r25, 0x00	; 0
    1aba:	88 23       	and	r24, r24
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <GPIO_readPin+0xf0>
				return LOGIC_HIGH;
    1abe:	51 e0       	ldi	r21, 0x01	; 1
    1ac0:	5d 83       	std	Y+5, r21	; 0x05
    1ac2:	1b c0       	rjmp	.+54     	; 0x1afa <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    1ac4:	1d 82       	std	Y+5, r1	; 0x05
    1ac6:	19 c0       	rjmp	.+50     	; 0x1afa <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    1ac8:	e0 e3       	ldi	r30, 0x30	; 48
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	a9 01       	movw	r20, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <GPIO_readPin+0x10c>
    1adc:	55 95       	asr	r21
    1ade:	47 95       	ror	r20
    1ae0:	8a 95       	dec	r24
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <GPIO_readPin+0x108>
    1ae4:	ca 01       	movw	r24, r20
    1ae6:	81 70       	andi	r24, 0x01	; 1
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	88 23       	and	r24, r24
    1aec:	19 f0       	breq	.+6      	; 0x1af4 <GPIO_readPin+0x120>
				return LOGIC_HIGH;
    1aee:	51 e0       	ldi	r21, 0x01	; 1
    1af0:	5d 83       	std	Y+5, r21	; 0x05
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    1af4:	1d 82       	std	Y+5, r1	; 0x05
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <GPIO_readPin+0x126>
			}
			break;
		}
	}
	return LOGIC_LOW;
    1af8:	1d 82       	std	Y+5, r1	; 0x05
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	00 d0       	rcall	.+0      	; 0x1b12 <GPIO_setupPortDirection+0x6>
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <GPIO_setupPortDirection+0x8>
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	90 f5       	brcc	.+100    	; 0x1b86 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	3c 83       	std	Y+4, r19	; 0x04
    1b2a:	2b 83       	std	Y+3, r18	; 0x03
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	91 05       	cpc	r25, r1
    1b34:	d1 f0       	breq	.+52     	; 0x1b6a <GPIO_setupPortDirection+0x5e>
    1b36:	2b 81       	ldd	r18, Y+3	; 0x03
    1b38:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <GPIO_setupPortDirection+0x3e>
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	61 f0       	breq	.+24     	; 0x1b60 <GPIO_setupPortDirection+0x54>
    1b48:	1e c0       	rjmp	.+60     	; 0x1b86 <GPIO_setupPortDirection+0x7a>
    1b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	81 f0       	breq	.+32     	; 0x1b74 <GPIO_setupPortDirection+0x68>
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	81 f0       	breq	.+32     	; 0x1b7e <GPIO_setupPortDirection+0x72>
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b60:	ea e3       	ldi	r30, 0x3A	; 58
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	80 83       	st	Z, r24
    1b68:	0e c0       	rjmp	.+28     	; 0x1b86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b6a:	e7 e3       	ldi	r30, 0x37	; 55
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	80 83       	st	Z, r24
    1b72:	09 c0       	rjmp	.+18     	; 0x1b86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b74:	e4 e3       	ldi	r30, 0x34	; 52
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	80 83       	st	Z, r24
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b7e:	e1 e3       	ldi	r30, 0x31	; 49
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <GPIO_writePort+0x6>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <GPIO_writePort+0x8>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	90 f5       	brcc	.+100    	; 0x1c0e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	3c 83       	std	Y+4, r19	; 0x04
    1bb2:	2b 83       	std	Y+3, r18	; 0x03
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	d1 f0       	breq	.+52     	; 0x1bf2 <GPIO_writePort+0x5e>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <GPIO_writePort+0x3e>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <GPIO_writePort+0x54>
    1bd0:	1e c0       	rjmp	.+60     	; 0x1c0e <GPIO_writePort+0x7a>
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	81 f0       	breq	.+32     	; 0x1bfc <GPIO_writePort+0x68>
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	83 30       	cpi	r24, 0x03	; 3
    1be2:	91 05       	cpc	r25, r1
    1be4:	81 f0       	breq	.+32     	; 0x1c06 <GPIO_writePort+0x72>
    1be6:	13 c0       	rjmp	.+38     	; 0x1c0e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1be8:	eb e3       	ldi	r30, 0x3B	; 59
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	80 83       	st	Z, r24
    1bf0:	0e c0       	rjmp	.+28     	; 0x1c0e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1bf2:	e8 e3       	ldi	r30, 0x38	; 56
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	80 83       	st	Z, r24
    1bfa:	09 c0       	rjmp	.+18     	; 0x1c0e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1bfc:	e5 e3       	ldi	r30, 0x35	; 53
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	80 83       	st	Z, r24
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1c06:	e2 e3       	ldi	r30, 0x32	; 50
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <GPIO_readPort+0x6>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <GPIO_readPort+0x8>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	89 83       	std	Y+1, r24	; 0x01
	/*
		 * Check if the input number is greater than NUM_OF_PORTS value.
		 * In this case the input is not valid port number
		 */
		if(port_num >= NUM_OF_PORTS)
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	84 30       	cpi	r24, 0x04	; 4
    1c2e:	10 f0       	brcs	.+4      	; 0x1c34 <GPIO_readPort+0x18>
		{
			return LOGIC_LOW;
    1c30:	1c 82       	std	Y+4, r1	; 0x04
    1c32:	34 c0       	rjmp	.+104    	; 0x1c9c <GPIO_readPort+0x80>
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3b 83       	std	Y+3, r19	; 0x03
    1c3c:	2a 83       	std	Y+2, r18	; 0x02
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	91 05       	cpc	r25, r1
    1c46:	d1 f0       	breq	.+52     	; 0x1c7c <GPIO_readPort+0x60>
    1c48:	2a 81       	ldd	r18, Y+2	; 0x02
    1c4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c4c:	22 30       	cpi	r18, 0x02	; 2
    1c4e:	31 05       	cpc	r19, r1
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <GPIO_readPort+0x40>
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <GPIO_readPort+0x56>
    1c5a:	1f c0       	rjmp	.+62     	; 0x1c9a <GPIO_readPort+0x7e>
    1c5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	81 f0       	breq	.+32     	; 0x1c86 <GPIO_readPort+0x6a>
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	81 f0       	breq	.+32     	; 0x1c90 <GPIO_readPort+0x74>
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <GPIO_readPort+0x7e>
			{
			case PORTA_ID:
				return PINA;
    1c72:	e9 e3       	ldi	r30, 0x39	; 57
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	90 81       	ld	r25, Z
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	10 c0       	rjmp	.+32     	; 0x1c9c <GPIO_readPort+0x80>
				break;
			case PORTB_ID:
				return PINB;
    1c7c:	e6 e3       	ldi	r30, 0x36	; 54
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	20 81       	ld	r18, Z
    1c82:	2c 83       	std	Y+4, r18	; 0x04
    1c84:	0b c0       	rjmp	.+22     	; 0x1c9c <GPIO_readPort+0x80>
				break;
			case PORTC_ID:
				return PINC;
    1c86:	e3 e3       	ldi	r30, 0x33	; 51
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	30 81       	ld	r19, Z
    1c8c:	3c 83       	std	Y+4, r19	; 0x04
    1c8e:	06 c0       	rjmp	.+12     	; 0x1c9c <GPIO_readPort+0x80>
				break;
			case PORTD_ID:
				return PIND;
    1c90:	e0 e3       	ldi	r30, 0x30	; 48
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	8c 83       	std	Y+4, r24	; 0x04
    1c98:	01 c0       	rjmp	.+2      	; 0x1c9c <GPIO_readPort+0x80>
				break;
			}
		}
		return LOGIC_LOW;
    1c9a:	1c 82       	std	Y+4, r1	; 0x04
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <DcMotor_Init>:
 * [Arguments]:             VOID
 *
 * [Returns]:               VOID
 ***************************************************************************************************/

void DcMotor_Init(void){
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT,MOTOR_PIN_IN1,PIN_OUTPUT);
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	64 e0       	ldi	r22, 0x04	; 4
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT,MOTOR_PIN_IN2,PIN_OUTPUT);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	65 e0       	ldi	r22, 0x05	; 5
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_PORT,MOTOR_PIN_IN1,LOGIC_LOW);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	64 e0       	ldi	r22, 0x04	; 4
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT,MOTOR_PIN_IN2,LOGIC_LOW);
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	65 e0       	ldi	r22, 0x05	; 5
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>

}
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <DcMotor_Rotate>:
 * 							speed: decimal value for the required motor speed, it should be from 0 -> 100
 *
 * [Returns]:               VOID
 ***************************************************************************************************/

void DcMotor_Rotate(DcMotor_State state){
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	0f 92       	push	r0
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	89 83       	std	Y+1, r24	; 0x01
	if(state==STOP){
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	88 23       	and	r24, r24
    1cf2:	59 f4       	brne	.+22     	; 0x1d0a <DcMotor_Rotate+0x28>
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN_IN1,LOGIC_LOW);
    1cf4:	82 e0       	ldi	r24, 0x02	; 2
    1cf6:	64 e0       	ldi	r22, 0x04	; 4
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN_IN2,LOGIC_LOW);
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	65 e0       	ldi	r22, 0x05	; 5
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
    1d08:	18 c0       	rjmp	.+48     	; 0x1d3a <DcMotor_Rotate+0x58>

	}else if(state==CLOCKWISE){
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	59 f4       	brne	.+22     	; 0x1d26 <DcMotor_Rotate+0x44>
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN_IN1,LOGIC_HIGH);
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	64 e0       	ldi	r22, 0x04	; 4
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN_IN2,LOGIC_LOW);
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	65 e0       	ldi	r22, 0x05	; 5
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
    1d24:	0a c0       	rjmp	.+20     	; 0x1d3a <DcMotor_Rotate+0x58>
	}else{
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN_IN1,LOGIC_LOW);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	64 e0       	ldi	r22, 0x04	; 4
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTOR_PIN_IN2,LOGIC_HIGH);
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	65 e0       	ldi	r22, 0x05	; 5
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_writePin>
	}




}
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <PWM_Timer0_Start>:
 * 3. Setup the prescaler with F_CPU/8
 * 4. Setup the compare value based on the required input duty cycle
 * 5. Setup the direction for OC0 as output pin
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	0f 92       	push	r0
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Timer0 initial value */
    1d52:	e2 e5       	ldi	r30, 0x52	; 82
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	10 82       	st	Z, r1

	OCR0  = ((float)duty_cycle / 100) * 255; /* Set Compare value */
    1d58:	0c e5       	ldi	r16, 0x5C	; 92
    1d5a:	10 e0       	ldi	r17, 0x00	; 0
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a0 e0       	ldi	r26, 0x00	; 0
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	48 ec       	ldi	r20, 0xC8	; 200
    1d7c:	52 e4       	ldi	r21, 0x42	; 66
    1d7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	f8 01       	movw	r30, r16
    1da8:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1daa:	e3 e5       	ldi	r30, 0x53	; 83
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	8a e6       	ldi	r24, 0x6A	; 106
    1db0:	80 83       	st	Z, r24

	/* Configure PB3/ OC0 as output pin --> pin where the PWM signal is generated from Timer0 */
	GPIO_setupPinDirection(TIMER0_OCO_PORT_ID,TIMER0_OCO_PIN_ID,PIN_OUTPUT);
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	63 e0       	ldi	r22, 0x03	; 3
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_setupPinDirection>
}
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	08 95       	ret

00001dc8 <__vector_9>:

/*******************************************************************************
 *                      TIMER 0 ISR                               			    *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    1dc8:	1f 92       	push	r1
    1dca:	0f 92       	push	r0
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	0f 92       	push	r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    1df2:	80 91 83 01 	lds	r24, 0x0183
    1df6:	90 91 84 01 	lds	r25, 0x0184
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_callBackPtr(); */
    1dfe:	e0 91 83 01 	lds	r30, 0x0183
    1e02:	f0 91 84 01 	lds	r31, 0x0184
    1e06:	09 95       	icall
	}
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	ff 91       	pop	r31
    1e0e:	ef 91       	pop	r30
    1e10:	bf 91       	pop	r27
    1e12:	af 91       	pop	r26
    1e14:	9f 91       	pop	r25
    1e16:	8f 91       	pop	r24
    1e18:	7f 91       	pop	r23
    1e1a:	6f 91       	pop	r22
    1e1c:	5f 91       	pop	r21
    1e1e:	4f 91       	pop	r20
    1e20:	3f 91       	pop	r19
    1e22:	2f 91       	pop	r18
    1e24:	0f 90       	pop	r0
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	0f 90       	pop	r0
    1e2a:	1f 90       	pop	r1
    1e2c:	18 95       	reti

00001e2e <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1e2e:	1f 92       	push	r1
    1e30:	0f 92       	push	r0
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	0f 92       	push	r0
    1e36:	11 24       	eor	r1, r1
    1e38:	2f 93       	push	r18
    1e3a:	3f 93       	push	r19
    1e3c:	4f 93       	push	r20
    1e3e:	5f 93       	push	r21
    1e40:	6f 93       	push	r22
    1e42:	7f 93       	push	r23
    1e44:	8f 93       	push	r24
    1e46:	9f 93       	push	r25
    1e48:	af 93       	push	r26
    1e4a:	bf 93       	push	r27
    1e4c:	ef 93       	push	r30
    1e4e:	ff 93       	push	r31
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    1e58:	80 91 83 01 	lds	r24, 0x0183
    1e5c:	90 91 84 01 	lds	r25, 0x0184
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	29 f0       	breq	.+10     	; 0x1e6e <__vector_19+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER2_callBackPtr(); */
    1e64:	e0 91 83 01 	lds	r30, 0x0183
    1e68:	f0 91 84 01 	lds	r31, 0x0184
    1e6c:	09 95       	icall
	}
}
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	ff 91       	pop	r31
    1e74:	ef 91       	pop	r30
    1e76:	bf 91       	pop	r27
    1e78:	af 91       	pop	r26
    1e7a:	9f 91       	pop	r25
    1e7c:	8f 91       	pop	r24
    1e7e:	7f 91       	pop	r23
    1e80:	6f 91       	pop	r22
    1e82:	5f 91       	pop	r21
    1e84:	4f 91       	pop	r20
    1e86:	3f 91       	pop	r19
    1e88:	2f 91       	pop	r18
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	0f 90       	pop	r0
    1e90:	1f 90       	pop	r1
    1e92:	18 95       	reti

00001e94 <__vector_8>:
/*******************************************************************************
 *                      TIMER 1 ISR                               			    *
 *******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    1e94:	1f 92       	push	r1
    1e96:	0f 92       	push	r0
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	0f 92       	push	r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	2f 93       	push	r18
    1ea0:	3f 93       	push	r19
    1ea2:	4f 93       	push	r20
    1ea4:	5f 93       	push	r21
    1ea6:	6f 93       	push	r22
    1ea8:	7f 93       	push	r23
    1eaa:	8f 93       	push	r24
    1eac:	9f 93       	push	r25
    1eae:	af 93       	push	r26
    1eb0:	bf 93       	push	r27
    1eb2:	ef 93       	push	r30
    1eb4:	ff 93       	push	r31
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    1ebe:	80 91 85 01 	lds	r24, 0x0185
    1ec2:	90 91 86 01 	lds	r25, 0x0186
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	29 f0       	breq	.+10     	; 0x1ed4 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER1_callBackPtr(); */
    1eca:	e0 91 85 01 	lds	r30, 0x0185
    1ece:	f0 91 86 01 	lds	r31, 0x0186
    1ed2:	09 95       	icall
	}
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	ff 91       	pop	r31
    1eda:	ef 91       	pop	r30
    1edc:	bf 91       	pop	r27
    1ede:	af 91       	pop	r26
    1ee0:	9f 91       	pop	r25
    1ee2:	8f 91       	pop	r24
    1ee4:	7f 91       	pop	r23
    1ee6:	6f 91       	pop	r22
    1ee8:	5f 91       	pop	r21
    1eea:	4f 91       	pop	r20
    1eec:	3f 91       	pop	r19
    1eee:	2f 91       	pop	r18
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	0f 90       	pop	r0
    1ef6:	1f 90       	pop	r1
    1ef8:	18 95       	reti

00001efa <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1efa:	1f 92       	push	r1
    1efc:	0f 92       	push	r0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	0f 92       	push	r0
    1f02:	11 24       	eor	r1, r1
    1f04:	2f 93       	push	r18
    1f06:	3f 93       	push	r19
    1f08:	4f 93       	push	r20
    1f0a:	5f 93       	push	r21
    1f0c:	6f 93       	push	r22
    1f0e:	7f 93       	push	r23
    1f10:	8f 93       	push	r24
    1f12:	9f 93       	push	r25
    1f14:	af 93       	push	r26
    1f16:	bf 93       	push	r27
    1f18:	ef 93       	push	r30
    1f1a:	ff 93       	push	r31
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    1f24:	80 91 85 01 	lds	r24, 0x0185
    1f28:	90 91 86 01 	lds	r25, 0x0186
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	29 f0       	breq	.+10     	; 0x1f3a <__vector_6+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER1_callBackPtr(); */
    1f30:	e0 91 85 01 	lds	r30, 0x0185
    1f34:	f0 91 86 01 	lds	r31, 0x0186
    1f38:	09 95       	icall
	}
}
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	ff 91       	pop	r31
    1f40:	ef 91       	pop	r30
    1f42:	bf 91       	pop	r27
    1f44:	af 91       	pop	r26
    1f46:	9f 91       	pop	r25
    1f48:	8f 91       	pop	r24
    1f4a:	7f 91       	pop	r23
    1f4c:	6f 91       	pop	r22
    1f4e:	5f 91       	pop	r21
    1f50:	4f 91       	pop	r20
    1f52:	3f 91       	pop	r19
    1f54:	2f 91       	pop	r18
    1f56:	0f 90       	pop	r0
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	0f 90       	pop	r0
    1f5c:	1f 90       	pop	r1
    1f5e:	18 95       	reti

00001f60 <__vector_4>:
/*******************************************************************************
 *                      TIMER 2 ISR                               			    *
 *******************************************************************************/
ISR(TIMER2_OVF_vect)
{
    1f60:	1f 92       	push	r1
    1f62:	0f 92       	push	r0
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	0f 92       	push	r0
    1f68:	11 24       	eor	r1, r1
    1f6a:	2f 93       	push	r18
    1f6c:	3f 93       	push	r19
    1f6e:	4f 93       	push	r20
    1f70:	5f 93       	push	r21
    1f72:	6f 93       	push	r22
    1f74:	7f 93       	push	r23
    1f76:	8f 93       	push	r24
    1f78:	9f 93       	push	r25
    1f7a:	af 93       	push	r26
    1f7c:	bf 93       	push	r27
    1f7e:	ef 93       	push	r30
    1f80:	ff 93       	push	r31
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    1f8a:	80 91 87 01 	lds	r24, 0x0187
    1f8e:	90 91 88 01 	lds	r25, 0x0188
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	29 f0       	breq	.+10     	; 0x1fa0 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_TIMER2_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER2_callBackPtr(); */
    1f96:	e0 91 87 01 	lds	r30, 0x0187
    1f9a:	f0 91 88 01 	lds	r31, 0x0188
    1f9e:	09 95       	icall
	}
}
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	ff 91       	pop	r31
    1fa6:	ef 91       	pop	r30
    1fa8:	bf 91       	pop	r27
    1faa:	af 91       	pop	r26
    1fac:	9f 91       	pop	r25
    1fae:	8f 91       	pop	r24
    1fb0:	7f 91       	pop	r23
    1fb2:	6f 91       	pop	r22
    1fb4:	5f 91       	pop	r21
    1fb6:	4f 91       	pop	r20
    1fb8:	3f 91       	pop	r19
    1fba:	2f 91       	pop	r18
    1fbc:	0f 90       	pop	r0
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	0f 90       	pop	r0
    1fc2:	1f 90       	pop	r1
    1fc4:	18 95       	reti

00001fc6 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1fc6:	1f 92       	push	r1
    1fc8:	0f 92       	push	r0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	0f 92       	push	r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	2f 93       	push	r18
    1fd2:	3f 93       	push	r19
    1fd4:	4f 93       	push	r20
    1fd6:	5f 93       	push	r21
    1fd8:	6f 93       	push	r22
    1fda:	7f 93       	push	r23
    1fdc:	8f 93       	push	r24
    1fde:	9f 93       	push	r25
    1fe0:	af 93       	push	r26
    1fe2:	bf 93       	push	r27
    1fe4:	ef 93       	push	r30
    1fe6:	ff 93       	push	r31
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    1ff0:	80 91 87 01 	lds	r24, 0x0187
    1ff4:	90 91 88 01 	lds	r25, 0x0188
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	29 f0       	breq	.+10     	; 0x2006 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_TIMER2_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER2_callBackPtr(); */
    1ffc:	e0 91 87 01 	lds	r30, 0x0187
    2000:	f0 91 88 01 	lds	r31, 0x0188
    2004:	09 95       	icall
	}
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	ff 91       	pop	r31
    200c:	ef 91       	pop	r30
    200e:	bf 91       	pop	r27
    2010:	af 91       	pop	r26
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	7f 91       	pop	r23
    2018:	6f 91       	pop	r22
    201a:	5f 91       	pop	r21
    201c:	4f 91       	pop	r20
    201e:	3f 91       	pop	r19
    2020:	2f 91       	pop	r18
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	0f 90       	pop	r0
    2028:	1f 90       	pop	r1
    202a:	18 95       	reti

0000202c <TIMER_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/


void TIMER_init(const Timer_Config* Config_Ptr){
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	2a 97       	sbiw	r28, 0x0a	; 10
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_type){
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	80 81       	ld	r24, Z
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3a 87       	std	Y+10, r19	; 0x0a
    2050:	29 87       	std	Y+9, r18	; 0x09
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	91 05       	cpc	r25, r1
    205a:	09 f4       	brne	.+2      	; 0x205e <TIMER_init+0x32>
    205c:	92 c0       	rjmp	.+292    	; 0x2182 <TIMER_init+0x156>
    205e:	e9 85       	ldd	r30, Y+9	; 0x09
    2060:	fa 85       	ldd	r31, Y+10	; 0x0a
    2062:	e2 30       	cpi	r30, 0x02	; 2
    2064:	f1 05       	cpc	r31, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <TIMER_init+0x3e>
    2068:	40 c1       	rjmp	.+640    	; 0x22ea <TIMER_init+0x2be>
    206a:	29 85       	ldd	r18, Y+9	; 0x09
    206c:	3a 85       	ldd	r19, Y+10	; 0x0a
    206e:	21 15       	cp	r18, r1
    2070:	31 05       	cpc	r19, r1
    2072:	09 f0       	breq	.+2      	; 0x2076 <TIMER_init+0x4a>
    2074:	e7 c1       	rjmp	.+974    	; 0x2444 <TIMER_init+0x418>
	case TIMER0:
		TIMER_deinit(TIMER0);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	0e 94 9b 12 	call	0x2536	; 0x2536 <TIMER_deinit>

		TIMER0_INITIAL_VALUE_REGISTER=(Config_Ptr->timer_initialValue)&(0XFF);
    207c:	22 e5       	ldi	r18, 0x52	; 82
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	e9 81       	ldd	r30, Y+1	; 0x01
    2082:	fa 81       	ldd	r31, Y+2	; 0x02
    2084:	83 81       	ldd	r24, Z+3	; 0x03
    2086:	94 81       	ldd	r25, Z+4	; 0x04
    2088:	a5 81       	ldd	r26, Z+5	; 0x05
    208a:	b6 81       	ldd	r27, Z+6	; 0x06
    208c:	f9 01       	movw	r30, r18
    208e:	80 83       	st	Z, r24
		/*add clock to first 3 bits*/
		TIMER0_CONTROL_REGISTER=(TIMER0_CONTROL_REGISTER&TIMER0_CLOCK_CLEAR_MASK)|(Config_Ptr->timer_clock);
    2090:	a3 e5       	ldi	r26, 0x53	; 83
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e3 e5       	ldi	r30, 0x53	; 83
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	98 2f       	mov	r25, r24
    209c:	98 7f       	andi	r25, 0xF8	; 248
    209e:	e9 81       	ldd	r30, Y+1	; 0x01
    20a0:	fa 81       	ldd	r31, Y+2	; 0x02
    20a2:	81 81       	ldd	r24, Z+1	; 0x01
    20a4:	89 2b       	or	r24, r25
    20a6:	8c 93       	st	X, r24
		/*Clear COM00 and COM01*/
		CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_COMPARE_OUTPUT_MODE_BIT0);
    20a8:	a3 e5       	ldi	r26, 0x53	; 83
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e3 e5       	ldi	r30, 0x53	; 83
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 7e       	andi	r24, 0xEF	; 239
    20b4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_COMPARE_OUTPUT_MODE_BIT1);
    20b6:	a3 e5       	ldi	r26, 0x53	; 83
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e3 e5       	ldi	r30, 0x53	; 83
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	8f 7d       	andi	r24, 0xDF	; 223
    20c2:	8c 93       	st	X, r24
		switch(Config_Ptr->timer_mode){
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	38 87       	std	Y+8, r19	; 0x08
    20d0:	2f 83       	std	Y+7, r18	; 0x07
    20d2:	8f 81       	ldd	r24, Y+7	; 0x07
    20d4:	98 85       	ldd	r25, Y+8	; 0x08
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	31 f0       	breq	.+12     	; 0x20e6 <TIMER_init+0xba>
    20da:	ef 81       	ldd	r30, Y+7	; 0x07
    20dc:	f8 85       	ldd	r31, Y+8	; 0x08
    20de:	e1 30       	cpi	r30, 0x01	; 1
    20e0:	f1 05       	cpc	r31, r1
    20e2:	19 f1       	breq	.+70     	; 0x212a <TIMER_init+0xfe>
    20e4:	af c1       	rjmp	.+862    	; 0x2444 <TIMER_init+0x418>
		case NORMAL:

			/*
			 * Make FOC0 to be Active as it is overflow mode non-pwm
			 */
			TIMER0_CONTROL_REGISTER = SET_BIT(TIMER0_CONTROL_REGISTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    20e6:	23 e5       	ldi	r18, 0x53	; 83
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	a3 e5       	ldi	r26, 0x53	; 83
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e3 e5       	ldi	r30, 0x53	; 83
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 68       	ori	r24, 0x80	; 128
    20f6:	8c 93       	st	X, r24
    20f8:	8c 91       	ld	r24, X
    20fa:	f9 01       	movw	r30, r18
    20fc:	80 83       	st	Z, r24
			/*
			 * Normal Overflow mode:
			 * Clear WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    20fe:	a3 e5       	ldi	r26, 0x53	; 83
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e3 e5       	ldi	r30, 0x53	; 83
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8f 7b       	andi	r24, 0xBF	; 191
    210a:	8c 93       	st	X, r24
			CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    210c:	a3 e5       	ldi	r26, 0x53	; 83
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e3 e5       	ldi	r30, 0x53	; 83
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	87 7f       	andi	r24, 0xF7	; 247
    2118:	8c 93       	st	X, r24

			/*Enable Interrupts for overflow mode*/
			SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_OVERFLOW_INTERRUPT);
    211a:	a9 e5       	ldi	r26, 0x59	; 89
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e9 e5       	ldi	r30, 0x59	; 89
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	81 60       	ori	r24, 0x01	; 1
    2126:	8c 93       	st	X, r24
    2128:	8d c1       	rjmp	.+794    	; 0x2444 <TIMER_init+0x418>
			break;
		case COMPARE:


			TIMER0_COMPARE_VALUE_REGISTER = ((Config_Ptr->timer_compareValue)) & 0XFF;
    212a:	2c e5       	ldi	r18, 0x5C	; 92
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	87 81       	ldd	r24, Z+7	; 0x07
    2134:	90 85       	ldd	r25, Z+8	; 0x08
    2136:	a1 85       	ldd	r26, Z+9	; 0x09
    2138:	b2 85       	ldd	r27, Z+10	; 0x0a
    213a:	f9 01       	movw	r30, r18
    213c:	80 83       	st	Z, r24


			/*
			 * Make FOC0 to be Active as it is overflow mode non-pwm
			 */
			TIMER0_CONTROL_REGISTER = SET_BIT(TIMER0_CONTROL_REGISTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    213e:	23 e5       	ldi	r18, 0x53	; 83
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	a3 e5       	ldi	r26, 0x53	; 83
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e3 e5       	ldi	r30, 0x53	; 83
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	80 68       	ori	r24, 0x80	; 128
    214e:	8c 93       	st	X, r24
    2150:	8c 91       	ld	r24, X
    2152:	f9 01       	movw	r30, r18
    2154:	80 83       	st	Z, r24
			/*
			 * Compare mode:
			 * Clear WGM00 bit in TCCR0 register
			 * Set WGM01 bit in TCCR0 register
			 */
			CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    2156:	a3 e5       	ldi	r26, 0x53	; 83
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e3 e5       	ldi	r30, 0x53	; 83
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	8f 7b       	andi	r24, 0xBF	; 191
    2162:	8c 93       	st	X, r24
			SET_BIT(TIMER0_CONTROL_REGISTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    2164:	a3 e5       	ldi	r26, 0x53	; 83
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e3 e5       	ldi	r30, 0x53	; 83
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	88 60       	ori	r24, 0x08	; 8
    2170:	8c 93       	st	X, r24

			/*Enable Interrupts for Compare mode*/
			SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT);
    2172:	a9 e5       	ldi	r26, 0x59	; 89
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e9 e5       	ldi	r30, 0x59	; 89
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	82 60       	ori	r24, 0x02	; 2
    217e:	8c 93       	st	X, r24
    2180:	61 c1       	rjmp	.+706    	; 0x2444 <TIMER_init+0x418>
		}


		break;
		case TIMER1:
			TIMER_deinit(TIMER1);
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	0e 94 9b 12 	call	0x2536	; 0x2536 <TIMER_deinit>
			TIMER1_INITIAL_VALUE_REGISTER=((Config_Ptr->timer_initialValue)) & 0XFFFF;
    2188:	2c e4       	ldi	r18, 0x4C	; 76
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	e9 81       	ldd	r30, Y+1	; 0x01
    218e:	fa 81       	ldd	r31, Y+2	; 0x02
    2190:	83 81       	ldd	r24, Z+3	; 0x03
    2192:	94 81       	ldd	r25, Z+4	; 0x04
    2194:	a5 81       	ldd	r26, Z+5	; 0x05
    2196:	b6 81       	ldd	r27, Z+6	; 0x06
    2198:	f9 01       	movw	r30, r18
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24

			TIMER1_CONTROL_REGISTER_B=(TIMER1_CONTROL_REGISTER_B&0XF8)|(Config_Ptr->timer_clock);
    219e:	ae e4       	ldi	r26, 0x4E	; 78
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	ee e4       	ldi	r30, 0x4E	; 78
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	98 2f       	mov	r25, r24
    21aa:	98 7f       	andi	r25, 0xF8	; 248
    21ac:	e9 81       	ldd	r30, Y+1	; 0x01
    21ae:	fa 81       	ldd	r31, Y+2	; 0x02
    21b0:	81 81       	ldd	r24, Z+1	; 0x01
    21b2:	89 2b       	or	r24, r25
    21b4:	8c 93       	st	X, r24
			 *
			 *              OC1A/OC1B disconnected
			 *              Clear COM1A0/COM1A1 bits in TCCR1A register
			 *              Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_CONTROL_REGISTER_A = TIMER1_CONTROL_REGISTER_A & 0X0F;
    21b6:	af e4       	ldi	r26, 0x4F	; 79
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	ef e4       	ldi	r30, 0x4F	; 79
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8f 70       	andi	r24, 0x0F	; 15
    21c2:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode){
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	3e 83       	std	Y+6, r19	; 0x06
    21d0:	2d 83       	std	Y+5, r18	; 0x05
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	31 f0       	breq	.+12     	; 0x21e6 <TIMER_init+0x1ba>
    21da:	ed 81       	ldd	r30, Y+5	; 0x05
    21dc:	fe 81       	ldd	r31, Y+6	; 0x06
    21de:	e1 30       	cpi	r30, 0x01	; 1
    21e0:	f1 05       	cpc	r31, r1
    21e2:	a1 f1       	breq	.+104    	; 0x224c <TIMER_init+0x220>
    21e4:	2f c1       	rjmp	.+606    	; 0x2444 <TIMER_init+0x418>
				/*
				 * Normal Overflow mode:
				 * Clear WGM10/WMG11 bit in TCCR1A register
				 *Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGISTER_A = TIMER1_CONTROL_REGISTER_A & 0XFC ;
    21e6:	af e4       	ldi	r26, 0x4F	; 79
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	ef e4       	ldi	r30, 0x4F	; 79
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	8c 7f       	andi	r24, 0xFC	; 252
    21f2:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGISTER_B = TIMER1_CONTROL_REGISTER_B & 0XE7 ;
    21f4:	ae e4       	ldi	r26, 0x4E	; 78
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	ee e4       	ldi	r30, 0x4E	; 78
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	87 7e       	andi	r24, 0xE7	; 231
    2200:	8c 93       	st	X, r24

				/*
				 * Make FOC1A/FOC1B to be Active as it is a non_pwm mode
				 */
				TIMER1_CONTROL_REGISTER_A =  SET_BIT(TIMER1_CONTROL_REGISTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2202:	2f e4       	ldi	r18, 0x4F	; 79
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	af e4       	ldi	r26, 0x4F	; 79
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	ef e4       	ldi	r30, 0x4F	; 79
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	88 60       	ori	r24, 0x08	; 8
    2212:	8c 93       	st	X, r24
    2214:	8c 91       	ld	r24, X
    2216:	f9 01       	movw	r30, r18
    2218:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGISTER_A =  SET_BIT(TIMER1_CONTROL_REGISTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    221a:	2f e4       	ldi	r18, 0x4F	; 79
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	af e4       	ldi	r26, 0x4F	; 79
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	ef e4       	ldi	r30, 0x4F	; 79
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	84 60       	ori	r24, 0x04	; 4
    222a:	8c 93       	st	X, r24
    222c:	8c 91       	ld	r24, X
    222e:	f9 01       	movw	r30, r18
    2230:	80 83       	st	Z, r24

				/*
				 * Enable Timer1 overflow interrupt
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_OVERFLOW_INTERRUPT);
    2232:	29 e5       	ldi	r18, 0x59	; 89
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	a9 e5       	ldi	r26, 0x59	; 89
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e9 e5       	ldi	r30, 0x59	; 89
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	84 60       	ori	r24, 0x04	; 4
    2242:	8c 93       	st	X, r24
    2244:	8c 91       	ld	r24, X
    2246:	f9 01       	movw	r30, r18
    2248:	80 83       	st	Z, r24
    224a:	fc c0       	rjmp	.+504    	; 0x2444 <TIMER_init+0x418>
				 * Compare mode:
				 * Clear WGM10/WGM11 bits in TCCR1A register
				 * Set WGM12 bit in TCCR1B register
				 * Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGISTER_A = TIMER1_CONTROL_REGISTER_A & 0XFC ;
    224c:	af e4       	ldi	r26, 0x4F	; 79
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	ef e4       	ldi	r30, 0x4F	; 79
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	8c 7f       	andi	r24, 0xFC	; 252
    2258:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGISTER_B = SET_BIT(TIMER1_CONTROL_REGISTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    225a:	2e e4       	ldi	r18, 0x4E	; 78
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	ae e4       	ldi	r26, 0x4E	; 78
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ee e4       	ldi	r30, 0x4E	; 78
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	88 60       	ori	r24, 0x08	; 8
    226a:	8c 93       	st	X, r24
    226c:	8c 91       	ld	r24, X
    226e:	f9 01       	movw	r30, r18
    2270:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGISTER_B = CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    2272:	2e e4       	ldi	r18, 0x4E	; 78
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	ae e4       	ldi	r26, 0x4E	; 78
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	ee e4       	ldi	r30, 0x4E	; 78
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	8f 7e       	andi	r24, 0xEF	; 239
    2282:	8c 93       	st	X, r24
    2284:	8c 91       	ld	r24, X
    2286:	f9 01       	movw	r30, r18
    2288:	80 83       	st	Z, r24

				/*
				 *  Make FOC1A/FOC1B to be Active as it is compare mode
				 */
				TIMER1_CONTROL_REGISTER_A =  SET_BIT(TIMER1_CONTROL_REGISTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    228a:	2f e4       	ldi	r18, 0x4F	; 79
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	af e4       	ldi	r26, 0x4F	; 79
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	ef e4       	ldi	r30, 0x4F	; 79
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	88 60       	ori	r24, 0x08	; 8
    229a:	8c 93       	st	X, r24
    229c:	8c 91       	ld	r24, X
    229e:	f9 01       	movw	r30, r18
    22a0:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGISTER_A =  SET_BIT(TIMER1_CONTROL_REGISTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    22a2:	2f e4       	ldi	r18, 0x4F	; 79
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	af e4       	ldi	r26, 0x4F	; 79
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	ef e4       	ldi	r30, 0x4F	; 79
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	84 60       	ori	r24, 0x04	; 4
    22b2:	8c 93       	st	X, r24
    22b4:	8c 91       	ld	r24, X
    22b6:	f9 01       	movw	r30, r18
    22b8:	80 83       	st	Z, r24

				/*
				 * Configure Compare match value for Timer1 to start count from it
				 * 0XFFFF so that value doesn't exceed 16_bits
				 */
				TIMER1_COMPARE_VALUE_REGISTER_A = ((Config_Ptr->timer_compareValue)) & 0XFFFF;
    22ba:	2a e4       	ldi	r18, 0x4A	; 74
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	e9 81       	ldd	r30, Y+1	; 0x01
    22c0:	fa 81       	ldd	r31, Y+2	; 0x02
    22c2:	87 81       	ldd	r24, Z+7	; 0x07
    22c4:	90 85       	ldd	r25, Z+8	; 0x08
    22c6:	a1 85       	ldd	r26, Z+9	; 0x09
    22c8:	b2 85       	ldd	r27, Z+10	; 0x0a
    22ca:	f9 01       	movw	r30, r18
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24

				/*
				 * Enable Timer1 compare match interrupt
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT);
    22d0:	29 e5       	ldi	r18, 0x59	; 89
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	a9 e5       	ldi	r26, 0x59	; 89
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e9 e5       	ldi	r30, 0x59	; 89
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	80 61       	ori	r24, 0x10	; 16
    22e0:	8c 93       	st	X, r24
    22e2:	8c 91       	ld	r24, X
    22e4:	f9 01       	movw	r30, r18
    22e6:	80 83       	st	Z, r24
    22e8:	ad c0       	rjmp	.+346    	; 0x2444 <TIMER_init+0x418>
				break;
			}

			break;
			case TIMER2:
				TIMER_deinit(TIMER2);
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	0e 94 9b 12 	call	0x2536	; 0x2536 <TIMER_deinit>
				/*
				 * Configure initial value for Timer2 to start count from it
				 * 0XFF so that value doesn't exceed 8_bits
				 */

				TIMER2_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_initialValue) ) & 0XFF;
    22f0:	24 e4       	ldi	r18, 0x44	; 68
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	e9 81       	ldd	r30, Y+1	; 0x01
    22f6:	fa 81       	ldd	r31, Y+2	; 0x02
    22f8:	83 81       	ldd	r24, Z+3	; 0x03
    22fa:	94 81       	ldd	r25, Z+4	; 0x04
    22fc:	a5 81       	ldd	r26, Z+5	; 0x05
    22fe:	b6 81       	ldd	r27, Z+6	; 0x06
    2300:	f9 01       	movw	r30, r18
    2302:	80 83       	st	Z, r24
				/*
				 * TIMER Pre-scaler value for Timer2 in TCCR2 Register
				 * 0XF8 to make sure that the least 3-bits in TCCR2 register=0
				 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
				 */
				TIMER2_CONTROL_REGISTER = (TIMER2_CONTROL_REGISTER  & TIMER2_CLOCK_CLEAR_MASK) | (Config_Ptr->timer_clock);
    2304:	a5 e4       	ldi	r26, 0x45	; 69
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e5 e4       	ldi	r30, 0x45	; 69
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	98 2f       	mov	r25, r24
    2310:	98 7f       	andi	r25, 0xF8	; 248
    2312:	e9 81       	ldd	r30, Y+1	; 0x01
    2314:	fa 81       	ldd	r31, Y+2	; 0x02
    2316:	81 81       	ldd	r24, Z+1	; 0x01
    2318:	89 2b       	or	r24, r25
    231a:	8c 93       	st	X, r24
				 *  Compare mode:
				 *              OC2 disconnected
				 *              Clear COM20 bit in TCCR2 register
				 *              Clear COM21 bit in TCCR2 register
				 */
				TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER, TIMER2_COMPARE_OUTPUT_MODE_BIT0);
    231c:	25 e4       	ldi	r18, 0x45	; 69
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	a5 e4       	ldi	r26, 0x45	; 69
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e5 e4       	ldi	r30, 0x45	; 69
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	8f 7e       	andi	r24, 0xEF	; 239
    232c:	8c 93       	st	X, r24
    232e:	8c 91       	ld	r24, X
    2330:	f9 01       	movw	r30, r18
    2332:	80 83       	st	Z, r24
				TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER, TIMER2_COMPARE_OUTPUT_MODE_BIT1);
    2334:	25 e4       	ldi	r18, 0x45	; 69
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	a5 e4       	ldi	r26, 0x45	; 69
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e5 e4       	ldi	r30, 0x45	; 69
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	8f 7d       	andi	r24, 0xDF	; 223
    2344:	8c 93       	st	X, r24
    2346:	8c 91       	ld	r24, X
    2348:	f9 01       	movw	r30, r18
    234a:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    234c:	e9 81       	ldd	r30, Y+1	; 0x01
    234e:	fa 81       	ldd	r31, Y+2	; 0x02
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	3c 83       	std	Y+4, r19	; 0x04
    2358:	2b 83       	std	Y+3, r18	; 0x03
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	31 f0       	breq	.+12     	; 0x236e <TIMER_init+0x342>
    2362:	eb 81       	ldd	r30, Y+3	; 0x03
    2364:	fc 81       	ldd	r31, Y+4	; 0x04
    2366:	e1 30       	cpi	r30, 0x01	; 1
    2368:	f1 05       	cpc	r31, r1
    236a:	91 f1       	breq	.+100    	; 0x23d0 <TIMER_init+0x3a4>
    236c:	6b c0       	rjmp	.+214    	; 0x2444 <TIMER_init+0x418>
					/*
					 * Normal Overflow mode:
					 *                      Clear WGM00 bit in TCCR0 register
					 *                      Clear WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    236e:	25 e4       	ldi	r18, 0x45	; 69
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	a5 e4       	ldi	r26, 0x45	; 69
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e5 e4       	ldi	r30, 0x45	; 69
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	8f 7b       	andi	r24, 0xBF	; 191
    237e:	8c 93       	st	X, r24
    2380:	8c 91       	ld	r24, X
    2382:	f9 01       	movw	r30, r18
    2384:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    2386:	25 e4       	ldi	r18, 0x45	; 69
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	a5 e4       	ldi	r26, 0x45	; 69
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e5 e4       	ldi	r30, 0x45	; 69
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	87 7f       	andi	r24, 0xF7	; 247
    2396:	8c 93       	st	X, r24
    2398:	8c 91       	ld	r24, X
    239a:	f9 01       	movw	r30, r18
    239c:	80 83       	st	Z, r24

					/*
					 * Make FOC2 to be Active as it is overflow mode
					 */
					TIMER2_CONTROL_REGISTER =  SET_BIT(TIMER2_CONTROL_REGISTER ,TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    239e:	25 e4       	ldi	r18, 0x45	; 69
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	a5 e4       	ldi	r26, 0x45	; 69
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e5 e4       	ldi	r30, 0x45	; 69
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	80 68       	ori	r24, 0x80	; 128
    23ae:	8c 93       	st	X, r24
    23b0:	8c 91       	ld	r24, X
    23b2:	f9 01       	movw	r30, r18
    23b4:	80 83       	st	Z, r24


					/*
					 * Enable Timer2 overflow interrupt
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER,TIMER2_OUTPUT_OVERFLOW_INTERRUPT);
    23b6:	29 e5       	ldi	r18, 0x59	; 89
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	a9 e5       	ldi	r26, 0x59	; 89
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e9 e5       	ldi	r30, 0x59	; 89
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	80 64       	ori	r24, 0x40	; 64
    23c6:	8c 93       	st	X, r24
    23c8:	8c 91       	ld	r24, X
    23ca:	f9 01       	movw	r30, r18
    23cc:	80 83       	st	Z, r24
    23ce:	3a c0       	rjmp	.+116    	; 0x2444 <TIMER_init+0x418>
					/*
					 *  Compare mode:
					 *               Clear WGM20 bit in TCCR2 register
					 *               Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    23d0:	25 e4       	ldi	r18, 0x45	; 69
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	a5 e4       	ldi	r26, 0x45	; 69
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e5 e4       	ldi	r30, 0x45	; 69
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	8f 7b       	andi	r24, 0xBF	; 191
    23e0:	8c 93       	st	X, r24
    23e2:	8c 91       	ld	r24, X
    23e4:	f9 01       	movw	r30, r18
    23e6:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGISTER  = SET_BIT(TIMER2_CONTROL_REGISTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    23e8:	25 e4       	ldi	r18, 0x45	; 69
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	a5 e4       	ldi	r26, 0x45	; 69
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e4       	ldi	r30, 0x45	; 69
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	88 60       	ori	r24, 0x08	; 8
    23f8:	8c 93       	st	X, r24
    23fa:	8c 91       	ld	r24, X
    23fc:	f9 01       	movw	r30, r18
    23fe:	80 83       	st	Z, r24

					/*
					 *  Make FOC2 to be Active as it is compare mode
					 */
					TIMER2_CONTROL_REGISTER =  SET_BIT(TIMER2_CONTROL_REGISTER , TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    2400:	25 e4       	ldi	r18, 0x45	; 69
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	a5 e4       	ldi	r26, 0x45	; 69
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e5 e4       	ldi	r30, 0x45	; 69
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	80 68       	ori	r24, 0x80	; 128
    2410:	8c 93       	st	X, r24
    2412:	8c 91       	ld	r24, X
    2414:	f9 01       	movw	r30, r18
    2416:	80 83       	st	Z, r24
					/*
					 * Configure compare match value for Timer2 to start count from it
					 * 0XFF so that value doesn't exceed 8_bits
					 */

					TIMER2_COMPARE_VALUE_REGISTER = ((Config_Ptr->timer_compareValue)) & 0XFF;
    2418:	23 e4       	ldi	r18, 0x43	; 67
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	e9 81       	ldd	r30, Y+1	; 0x01
    241e:	fa 81       	ldd	r31, Y+2	; 0x02
    2420:	87 81       	ldd	r24, Z+7	; 0x07
    2422:	90 85       	ldd	r25, Z+8	; 0x08
    2424:	a1 85       	ldd	r26, Z+9	; 0x09
    2426:	b2 85       	ldd	r27, Z+10	; 0x0a
    2428:	f9 01       	movw	r30, r18
    242a:	80 83       	st	Z, r24

					/*
					 * Enable Timer2 compare match interrupt
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    242c:	29 e5       	ldi	r18, 0x59	; 89
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	a9 e5       	ldi	r26, 0x59	; 89
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e9 e5       	ldi	r30, 0x59	; 89
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 68       	ori	r24, 0x80	; 128
    243c:	8c 93       	st	X, r24
    243e:	8c 91       	ld	r24, X
    2440:	f9 01       	movw	r30, r18
    2442:	80 83       	st	Z, r24


					break;
				}
	}
}
    2444:	2a 96       	adiw	r28, 0x0a	; 10
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <TIMER_setCallBack>:



void TIMER_setCallBack(void(*a_ptr)(void),Timer_Type timer_type){
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <TIMER_setCallBack+0x6>
    245c:	00 d0       	rcall	.+0      	; 0x245e <TIMER_setCallBack+0x8>
    245e:	0f 92       	push	r0
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type){
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	3d 83       	std	Y+5, r19	; 0x05
    2472:	2c 83       	std	Y+4, r18	; 0x04
    2474:	8c 81       	ldd	r24, Y+4	; 0x04
    2476:	9d 81       	ldd	r25, Y+5	; 0x05
    2478:	81 30       	cpi	r24, 0x01	; 1
    247a:	91 05       	cpc	r25, r1
    247c:	81 f0       	breq	.+32     	; 0x249e <TIMER_setCallBack+0x48>
    247e:	2c 81       	ldd	r18, Y+4	; 0x04
    2480:	3d 81       	ldd	r19, Y+5	; 0x05
    2482:	22 30       	cpi	r18, 0x02	; 2
    2484:	31 05       	cpc	r19, r1
    2486:	91 f0       	breq	.+36     	; 0x24ac <TIMER_setCallBack+0x56>
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	9d 81       	ldd	r25, Y+5	; 0x05
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	a1 f4       	brne	.+40     	; 0x24b8 <TIMER_setCallBack+0x62>
	case TIMER0:
		g_TIMER0_callBackPtr=a_ptr;
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	90 93 84 01 	sts	0x0184, r25
    2498:	80 93 83 01 	sts	0x0183, r24
    249c:	0d c0       	rjmp	.+26     	; 0x24b8 <TIMER_setCallBack+0x62>
		break;
	case TIMER1:
		g_TIMER1_callBackPtr=a_ptr;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	90 93 86 01 	sts	0x0186, r25
    24a6:	80 93 85 01 	sts	0x0185, r24
    24aa:	06 c0       	rjmp	.+12     	; 0x24b8 <TIMER_setCallBack+0x62>
		break;
	case TIMER2:
		g_TIMER2_callBackPtr=a_ptr;
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	90 93 88 01 	sts	0x0188, r25
    24b4:	80 93 87 01 	sts	0x0187, r24
		break;
	}
}
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <TIMER_stop>:



void TIMER_stop(Timer_Type timer_type){
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <TIMER_stop+0x6>
    24ce:	0f 92       	push	r0
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type){
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	3b 83       	std	Y+3, r19	; 0x03
    24de:	2a 83       	std	Y+2, r18	; 0x02
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	9b 81       	ldd	r25, Y+3	; 0x03
    24e4:	81 30       	cpi	r24, 0x01	; 1
    24e6:	91 05       	cpc	r25, r1
    24e8:	89 f0       	breq	.+34     	; 0x250c <TIMER_stop+0x44>
    24ea:	2a 81       	ldd	r18, Y+2	; 0x02
    24ec:	3b 81       	ldd	r19, Y+3	; 0x03
    24ee:	22 30       	cpi	r18, 0x02	; 2
    24f0:	31 05       	cpc	r19, r1
    24f2:	a1 f0       	breq	.+40     	; 0x251c <TIMER_stop+0x54>
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	b9 f4       	brne	.+46     	; 0x252a <TIMER_stop+0x62>
	case TIMER0:
		TIMER0_CONTROL_REGISTER=( TIMER0_CONTROL_REGISTER & TIMER0_CLOCK_CLEAR_MASK );
    24fc:	a3 e5       	ldi	r26, 0x53	; 83
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e3 e5       	ldi	r30, 0x53	; 83
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	88 7f       	andi	r24, 0xF8	; 248
    2508:	8c 93       	st	X, r24
    250a:	0f c0       	rjmp	.+30     	; 0x252a <TIMER_stop+0x62>
		break;
	case TIMER1:
		TIMER1_CONTROL_REGISTER_B=(TIMER1_CONTROL_REGISTER_B&TIMER1_CLOCK_CLEAR_MASK);
    250c:	ae e4       	ldi	r26, 0x4E	; 78
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	ee e4       	ldi	r30, 0x4E	; 78
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	88 7f       	andi	r24, 0xF8	; 248
    2518:	8c 93       	st	X, r24
    251a:	07 c0       	rjmp	.+14     	; 0x252a <TIMER_stop+0x62>
		break;
	case TIMER2:
		TIMER2_CONTROL_REGISTER=(TIMER2_CONTROL_REGISTER&TIMER2_CLOCK_CLEAR_MASK);
    251c:	a5 e4       	ldi	r26, 0x45	; 69
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e5 e4       	ldi	r30, 0x45	; 69
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	88 7f       	andi	r24, 0xF8	; 248
    2528:	8c 93       	st	X, r24

		break;
	}
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <TIMER_deinit>:



void TIMER_deinit(Timer_Type timer_type){
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <TIMER_deinit+0x6>
    253c:	0f 92       	push	r0
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type){
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	3b 83       	std	Y+3, r19	; 0x03
    254c:	2a 83       	std	Y+2, r18	; 0x02
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	9b 81       	ldd	r25, Y+3	; 0x03
    2552:	81 30       	cpi	r24, 0x01	; 1
    2554:	91 05       	cpc	r25, r1
    2556:	b1 f0       	breq	.+44     	; 0x2584 <TIMER_deinit+0x4e>
    2558:	2a 81       	ldd	r18, Y+2	; 0x02
    255a:	3b 81       	ldd	r19, Y+3	; 0x03
    255c:	22 30       	cpi	r18, 0x02	; 2
    255e:	31 05       	cpc	r19, r1
    2560:	19 f1       	breq	.+70     	; 0x25a8 <TIMER_deinit+0x72>
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	9b 81       	ldd	r25, Y+3	; 0x03
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	59 f5       	brne	.+86     	; 0x25c0 <TIMER_deinit+0x8a>
	case TIMER0:
		TIMER0_CONTROL_REGISTER=0x00;
    256a:	e3 e5       	ldi	r30, 0x53	; 83
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER=0x00;
    2570:	e2 e5       	ldi	r30, 0x52	; 82
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	10 82       	st	Z, r1
		TIMER0_COMPARE_VALUE_REGISTER=0x00;
    2576:	ec e5       	ldi	r30, 0x5C	; 92
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER=0x00;
    257c:	e9 e5       	ldi	r30, 0x59	; 89
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	10 82       	st	Z, r1
    2582:	1e c0       	rjmp	.+60     	; 0x25c0 <TIMER_deinit+0x8a>
		break;
	case TIMER1:
		TIMER1_CONTROL_REGISTER_A=0;
    2584:	ef e4       	ldi	r30, 0x4F	; 79
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	10 82       	st	Z, r1
		TIMER1_CONTROL_REGISTER_B=0;
    258a:	ee e4       	ldi	r30, 0x4E	; 78
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	10 82       	st	Z, r1
		TIMER1_INITIAL_VALUE_REGISTER=0;
    2590:	ec e4       	ldi	r30, 0x4C	; 76
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	11 82       	std	Z+1, r1	; 0x01
    2596:	10 82       	st	Z, r1
		TIMER1_COMPARE_VALUE_REGISTER_A=0;
    2598:	ea e4       	ldi	r30, 0x4A	; 74
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	11 82       	std	Z+1, r1	; 0x01
    259e:	10 82       	st	Z, r1
		TIMER1_INTERRUPT_MASK_REGISTER=0;
    25a0:	e9 e5       	ldi	r30, 0x59	; 89
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	10 82       	st	Z, r1
    25a6:	0c c0       	rjmp	.+24     	; 0x25c0 <TIMER_deinit+0x8a>
		break;
	case TIMER2:
		TIMER2_CONTROL_REGISTER=0x00;
    25a8:	e5 e4       	ldi	r30, 0x45	; 69
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	10 82       	st	Z, r1
		TIMER2_INITIAL_VALUE_REGISTER=0x00;
    25ae:	e4 e4       	ldi	r30, 0x44	; 68
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	10 82       	st	Z, r1
		TIMER2_COMPARE_VALUE_REGISTER=0x00;
    25b4:	e3 e4       	ldi	r30, 0x43	; 67
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	10 82       	st	Z, r1
		TIMER2_INTERRUPT_MASK_REGISTER=0x00;
    25ba:	e9 e5       	ldi	r30, 0x59	; 89
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	10 82       	st	Z, r1
		break;
	}
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2C_config *config_Ptr)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <TWI_init+0x6>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01

    TWBR =config_Ptr->bit_rate;
    25da:	a0 e2       	ldi	r26, 0x20	; 32
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e9 81       	ldd	r30, Y+1	; 0x01
    25e0:	fa 81       	ldd	r31, Y+2	; 0x02
    25e2:	80 81       	ld	r24, Z
    25e4:	8c 93       	st	X, r24

	TWSR = (TWSR&0xFC)|(config_Ptr->PRESCALER);
    25e6:	a1 e2       	ldi	r26, 0x21	; 33
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e1 e2       	ldi	r30, 0x21	; 33
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	98 2f       	mov	r25, r24
    25f2:	9c 7f       	andi	r25, 0xFC	; 252
    25f4:	e9 81       	ldd	r30, Y+1	; 0x01
    25f6:	fa 81       	ldd	r31, Y+2	; 0x02
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	89 2b       	or	r24, r25
    25fc:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = config_Ptr->adress; // my address = 0x01 :)
    25fe:	a2 e2       	ldi	r26, 0x22	; 34
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e9 81       	ldd	r30, Y+1	; 0x01
    2604:	fa 81       	ldd	r31, Y+2	; 0x02
    2606:	81 81       	ldd	r24, Z+1	; 0x01
    2608:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    260a:	e6 e5       	ldi	r30, 0x56	; 86
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	84 e0       	ldi	r24, 0x04	; 4
    2610:	80 83       	st	Z, r24
}
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <TWI_start>:

void TWI_start(void)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2624:	e6 e5       	ldi	r30, 0x56	; 86
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	84 ea       	ldi	r24, 0xA4	; 164
    262a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    262c:	e6 e5       	ldi	r30, 0x56	; 86
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	88 23       	and	r24, r24
    2634:	dc f7       	brge	.-10     	; 0x262c <TWI_start+0x10>
}
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <TWI_stop>:

void TWI_stop(void)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2644:	e6 e5       	ldi	r30, 0x56	; 86
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	84 e9       	ldi	r24, 0x94	; 148
    264a:	80 83       	st	Z, r24
}
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    265e:	e3 e2       	ldi	r30, 0x23	; 35
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2666:	e6 e5       	ldi	r30, 0x56	; 86
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	84 e8       	ldi	r24, 0x84	; 132
    266c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    266e:	e6 e5       	ldi	r30, 0x56	; 86
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	88 23       	and	r24, r24
    2676:	dc f7       	brge	.-10     	; 0x266e <TWI_writeByte+0x1c>
}
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2688:	e6 e5       	ldi	r30, 0x56	; 86
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	84 ec       	ldi	r24, 0xC4	; 196
    268e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2690:	e6 e5       	ldi	r30, 0x56	; 86
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	88 23       	and	r24, r24
    2698:	dc f7       	brge	.-10     	; 0x2690 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    269a:	e3 e2       	ldi	r30, 0x23	; 35
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
}
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    26ae:	e6 e5       	ldi	r30, 0x56	; 86
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	84 e8       	ldi	r24, 0x84	; 132
    26b4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26b6:	e6 e5       	ldi	r30, 0x56	; 86
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	88 23       	and	r24, r24
    26be:	dc f7       	brge	.-10     	; 0x26b6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    26c0:	e3 e2       	ldi	r30, 0x23	; 35
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    26d6:	e1 e2       	ldi	r30, 0x21	; 33
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	88 7f       	andi	r24, 0xF8	; 248
    26de:	89 83       	std	Y+1, r24	; 0x01
    return status;
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_config *Config_Ptr)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <UART_init+0x6>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <UART_init+0x8>
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    26fa:	1a 82       	std	Y+2, r1	; 0x02
    26fc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    26fe:	eb e2       	ldi	r30, 0x2B	; 43
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2706:	ea e2       	ldi	r30, 0x2A	; 42
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	88 e1       	ldi	r24, 0x18	; 24
    270c:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC

	 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    270e:	a0 e4       	ldi	r26, 0x40	; 64
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e0 e4       	ldi	r30, 0x40	; 64
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	80 68       	ori	r24, 0x80	; 128
    271a:	8c 93       	st	X, r24


	UCSRC=( UCSRC&0XBF)|((Config_Ptr->mode)<<6);
    271c:	a0 e4       	ldi	r26, 0x40	; 64
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e0 e4       	ldi	r30, 0x40	; 64
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	28 2f       	mov	r18, r24
    2728:	2f 7b       	andi	r18, 0xBF	; 191
    272a:	eb 81       	ldd	r30, Y+3	; 0x03
    272c:	fc 81       	ldd	r31, Y+4	; 0x04
    272e:	80 81       	ld	r24, Z
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	00 24       	eor	r0, r0
    2736:	96 95       	lsr	r25
    2738:	87 95       	ror	r24
    273a:	07 94       	ror	r0
    273c:	96 95       	lsr	r25
    273e:	87 95       	ror	r24
    2740:	07 94       	ror	r0
    2742:	98 2f       	mov	r25, r24
    2744:	80 2d       	mov	r24, r0
    2746:	82 2b       	or	r24, r18
    2748:	8c 93       	st	X, r24
	UCSRC=( UCSRC&0XCF)|((Config_Ptr->parity)<<4);
    274a:	a0 e4       	ldi	r26, 0x40	; 64
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e0 e4       	ldi	r30, 0x40	; 64
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	28 2f       	mov	r18, r24
    2756:	2f 7c       	andi	r18, 0xCF	; 207
    2758:	eb 81       	ldd	r30, Y+3	; 0x03
    275a:	fc 81       	ldd	r31, Y+4	; 0x04
    275c:	85 81       	ldd	r24, Z+5	; 0x05
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	82 95       	swap	r24
    2764:	92 95       	swap	r25
    2766:	90 7f       	andi	r25, 0xF0	; 240
    2768:	98 27       	eor	r25, r24
    276a:	80 7f       	andi	r24, 0xF0	; 240
    276c:	98 27       	eor	r25, r24
    276e:	82 2b       	or	r24, r18
    2770:	8c 93       	st	X, r24

	UCSRC=( UCSRC&0XF7)|((Config_Ptr->stopBit)<<3);
    2772:	a0 e4       	ldi	r26, 0x40	; 64
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	e0 e4       	ldi	r30, 0x40	; 64
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	28 2f       	mov	r18, r24
    277e:	27 7f       	andi	r18, 0xF7	; 247
    2780:	eb 81       	ldd	r30, Y+3	; 0x03
    2782:	fc 81       	ldd	r31, Y+4	; 0x04
    2784:	86 81       	ldd	r24, Z+6	; 0x06
    2786:	88 2f       	mov	r24, r24
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	82 2b       	or	r24, r18
    2798:	8c 93       	st	X, r24
	UCSRC=( UCSRC&0XF9)|((Config_Ptr->charSize)<<1);
    279a:	a0 e4       	ldi	r26, 0x40	; 64
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e0 e4       	ldi	r30, 0x40	; 64
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	28 2f       	mov	r18, r24
    27a6:	29 7f       	andi	r18, 0xF9	; 249
    27a8:	eb 81       	ldd	r30, Y+3	; 0x03
    27aa:	fc 81       	ldd	r31, Y+4	; 0x04
    27ac:	87 81       	ldd	r24, Z+7	; 0x07
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	82 2b       	or	r24, r18
    27b8:	8c 93       	st	X, r24
	UCSRC=( UCSRC&0XFE)|((Config_Ptr->mode));
    27ba:	a0 e4       	ldi	r26, 0x40	; 64
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e0 e4       	ldi	r30, 0x40	; 64
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	98 2f       	mov	r25, r24
    27c6:	9e 7f       	andi	r25, 0xFE	; 254
    27c8:	eb 81       	ldd	r30, Y+3	; 0x03
    27ca:	fc 81       	ldd	r31, Y+4	; 0x04
    27cc:	80 81       	ld	r24, Z
    27ce:	89 2b       	or	r24, r25
    27d0:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    27d2:	eb 81       	ldd	r30, Y+3	; 0x03
    27d4:	fc 81       	ldd	r31, Y+4	; 0x04
    27d6:	81 81       	ldd	r24, Z+1	; 0x01
    27d8:	92 81       	ldd	r25, Z+2	; 0x02
    27da:	a3 81       	ldd	r26, Z+3	; 0x03
    27dc:	b4 81       	ldd	r27, Z+4	; 0x04
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	aa 1f       	adc	r26, r26
    27e4:	bb 1f       	adc	r27, r27
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	aa 1f       	adc	r26, r26
    27ec:	bb 1f       	adc	r27, r27
    27ee:	88 0f       	add	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	aa 1f       	adc	r26, r26
    27f4:	bb 1f       	adc	r27, r27
    27f6:	9c 01       	movw	r18, r24
    27f8:	ad 01       	movw	r20, r26
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	92 e1       	ldi	r25, 0x12	; 18
    27fe:	aa e7       	ldi	r26, 0x7A	; 122
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 ae 14 	call	0x295c	; 0x295c <__udivmodsi4>
    280a:	da 01       	movw	r26, r20
    280c:	c9 01       	movw	r24, r18
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2814:	e0 e4       	ldi	r30, 0x40	; 64
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	89 2f       	mov	r24, r25
    281e:	99 27       	eor	r25, r25
    2820:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2822:	e9 e2       	ldi	r30, 0x29	; 41
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	80 83       	st	Z, r24
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	0f 92       	push	r0
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2844:	eb e2       	ldi	r30, 0x2B	; 43
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	80 72       	andi	r24, 0x20	; 32
    2850:	90 70       	andi	r25, 0x00	; 0
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	b9 f3       	breq	.-18     	; 0x2844 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2856:	ec e2       	ldi	r30, 0x2C	; 44
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	80 83       	st	Z, r24

}
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    286e:	eb e2       	ldi	r30, 0x2B	; 43
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	88 23       	and	r24, r24
    2876:	dc f7       	brge	.-10     	; 0x286e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2878:	ec e2       	ldi	r30, 0x2C	; 44
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
}
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <UART_sendString+0x6>
    288a:	0f 92       	push	r0
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	9b 83       	std	Y+3, r25	; 0x03
    2892:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2894:	19 82       	std	Y+1, r1	; 0x01
    2896:	0e c0       	rjmp	.+28     	; 0x28b4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	fc 01       	movw	r30, r24
    28a4:	e2 0f       	add	r30, r18
    28a6:	f3 1f       	adc	r31, r19
    28a8:	80 81       	ld	r24, Z
    28aa:	0e 94 1c 14 	call	0x2838	; 0x2838 <UART_sendByte>
		i++;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	fc 01       	movw	r30, r24
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	80 81       	ld	r24, Z
    28c6:	88 23       	and	r24, r24
    28c8:	39 f7       	brne	.-50     	; 0x2898 <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}


}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <UART_receiveString+0xa>
    28e0:	0f 92       	push	r0
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	9b 83       	std	Y+3, r25	; 0x03
    28e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28ea:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	9b 81       	ldd	r25, Y+3	; 0x03
    28f6:	8c 01       	movw	r16, r24
    28f8:	02 0f       	add	r16, r18
    28fa:	13 1f       	adc	r17, r19
    28fc:	0e 94 33 14 	call	0x2866	; 0x2866 <UART_recieveByte>
    2900:	f8 01       	movw	r30, r16
    2902:	80 83       	st	Z, r24
    2904:	0f c0       	rjmp	.+30     	; 0x2924 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	8f 5f       	subi	r24, 0xFF	; 255
    290a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	9b 81       	ldd	r25, Y+3	; 0x03
    2916:	8c 01       	movw	r16, r24
    2918:	02 0f       	add	r16, r18
    291a:	13 1f       	adc	r17, r19
    291c:	0e 94 33 14 	call	0x2866	; 0x2866 <UART_recieveByte>
    2920:	f8 01       	movw	r30, r16
    2922:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	9b 81       	ldd	r25, Y+3	; 0x03
    292e:	fc 01       	movw	r30, r24
    2930:	e2 0f       	add	r30, r18
    2932:	f3 1f       	adc	r31, r19
    2934:	80 81       	ld	r24, Z
    2936:	83 32       	cpi	r24, 0x23	; 35
    2938:	31 f7       	brne	.-52     	; 0x2906 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	9b 81       	ldd	r25, Y+3	; 0x03
    2944:	fc 01       	movw	r30, r24
    2946:	e2 0f       	add	r30, r18
    2948:	f3 1f       	adc	r31, r19
    294a:	10 82       	st	Z, r1
}
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	08 95       	ret

0000295c <__udivmodsi4>:
    295c:	a1 e2       	ldi	r26, 0x21	; 33
    295e:	1a 2e       	mov	r1, r26
    2960:	aa 1b       	sub	r26, r26
    2962:	bb 1b       	sub	r27, r27
    2964:	fd 01       	movw	r30, r26
    2966:	0d c0       	rjmp	.+26     	; 0x2982 <__udivmodsi4_ep>

00002968 <__udivmodsi4_loop>:
    2968:	aa 1f       	adc	r26, r26
    296a:	bb 1f       	adc	r27, r27
    296c:	ee 1f       	adc	r30, r30
    296e:	ff 1f       	adc	r31, r31
    2970:	a2 17       	cp	r26, r18
    2972:	b3 07       	cpc	r27, r19
    2974:	e4 07       	cpc	r30, r20
    2976:	f5 07       	cpc	r31, r21
    2978:	20 f0       	brcs	.+8      	; 0x2982 <__udivmodsi4_ep>
    297a:	a2 1b       	sub	r26, r18
    297c:	b3 0b       	sbc	r27, r19
    297e:	e4 0b       	sbc	r30, r20
    2980:	f5 0b       	sbc	r31, r21

00002982 <__udivmodsi4_ep>:
    2982:	66 1f       	adc	r22, r22
    2984:	77 1f       	adc	r23, r23
    2986:	88 1f       	adc	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	1a 94       	dec	r1
    298c:	69 f7       	brne	.-38     	; 0x2968 <__udivmodsi4_loop>
    298e:	60 95       	com	r22
    2990:	70 95       	com	r23
    2992:	80 95       	com	r24
    2994:	90 95       	com	r25
    2996:	9b 01       	movw	r18, r22
    2998:	ac 01       	movw	r20, r24
    299a:	bd 01       	movw	r22, r26
    299c:	cf 01       	movw	r24, r30
    299e:	08 95       	ret

000029a0 <__prologue_saves__>:
    29a0:	2f 92       	push	r2
    29a2:	3f 92       	push	r3
    29a4:	4f 92       	push	r4
    29a6:	5f 92       	push	r5
    29a8:	6f 92       	push	r6
    29aa:	7f 92       	push	r7
    29ac:	8f 92       	push	r8
    29ae:	9f 92       	push	r9
    29b0:	af 92       	push	r10
    29b2:	bf 92       	push	r11
    29b4:	cf 92       	push	r12
    29b6:	df 92       	push	r13
    29b8:	ef 92       	push	r14
    29ba:	ff 92       	push	r15
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	ca 1b       	sub	r28, r26
    29ca:	db 0b       	sbc	r29, r27
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	09 94       	ijmp

000029d8 <__epilogue_restores__>:
    29d8:	2a 88       	ldd	r2, Y+18	; 0x12
    29da:	39 88       	ldd	r3, Y+17	; 0x11
    29dc:	48 88       	ldd	r4, Y+16	; 0x10
    29de:	5f 84       	ldd	r5, Y+15	; 0x0f
    29e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ea:	b9 84       	ldd	r11, Y+9	; 0x09
    29ec:	c8 84       	ldd	r12, Y+8	; 0x08
    29ee:	df 80       	ldd	r13, Y+7	; 0x07
    29f0:	ee 80       	ldd	r14, Y+6	; 0x06
    29f2:	fd 80       	ldd	r15, Y+5	; 0x05
    29f4:	0c 81       	ldd	r16, Y+4	; 0x04
    29f6:	1b 81       	ldd	r17, Y+3	; 0x03
    29f8:	aa 81       	ldd	r26, Y+2	; 0x02
    29fa:	b9 81       	ldd	r27, Y+1	; 0x01
    29fc:	ce 0f       	add	r28, r30
    29fe:	d1 1d       	adc	r29, r1
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	ed 01       	movw	r28, r26
    2a0c:	08 95       	ret

00002a0e <_exit>:
    2a0e:	f8 94       	cli

00002a10 <__stop_program>:
    2a10:	ff cf       	rjmp	.-2      	; 0x2a10 <__stop_program>
