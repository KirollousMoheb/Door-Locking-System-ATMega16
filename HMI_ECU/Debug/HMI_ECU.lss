
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003310  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00003310  000033a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080016c  0080016c  000034b0  2**0
                  ALLOC
  3 .stab         00002eec  00000000  00000000  000034b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015d1  00000000  00000000  0000639c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000796d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009866  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a751  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b500  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__vector_3>
      10:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 46 14 	jmp	0x288c	; 0x288c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__vector_8>
      24:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 86 19 	jmp	0x330c	; 0x330c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e5       	ldi	r26, 0x51	; 81
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 19 	jmp	0x322c	; 0x322c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 19 	jmp	0x322c	; 0x322c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e5       	ldi	r24, 0x51	; 81
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 19 	jmp	0x324c	; 0x324c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 16 19 	jmp	0x322c	; 0x322c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 16 19 	jmp	0x322c	; 0x322c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 16 19 	jmp	0x322c	; 0x322c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 36 19 	jmp	0x326c	; 0x326c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

#include "HMI_ECU.h"



int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global Interrupts*/

	SREG |= (1<<7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
	/*Initialize the LCD*/

	LCD_init();
     b5c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_init>
	/*Initialize the UART*/

	UART_init(&uart_config);
     b60:	84 e6       	ldi	r24, 0x64	; 100
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_init>

	while(1){
		if(menu_selector==0){
     b68:	80 91 6d 01 	lds	r24, 0x016D
     b6c:	88 23       	and	r24, r24
     b6e:	11 f4       	brne	.+4      	; 0xb74 <main+0x2e>
			HMI_createPasswordMenu();
     b70:	0e 94 98 07 	call	0xf30	; 0xf30 <HMI_createPasswordMenu>
		}
		if(menu_selector==1){
     b74:	80 91 6d 01 	lds	r24, 0x016D
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	11 f4       	brne	.+4      	; 0xb80 <main+0x3a>
			HMI_optionsMenu();
     b7c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <HMI_optionsMenu>
		}
		if(menu_selector==2){
     b80:	80 91 6d 01 	lds	r24, 0x016D
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	81 f7       	brne	.-32     	; 0xb68 <main+0x22>
			HMI_doorStatesDisplay();
     b88:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <HMI_doorStatesDisplay>
     b8c:	ed cf       	rjmp	.-38     	; 0xb68 <main+0x22>

00000b8e <HMI_sendState>:
 *
 * [Arguments]:              uint8 state
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_sendState(uint8 state){
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	0f 92       	push	r0
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	89 83       	std	Y+1, r24	; 0x01
	/*Send Ready for CONTROL ECU*/
	UART_sendByte(READY);
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0e 94 56 18 	call	0x30ac	; 0x30ac <UART_sendByte>
	/*Wait for CONTROL ECU to send back Ready state*/
	while(UART_recieveByte()!=READY);
     ba0:	0e 94 6d 18 	call	0x30da	; 0x30da <UART_recieveByte>
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <HMI_sendState+0x12>
	/*Send the required state to CONTROL ECU*/
	UART_sendByte(state);
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	0e 94 56 18 	call	0x30ac	; 0x30ac <UART_sendByte>
	/*Wait for CONTROL ECU to send that it received the state*/
	while(UART_recieveByte()!=DONE);
     bae:	0e 94 6d 18 	call	0x30da	; 0x30da <UART_recieveByte>
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	e1 f7       	brne	.-8      	; 0xbae <HMI_sendState+0x20>
}
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <HMI_receiveState>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
uint8 HMI_receiveState(void){
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	/*Wait until CONTROL ECU sends that it's ready*/
	while(UART_recieveByte() != READY){};
     bc6:	0e 94 6d 18 	call	0x30da	; 0x30da <UART_recieveByte>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <HMI_receiveState+0x8>
	/*Send Ready to CONTROL ECU to make it send the state*/
	UART_sendByte(READY);
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	0e 94 56 18 	call	0x30ac	; 0x30ac <UART_sendByte>
	/*Receive the sent state in a global variable called state*/
	state=UART_recieveByte();
     bd4:	0e 94 6d 18 	call	0x30da	; 0x30da <UART_recieveByte>
     bd8:	80 93 83 01 	sts	0x0183, r24
	/*Tell CONTROL ECU that the state it sent is received*/
	UART_sendByte(DONE);
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	0e 94 56 18 	call	0x30ac	; 0x30ac <UART_sendByte>
	return state;
     be2:	80 91 83 01 	lds	r24, 0x0183
}
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <HMI_sendPassword>:
 *
 * [Arguments]:              An array to be sent using Uart
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_sendPassword(uint8 arr[]){
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <HMI_sendPassword+0x6>
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	9b 83       	std	Y+3, r25	; 0x03
     bfa:	8a 83       	std	Y+2, r24	; 0x02
	/*Send the password saved in an array to the CONTROL ECU through UART*/
	uint8 i=0;
     bfc:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<PASSWORD_SIZE;i++){
     bfe:	19 82       	std	Y+1, r1	; 0x01
     c00:	0e c0       	rjmp	.+28     	; 0xc1e <HMI_sendPassword+0x32>
		UART_sendByte(arr[i]);
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	9b 81       	ldd	r25, Y+3	; 0x03
     c0c:	fc 01       	movw	r30, r24
     c0e:	e2 0f       	add	r30, r18
     c10:	f3 1f       	adc	r31, r19
     c12:	80 81       	ld	r24, Z
     c14:	0e 94 56 18 	call	0x30ac	; 0x30ac <UART_sendByte>
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_sendPassword(uint8 arr[]){
	/*Send the password saved in an array to the CONTROL ECU through UART*/
	uint8 i=0;
	for(i=0;i<PASSWORD_SIZE;i++){
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	8f 5f       	subi	r24, 0xFF	; 255
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	85 30       	cpi	r24, 0x05	; 5
     c22:	78 f3       	brcs	.-34     	; 0xc02 <HMI_sendPassword+0x16>
		UART_sendByte(arr[i]);
	}

}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	cf 91       	pop	r28
     c2c:	df 91       	pop	r29
     c2e:	08 95       	ret

00000c30 <HMI_passwordMismatchDisplay>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_passwordMismatchDisplay(void){
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	2e 97       	sbiw	r28, 0x0e	; 14
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     c44:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Password Doesn't match");
     c48:	20 e6       	ldi	r18, 0x60	; 96
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	a9 01       	movw	r20, r18
     c52:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a6 e9       	ldi	r26, 0x96	; 150
     c5c:	b3 e4       	ldi	r27, 0x43	; 67
     c5e:	8b 87       	std	Y+11, r24	; 0x0b
     c60:	9c 87       	std	Y+12, r25	; 0x0c
     c62:	ad 87       	std	Y+13, r26	; 0x0d
     c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c66:	6b 85       	ldd	r22, Y+11	; 0x0b
     c68:	7c 85       	ldd	r23, Y+12	; 0x0c
     c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	4a ef       	ldi	r20, 0xFA	; 250
     c74:	54 e4       	ldi	r21, 0x44	; 68
     c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	8f 83       	std	Y+7, r24	; 0x07
     c80:	98 87       	std	Y+8, r25	; 0x08
     c82:	a9 87       	std	Y+9, r26	; 0x09
     c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c86:	6f 81       	ldd	r22, Y+7	; 0x07
     c88:	78 85       	ldd	r23, Y+8	; 0x08
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e8       	ldi	r20, 0x80	; 128
     c94:	5f e3       	ldi	r21, 0x3F	; 63
     c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9a:	88 23       	and	r24, r24
     c9c:	2c f4       	brge	.+10     	; 0xca8 <HMI_passwordMismatchDisplay+0x78>
		__ticks = 1;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	3f c0       	rjmp	.+126    	; 0xd26 <HMI_passwordMismatchDisplay+0xf6>
	else if (__tmp > 65535)
     ca8:	6f 81       	ldd	r22, Y+7	; 0x07
     caa:	78 85       	ldd	r23, Y+8	; 0x08
     cac:	89 85       	ldd	r24, Y+9	; 0x09
     cae:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	3f ef       	ldi	r19, 0xFF	; 255
     cb4:	4f e7       	ldi	r20, 0x7F	; 127
     cb6:	57 e4       	ldi	r21, 0x47	; 71
     cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	4c f5       	brge	.+82     	; 0xd12 <HMI_passwordMismatchDisplay+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e2       	ldi	r20, 0x20	; 32
     cce:	51 e4       	ldi	r21, 0x41	; 65
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	9e 83       	std	Y+6, r25	; 0x06
     ce6:	8d 83       	std	Y+5, r24	; 0x05
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <HMI_passwordMismatchDisplay+0xd8>
     cea:	88 ec       	ldi	r24, 0xC8	; 200
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9c 83       	std	Y+4, r25	; 0x04
     cf0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <HMI_passwordMismatchDisplay+0xc6>
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	9e 83       	std	Y+6, r25	; 0x06
     d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	69 f7       	brne	.-38     	; 0xcea <HMI_passwordMismatchDisplay+0xba>
     d10:	14 c0       	rjmp	.+40     	; 0xd3a <HMI_passwordMismatchDisplay+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d12:	6f 81       	ldd	r22, Y+7	; 0x07
     d14:	78 85       	ldd	r23, Y+8	; 0x08
     d16:	89 85       	ldd	r24, Y+9	; 0x09
     d18:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	8d 83       	std	Y+5, r24	; 0x05
     d26:	8d 81       	ldd	r24, Y+5	; 0x05
     d28:	9e 81       	ldd	r25, Y+6	; 0x06
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <HMI_passwordMismatchDisplay+0x102>
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
}
     d3a:	2e 96       	adiw	r28, 0x0e	; 14
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <HMI_getPassword>:
 *
 * [Arguments]:              An array where password will be saved
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_getPassword(uint8 arr[]){
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	61 97       	sbiw	r28, 0x11	; 17
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	99 8b       	std	Y+17, r25	; 0x11
     d62:	88 8b       	std	Y+16, r24	; 0x10
	uint8 count=0;
     d64:	1f 86       	std	Y+15, r1	; 0x0f
	g_key_pressed=KEYPAD_getPressedKey();
     d66:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <KEYPAD_getPressedKey>
     d6a:	80 93 84 01 	sts	0x0184, r24
     d6e:	8e c0       	rjmp	.+284    	; 0xe8c <HMI_getPassword+0x140>
	/*Take password until equal key is pressed*/
	while(g_key_pressed!='='){

		g_key_pressed=KEYPAD_getPressedKey();
     d70:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <KEYPAD_getPressedKey>
     d74:	80 93 84 01 	sts	0x0184, r24
		/*Don't save any character unless it's between 0 and 9*/
		if(g_key_pressed>=0&&g_key_pressed<=9){
     d78:	80 91 84 01 	lds	r24, 0x0184
     d7c:	8a 30       	cpi	r24, 0x0A	; 10
     d7e:	a0 f4       	brcc	.+40     	; 0xda8 <HMI_getPassword+0x5c>
			if(count<PASSWORD_SIZE){
     d80:	8f 85       	ldd	r24, Y+15	; 0x0f
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	88 f4       	brcc	.+34     	; 0xda8 <HMI_getPassword+0x5c>
				arr[count]=g_key_pressed;
     d86:	8f 85       	ldd	r24, Y+15	; 0x0f
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	88 89       	ldd	r24, Y+16	; 0x10
     d8e:	99 89       	ldd	r25, Y+17	; 0x11
     d90:	fc 01       	movw	r30, r24
     d92:	e2 0f       	add	r30, r18
     d94:	f3 1f       	adc	r31, r19
     d96:	80 91 84 01 	lds	r24, 0x0184
     d9a:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
     d9c:	8a e2       	ldi	r24, 0x2A	; 42
     d9e:	0e 94 07 11 	call	0x220e	; 0x220e <LCD_displayCharacter>
				count++;
     da2:	8f 85       	ldd	r24, Y+15	; 0x0f
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	8f 87       	std	Y+15, r24	; 0x0f
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	af ea       	ldi	r26, 0xAF	; 175
     dae:	b3 e4       	ldi	r27, 0x43	; 67
     db0:	8b 87       	std	Y+11, r24	; 0x0b
     db2:	9c 87       	std	Y+12, r25	; 0x0c
     db4:	ad 87       	std	Y+13, r26	; 0x0d
     db6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dba:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	4a ef       	ldi	r20, 0xFA	; 250
     dc6:	54 e4       	ldi	r21, 0x44	; 68
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	8f 83       	std	Y+7, r24	; 0x07
     dd2:	98 87       	std	Y+8, r25	; 0x08
     dd4:	a9 87       	std	Y+9, r26	; 0x09
     dd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd8:	6f 81       	ldd	r22, Y+7	; 0x07
     dda:	78 85       	ldd	r23, Y+8	; 0x08
     ddc:	89 85       	ldd	r24, Y+9	; 0x09
     dde:	9a 85       	ldd	r25, Y+10	; 0x0a
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e8       	ldi	r20, 0x80	; 128
     de6:	5f e3       	ldi	r21, 0x3F	; 63
     de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dec:	88 23       	and	r24, r24
     dee:	2c f4       	brge	.+10     	; 0xdfa <HMI_getPassword+0xae>
		__ticks = 1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	3f c0       	rjmp	.+126    	; 0xe78 <HMI_getPassword+0x12c>
	else if (__tmp > 65535)
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	3f ef       	ldi	r19, 0xFF	; 255
     e06:	4f e7       	ldi	r20, 0x7F	; 127
     e08:	57 e4       	ldi	r21, 0x47	; 71
     e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0e:	18 16       	cp	r1, r24
     e10:	4c f5       	brge	.+82     	; 0xe64 <HMI_getPassword+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e12:	6b 85       	ldd	r22, Y+11	; 0x0b
     e14:	7c 85       	ldd	r23, Y+12	; 0x0c
     e16:	8d 85       	ldd	r24, Y+13	; 0x0d
     e18:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	51 e4       	ldi	r21, 0x41	; 65
     e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
     e3a:	0f c0       	rjmp	.+30     	; 0xe5a <HMI_getPassword+0x10e>
     e3c:	88 ec       	ldi	r24, 0xC8	; 200
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	9c 83       	std	Y+4, r25	; 0x04
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <HMI_getPassword+0xfc>
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	69 f7       	brne	.-38     	; 0xe3c <HMI_getPassword+0xf0>
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <HMI_getPassword+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e64:	6f 81       	ldd	r22, Y+7	; 0x07
     e66:	78 85       	ldd	r23, Y+8	; 0x08
     e68:	89 85       	ldd	r24, Y+9	; 0x09
     e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	9e 83       	std	Y+6, r25	; 0x06
     e76:	8d 83       	std	Y+5, r24	; 0x05
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <HMI_getPassword+0x138>
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
 ***************************************************************************************************/
void HMI_getPassword(uint8 arr[]){
	uint8 count=0;
	g_key_pressed=KEYPAD_getPressedKey();
	/*Take password until equal key is pressed*/
	while(g_key_pressed!='='){
     e8c:	80 91 84 01 	lds	r24, 0x0184
     e90:	8d 33       	cpi	r24, 0x3D	; 61
     e92:	09 f0       	breq	.+2      	; 0xe96 <HMI_getPassword+0x14a>
     e94:	6d cf       	rjmp	.-294    	; 0xd70 <HMI_getPassword+0x24>
			}
		}

		_delay_ms(350);
	}
}
     e96:	61 96       	adiw	r28, 0x11	; 17
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <HMI_createPassword>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_createPassword(void){
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     eb0:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Please Enter Pass:");
     eb4:	27 e7       	ldi	r18, 0x77	; 119
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_moveCursor>
	/*Get Password from the use and save it in g_password_arr array*/
	HMI_getPassword(g_password_arr);
     eca:	89 e7       	ldi	r24, 0x79	; 121
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 a6 06 	call	0xd4c	; 0xd4c <HMI_getPassword>
	/*Send "SEND_PASSWORD" state to CONTROL ECU to receive  the password and save it in an array in the CONTROL ECU*/
	HMI_sendState(SEND_PASSWORD);
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <HMI_sendState>
	/*Send the password to the CONTROL ECU by UART*/
	HMI_sendPassword(g_password_arr);
     ed8:	89 e7       	ldi	r24, 0x79	; 121
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 f6 05 	call	0xbec	; 0xbec <HMI_sendPassword>
	create_confirm_flag=1;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 6e 01 	sts	0x016E, r24
}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <HMI_confirmPassword>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_confirmPassword(void){
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     ef4:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Please re-enter Password:");
     ef8:	2a e8       	ldi	r18, 0x8A	; 138
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	a9 01       	movw	r20, r18
     f02:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_moveCursor>
	HMI_getPassword(g_password_confirm_arr);
     f0e:	8e e7       	ldi	r24, 0x7E	; 126
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	0e 94 a6 06 	call	0xd4c	; 0xd4c <HMI_getPassword>
	/*Send "SEND_CONFIRMATION_PASSWORD" state to CONTROL ECU to receive the
	 * confirmation password and save it in an array in the CONTROL ECU*/
	HMI_sendState(SEND_CONFIRMATION_PASSWORD);
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	0e 94 c7 05 	call	0xb8e	; 0xb8e <HMI_sendState>
	/*Send the confirmation password to the CONTROL ECU by UART*/
	HMI_sendPassword(g_password_confirm_arr);
     f1c:	8e e7       	ldi	r24, 0x7E	; 126
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 f6 05 	call	0xbec	; 0xbec <HMI_sendPassword>
	create_confirm_flag=2;
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	80 93 6e 01 	sts	0x016E, r24
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <HMI_createPasswordMenu>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_createPasswordMenu(void){
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	6e 97       	sbiw	r28, 0x1e	; 30
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
	if(create_confirm_flag==0){
     f44:	80 91 6e 01 	lds	r24, 0x016E
     f48:	88 23       	and	r24, r24
     f4a:	11 f4       	brne	.+4      	; 0xf50 <HMI_createPasswordMenu+0x20>
		HMI_createPassword();
     f4c:	0e 94 54 07 	call	0xea8	; 0xea8 <HMI_createPassword>
	}
	if(create_confirm_flag==1){
     f50:	80 91 6e 01 	lds	r24, 0x016E
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	11 f4       	brne	.+4      	; 0xf5c <HMI_createPasswordMenu+0x2c>
		HMI_confirmPassword();
     f58:	0e 94 76 07 	call	0xeec	; 0xeec <HMI_confirmPassword>
	}
	/*If create_confirm_flag==2
	 * This means we took the password and it's confirmation from the user*/
	if(create_confirm_flag==2){
     f5c:	80 91 6e 01 	lds	r24, 0x016E
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	09 f0       	breq	.+2      	; 0xf66 <HMI_createPasswordMenu+0x36>
     f64:	0a c1       	rjmp	.+532    	; 0x117a <HMI_createPasswordMenu+0x24a>
		/*We check the state sent by the CONTROL ECU
		 * Telling us if the Password are matched or not*/
		switch(HMI_receiveState()){
     f66:	0e 94 df 05 	call	0xbbe	; 0xbbe <HMI_receiveState>
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3e 8f       	std	Y+30, r19	; 0x1e
     f70:	2d 8f       	std	Y+29, r18	; 0x1d
     f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f74:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f76:	86 30       	cpi	r24, 0x06	; 6
     f78:	91 05       	cpc	r25, r1
     f7a:	39 f0       	breq	.+14     	; 0xf8a <HMI_createPasswordMenu+0x5a>
     f7c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     f7e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     f80:	27 30       	cpi	r18, 0x07	; 7
     f82:	31 05       	cpc	r19, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <HMI_createPasswordMenu+0x58>
     f86:	83 c0       	rjmp	.+262    	; 0x108e <HMI_createPasswordMenu+0x15e>
     f88:	f8 c0       	rjmp	.+496    	; 0x117a <HMI_createPasswordMenu+0x24a>
			/*If it's matched:
			 *1)make menu_selector=1 to go to the options menu
			 *2)Make create_confirm_flag=3 to not enter this part of the code  again
			 *3) Display "PASSWORD IS MATCHED AND SAVED"
			 * */
			menu_selector=1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 6d 01 	sts	0x016D, r24
			create_confirm_flag=3;
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	80 93 6e 01 	sts	0x016E, r24
			LCD_clearScreen();
     f96:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"PASSWORD IS MATCHED AND SAVED");
     f9a:	24 ea       	ldi	r18, 0xA4	; 164
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	af ea       	ldi	r26, 0xAF	; 175
     fae:	b3 e4       	ldi	r27, 0x43	; 67
     fb0:	89 8f       	std	Y+25, r24	; 0x19
     fb2:	9a 8f       	std	Y+26, r25	; 0x1a
     fb4:	ab 8f       	std	Y+27, r26	; 0x1b
     fb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb8:	69 8d       	ldd	r22, Y+25	; 0x19
     fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	4a ef       	ldi	r20, 0xFA	; 250
     fc6:	54 e4       	ldi	r21, 0x44	; 68
     fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	8d 8b       	std	Y+21, r24	; 0x15
     fd2:	9e 8b       	std	Y+22, r25	; 0x16
     fd4:	af 8b       	std	Y+23, r26	; 0x17
     fd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fd8:	6d 89       	ldd	r22, Y+21	; 0x15
     fda:	7e 89       	ldd	r23, Y+22	; 0x16
     fdc:	8f 89       	ldd	r24, Y+23	; 0x17
     fde:	98 8d       	ldd	r25, Y+24	; 0x18
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	5f e3       	ldi	r21, 0x3F	; 63
     fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fec:	88 23       	and	r24, r24
     fee:	2c f4       	brge	.+10     	; 0xffa <HMI_createPasswordMenu+0xca>
		__ticks = 1;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9c 8b       	std	Y+20, r25	; 0x14
     ff6:	8b 8b       	std	Y+19, r24	; 0x13
     ff8:	3f c0       	rjmp	.+126    	; 0x1078 <HMI_createPasswordMenu+0x148>
	else if (__tmp > 65535)
     ffa:	6d 89       	ldd	r22, Y+21	; 0x15
     ffc:	7e 89       	ldd	r23, Y+22	; 0x16
     ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    1000:	98 8d       	ldd	r25, Y+24	; 0x18
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	3f ef       	ldi	r19, 0xFF	; 255
    1006:	4f e7       	ldi	r20, 0x7F	; 127
    1008:	57 e4       	ldi	r21, 0x47	; 71
    100a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100e:	18 16       	cp	r1, r24
    1010:	4c f5       	brge	.+82     	; 0x1064 <HMI_createPasswordMenu+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1012:	69 8d       	ldd	r22, Y+25	; 0x19
    1014:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1016:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1018:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e2       	ldi	r20, 0x20	; 32
    1020:	51 e4       	ldi	r21, 0x41	; 65
    1022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	bc 01       	movw	r22, r24
    102c:	cd 01       	movw	r24, r26
    102e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
    103a:	0f c0       	rjmp	.+30     	; 0x105a <HMI_createPasswordMenu+0x12a>
    103c:	88 ec       	ldi	r24, 0xC8	; 200
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	9a 8b       	std	Y+18, r25	; 0x12
    1042:	89 8b       	std	Y+17, r24	; 0x11
    1044:	89 89       	ldd	r24, Y+17	; 0x11
    1046:	9a 89       	ldd	r25, Y+18	; 0x12
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <HMI_createPasswordMenu+0x118>
    104c:	9a 8b       	std	Y+18, r25	; 0x12
    104e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1050:	8b 89       	ldd	r24, Y+19	; 0x13
    1052:	9c 89       	ldd	r25, Y+20	; 0x14
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	9c 8b       	std	Y+20, r25	; 0x14
    1058:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105a:	8b 89       	ldd	r24, Y+19	; 0x13
    105c:	9c 89       	ldd	r25, Y+20	; 0x14
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	69 f7       	brne	.-38     	; 0x103c <HMI_createPasswordMenu+0x10c>
    1062:	8b c0       	rjmp	.+278    	; 0x117a <HMI_createPasswordMenu+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1064:	6d 89       	ldd	r22, Y+21	; 0x15
    1066:	7e 89       	ldd	r23, Y+22	; 0x16
    1068:	8f 89       	ldd	r24, Y+23	; 0x17
    106a:	98 8d       	ldd	r25, Y+24	; 0x18
    106c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	9c 8b       	std	Y+20, r25	; 0x14
    1076:	8b 8b       	std	Y+19, r24	; 0x13
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	98 8b       	std	Y+16, r25	; 0x10
    107e:	8f 87       	std	Y+15, r24	; 0x0f
    1080:	8f 85       	ldd	r24, Y+15	; 0x0f
    1082:	98 89       	ldd	r25, Y+16	; 0x10
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <HMI_createPasswordMenu+0x154>
    1088:	98 8b       	std	Y+16, r25	; 0x10
    108a:	8f 87       	std	Y+15, r24	; 0x0f
    108c:	76 c0       	rjmp	.+236    	; 0x117a <HMI_createPasswordMenu+0x24a>
			_delay_ms(350);
			break;
		case NOT_MATCHED:
			/*If the passwords don't match display password mismatch for the user*/
			create_confirm_flag=0;
    108e:	10 92 6e 01 	sts	0x016E, r1
			HMI_passwordMismatchDisplay();
    1092:	0e 94 18 06 	call	0xc30	; 0xc30 <HMI_passwordMismatchDisplay>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	af ea       	ldi	r26, 0xAF	; 175
    109c:	b3 e4       	ldi	r27, 0x43	; 67
    109e:	8b 87       	std	Y+11, r24	; 0x0b
    10a0:	9c 87       	std	Y+12, r25	; 0x0c
    10a2:	ad 87       	std	Y+13, r26	; 0x0d
    10a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4a ef       	ldi	r20, 0xFA	; 250
    10b4:	54 e4       	ldi	r21, 0x44	; 68
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	8f 83       	std	Y+7, r24	; 0x07
    10c0:	98 87       	std	Y+8, r25	; 0x08
    10c2:	a9 87       	std	Y+9, r26	; 0x09
    10c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e8       	ldi	r20, 0x80	; 128
    10d4:	5f e3       	ldi	r21, 0x3F	; 63
    10d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10da:	88 23       	and	r24, r24
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <HMI_createPasswordMenu+0x1b8>
		__ticks = 1;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9e 83       	std	Y+6, r25	; 0x06
    10e4:	8d 83       	std	Y+5, r24	; 0x05
    10e6:	3f c0       	rjmp	.+126    	; 0x1166 <HMI_createPasswordMenu+0x236>
	else if (__tmp > 65535)
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	3f ef       	ldi	r19, 0xFF	; 255
    10f4:	4f e7       	ldi	r20, 0x7F	; 127
    10f6:	57 e4       	ldi	r21, 0x47	; 71
    10f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fc:	18 16       	cp	r1, r24
    10fe:	4c f5       	brge	.+82     	; 0x1152 <HMI_createPasswordMenu+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1100:	6b 85       	ldd	r22, Y+11	; 0x0b
    1102:	7c 85       	ldd	r23, Y+12	; 0x0c
    1104:	8d 85       	ldd	r24, Y+13	; 0x0d
    1106:	9e 85       	ldd	r25, Y+14	; 0x0e
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e2       	ldi	r20, 0x20	; 32
    110e:	51 e4       	ldi	r21, 0x41	; 65
    1110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <HMI_createPasswordMenu+0x218>
    112a:	88 ec       	ldi	r24, 0xC8	; 200
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	8b 83       	std	Y+3, r24	; 0x03
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <HMI_createPasswordMenu+0x206>
    113a:	9c 83       	std	Y+4, r25	; 0x04
    113c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113e:	8d 81       	ldd	r24, Y+5	; 0x05
    1140:	9e 81       	ldd	r25, Y+6	; 0x06
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	9e 83       	std	Y+6, r25	; 0x06
    1146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	69 f7       	brne	.-38     	; 0x112a <HMI_createPasswordMenu+0x1fa>
    1150:	14 c0       	rjmp	.+40     	; 0x117a <HMI_createPasswordMenu+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1152:	6f 81       	ldd	r22, Y+7	; 0x07
    1154:	78 85       	ldd	r23, Y+8	; 0x08
    1156:	89 85       	ldd	r24, Y+9	; 0x09
    1158:	9a 85       	ldd	r25, Y+10	; 0x0a
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <HMI_createPasswordMenu+0x242>
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(350);
		}
	}

}
    117a:	6e 96       	adiw	r28, 0x1e	; 30
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <HMI_alarmCallBack>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_alarmCallBack(void){
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	g_alarm_ticks++;
    1194:	80 91 71 01 	lds	r24, 0x0171
    1198:	90 91 72 01 	lds	r25, 0x0172
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	90 93 72 01 	sts	0x0172, r25
    11a2:	80 93 71 01 	sts	0x0171, r24
}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <HMI_alarmTrigger>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_alarmTrigger(void){
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	2e 97       	sbiw	r28, 0x0e	; 14
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
	 * HMI ECU then receives NOT MATCHED state
	 * It's called in this case
	 * */

	/*Sends "ALARM" state to the CONTROL ECU */
	HMI_sendState(ALARM);
    11c0:	89 e0       	ldi	r24, 0x09	; 9
    11c2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <HMI_sendState>
	/*Display "WRONG PASSWORD!!" to the user*/
	LCD_clearScreen();
    11c6:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"WRONG PASSWORD!!");
    11ca:	22 ec       	ldi	r18, 0xC2	; 194
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	a9 01       	movw	r20, r18
    11d4:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a6 e9       	ldi	r26, 0x96	; 150
    11de:	b3 e4       	ldi	r27, 0x43	; 67
    11e0:	8b 87       	std	Y+11, r24	; 0x0b
    11e2:	9c 87       	std	Y+12, r25	; 0x0c
    11e4:	ad 87       	std	Y+13, r26	; 0x0d
    11e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	8f 83       	std	Y+7, r24	; 0x07
    1202:	98 87       	std	Y+8, r25	; 0x08
    1204:	a9 87       	std	Y+9, r26	; 0x09
    1206:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1208:	6f 81       	ldd	r22, Y+7	; 0x07
    120a:	78 85       	ldd	r23, Y+8	; 0x08
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	5f e3       	ldi	r21, 0x3F	; 63
    1218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    121c:	88 23       	and	r24, r24
    121e:	2c f4       	brge	.+10     	; 0x122a <HMI_alarmTrigger+0x7e>
		__ticks = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <HMI_alarmTrigger+0xfc>
	else if (__tmp > 65535)
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	4c f5       	brge	.+82     	; 0x1294 <HMI_alarmTrigger+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	6b 85       	ldd	r22, Y+11	; 0x0b
    1244:	7c 85       	ldd	r23, Y+12	; 0x0c
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	51 e4       	ldi	r21, 0x41	; 65
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	0f c0       	rjmp	.+30     	; 0x128a <HMI_alarmTrigger+0xde>
    126c:	88 ec       	ldi	r24, 0xC8	; 200
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <HMI_alarmTrigger+0xcc>
    127c:	9c 83       	std	Y+4, r25	; 0x04
    127e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	9e 83       	std	Y+6, r25	; 0x06
    1288:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	69 f7       	brne	.-38     	; 0x126c <HMI_alarmTrigger+0xc0>
    1292:	14 c0       	rjmp	.+40     	; 0x12bc <HMI_alarmTrigger+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1294:	6f 81       	ldd	r22, Y+7	; 0x07
    1296:	78 85       	ldd	r23, Y+8	; 0x08
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <HMI_alarmTrigger+0x108>
    12b8:	9a 83       	std	Y+2, r25	; 0x02
    12ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_clearScreen();
    12bc:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
	/*Increment the number of wrong tries*/
	g_wrong_tries++;
    12c0:	80 91 6c 01 	lds	r24, 0x016C
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	80 93 6c 01 	sts	0x016C, r24
	/*If number of wrong tries reaches the maximum allowable numbers:
	 * 1)
	 * 2)
	 * 3)
	 * */
	if(g_wrong_tries==MAX_ERRORS){
    12ca:	80 91 6c 01 	lds	r24, 0x016C
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	89 f5       	brne	.+98     	; 0x1334 <HMI_alarmTrigger+0x188>
		g_alarm_ticks=0;
    12d2:	10 92 72 01 	sts	0x0172, r1
    12d6:	10 92 71 01 	sts	0x0171, r1
		g_wrong_tries=0;
    12da:	10 92 6c 01 	sts	0x016C, r1
		TIMER_setCallBack(HMI_alarmCallBack,TIMER0);
    12de:	86 ec       	ldi	r24, 0xC6	; 198
    12e0:	98 e0       	ldi	r25, 0x08	; 8
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <TIMER_setCallBack>
		TIMER_init(&timer_Config);
    12e8:	89 e5       	ldi	r24, 0x59	; 89
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 df 14 	call	0x29be	; 0x29be <TIMER_init>
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <HMI_alarmTrigger+0x154>
		while(g_alarm_ticks<=NUMBER_OF_OVERFLOWS_1_minute)
		{

			LCD_displayStringRowColumn(0,0,"ALERT!!!!");
    12f2:	23 ed       	ldi	r18, 0xD3	; 211
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
	if(g_wrong_tries==MAX_ERRORS){
		g_alarm_ticks=0;
		g_wrong_tries=0;
		TIMER_setCallBack(HMI_alarmCallBack,TIMER0);
		TIMER_init(&timer_Config);
		while(g_alarm_ticks<=NUMBER_OF_OVERFLOWS_1_minute)
    1300:	80 91 71 01 	lds	r24, 0x0171
    1304:	90 91 72 01 	lds	r25, 0x0172
    1308:	27 e0       	ldi	r18, 0x07	; 7
    130a:	88 32       	cpi	r24, 0x28	; 40
    130c:	92 07       	cpc	r25, r18
    130e:	88 f3       	brcs	.-30     	; 0x12f2 <HMI_alarmTrigger+0x146>
		{

			LCD_displayStringRowColumn(0,0,"ALERT!!!!");
		}
		if(g_alarm_ticks==NUMBER_OF_OVERFLOWS_1_minute){
    1310:	80 91 71 01 	lds	r24, 0x0171
    1314:	90 91 72 01 	lds	r25, 0x0172
    1318:	27 e0       	ldi	r18, 0x07	; 7
    131a:	87 32       	cpi	r24, 0x27	; 39
    131c:	92 07       	cpc	r25, r18
    131e:	51 f4       	brne	.+20     	; 0x1334 <HMI_alarmTrigger+0x188>
			menu_selector=1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	80 93 6d 01 	sts	0x016D, r24
			TIMER_deinit(TIMER0);
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <TIMER_deinit>
			g_alarm_ticks=0;
    132c:	10 92 72 01 	sts	0x0172, r1
    1330:	10 92 71 01 	sts	0x0171, r1
		}

	}
}
    1334:	2e 96       	adiw	r28, 0x0e	; 14
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <HMI_oldPasswordDisplay>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_oldPasswordDisplay(void){
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	/*This function is used when the user needs to open the door or change the password
	 * The user is prompted to enter the old password
	 * */
	LCD_clearScreen();
    134e:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Please Enter old Pass:");
    1352:	2d ed       	ldi	r18, 0xDD	; 221
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_moveCursor>
	/*Save the password in g_password_arr array*/
	HMI_getPassword(g_password_arr);
    1368:	89 e7       	ldi	r24, 0x79	; 121
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <HMI_getPassword>
	/*Send "CHECK" state to the CONTROL ECU*/
	HMI_sendState(CHECK);
    1370:	88 e0       	ldi	r24, 0x08	; 8
    1372:	0e 94 c7 05 	call	0xb8e	; 0xb8e <HMI_sendState>
	/*Sends the password to the CONTROL ECU to check if it matches the saved password in the EEPROM*/
	HMI_sendPassword(g_password_arr);
    1376:	89 e7       	ldi	r24, 0x79	; 121
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 f6 05 	call	0xbec	; 0xbec <HMI_sendPassword>

}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <Door_stateDisplayCallBack>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void Door_stateDisplayCallBack(void){
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    138c:	80 91 6f 01 	lds	r24, 0x016F
    1390:	90 91 70 01 	lds	r25, 0x0170
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	90 93 70 01 	sts	0x0170, r25
    139a:	80 93 6f 01 	sts	0x016F, r24
	if(g_ticks==NUMBER_OF_OVERFLOWS_33_seconds){
    139e:	80 91 6f 01 	lds	r24, 0x016F
    13a2:	90 91 70 01 	lds	r25, 0x0170
    13a6:	23 e0       	ldi	r18, 0x03	; 3
    13a8:	8d 3e       	cpi	r24, 0xED	; 237
    13aa:	92 07       	cpc	r25, r18
    13ac:	51 f4       	brne	.+20     	; 0x13c2 <Door_stateDisplayCallBack+0x3e>
		/*If we are done displaying the door's states and the door is stopped*/
		/*Go back to the option's menu using menu_selector=1*/
		menu_selector=1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	80 93 6d 01 	sts	0x016D, r24
		/*Stop the timer*/
		TIMER_deinit(TIMER0);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <TIMER_deinit>
		g_ticks=0;
    13ba:	10 92 70 01 	sts	0x0170, r1
    13be:	10 92 6f 01 	sts	0x016F, r1

	}

}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <HMI_optionsMenu>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_optionsMenu(void){
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <HMI_optionsMenu+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <HMI_optionsMenu+0x8>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <HMI_optionsMenu+0xa>
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    13d6:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"(+) Open Door");
    13da:	24 ef       	ldi	r18, 0xF4	; 244
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"(-) Change Password");
    13e8:	22 e0       	ldi	r18, 0x02	; 2
    13ea:	31 e0       	ldi	r19, 0x01	; 1
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	a9 01       	movw	r20, r18
    13f2:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
	switch(KEYPAD_getPressedKey()){
    13f6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <KEYPAD_getPressedKey>
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3e 83       	std	Y+6, r19	; 0x06
    1400:	2d 83       	std	Y+5, r18	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	8b 32       	cpi	r24, 0x2B	; 43
    1408:	91 05       	cpc	r25, r1
    140a:	31 f0       	breq	.+12     	; 0x1418 <HMI_optionsMenu+0x50>
    140c:	2d 81       	ldd	r18, Y+5	; 0x05
    140e:	3e 81       	ldd	r19, Y+6	; 0x06
    1410:	2d 32       	cpi	r18, 0x2D	; 45
    1412:	31 05       	cpc	r19, r1
    1414:	41 f1       	breq	.+80     	; 0x1466 <HMI_optionsMenu+0x9e>
    1416:	43 c0       	rjmp	.+134    	; 0x149e <HMI_optionsMenu+0xd6>

	case '+':
		HMI_oldPasswordDisplay();
    1418:	0e 94 a3 09 	call	0x1346	; 0x1346 <HMI_oldPasswordDisplay>
		switch(HMI_receiveState()){
    141c:	0e 94 df 05 	call	0xbbe	; 0xbbe <HMI_receiveState>
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3c 83       	std	Y+4, r19	; 0x04
    1426:	2b 83       	std	Y+3, r18	; 0x03
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	86 30       	cpi	r24, 0x06	; 6
    142e:	91 05       	cpc	r25, r1
    1430:	31 f0       	breq	.+12     	; 0x143e <HMI_optionsMenu+0x76>
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	27 30       	cpi	r18, 0x07	; 7
    1438:	31 05       	cpc	r19, r1
    143a:	91 f0       	breq	.+36     	; 0x1460 <HMI_optionsMenu+0x98>
    143c:	30 c0       	rjmp	.+96     	; 0x149e <HMI_optionsMenu+0xd6>
		case MATCHED:
			HMI_sendState(OPEN_DOOR);
    143e:	85 e0       	ldi	r24, 0x05	; 5
    1440:	0e 94 c7 05 	call	0xb8e	; 0xb8e <HMI_sendState>
			g_ticks=0;
    1444:	10 92 70 01 	sts	0x0170, r1
    1448:	10 92 6f 01 	sts	0x016F, r1
			g_wrong_tries=0;
    144c:	10 92 6c 01 	sts	0x016C, r1
			g_alarm_ticks=0;
    1450:	10 92 72 01 	sts	0x0172, r1
    1454:	10 92 71 01 	sts	0x0171, r1
			menu_selector=2;
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	80 93 6d 01 	sts	0x016D, r24
    145e:	1f c0       	rjmp	.+62     	; 0x149e <HMI_optionsMenu+0xd6>
			break;
		case NOT_MATCHED:
			HMI_alarmTrigger();
    1460:	0e 94 d6 08 	call	0x11ac	; 0x11ac <HMI_alarmTrigger>
    1464:	1c c0       	rjmp	.+56     	; 0x149e <HMI_optionsMenu+0xd6>
			break;
		}
		break;
		case '-':
			HMI_oldPasswordDisplay();
    1466:	0e 94 a3 09 	call	0x1346	; 0x1346 <HMI_oldPasswordDisplay>
			switch(HMI_receiveState()){
    146a:	0e 94 df 05 	call	0xbbe	; 0xbbe <HMI_receiveState>
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3a 83       	std	Y+2, r19	; 0x02
    1474:	29 83       	std	Y+1, r18	; 0x01
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	86 30       	cpi	r24, 0x06	; 6
    147c:	91 05       	cpc	r25, r1
    147e:	31 f0       	breq	.+12     	; 0x148c <HMI_optionsMenu+0xc4>
    1480:	29 81       	ldd	r18, Y+1	; 0x01
    1482:	3a 81       	ldd	r19, Y+2	; 0x02
    1484:	27 30       	cpi	r18, 0x07	; 7
    1486:	31 05       	cpc	r19, r1
    1488:	41 f0       	breq	.+16     	; 0x149a <HMI_optionsMenu+0xd2>
    148a:	09 c0       	rjmp	.+18     	; 0x149e <HMI_optionsMenu+0xd6>
			case MATCHED:
				menu_selector=0;
    148c:	10 92 6d 01 	sts	0x016D, r1
				create_confirm_flag=0;
    1490:	10 92 6e 01 	sts	0x016E, r1
				g_wrong_tries=0;
    1494:	10 92 6c 01 	sts	0x016C, r1
    1498:	02 c0       	rjmp	.+4      	; 0x149e <HMI_optionsMenu+0xd6>
				break;
			case NOT_MATCHED:
				HMI_alarmTrigger();
    149a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <HMI_alarmTrigger>

			break;
	}


}
    149e:	26 96       	adiw	r28, 0x06	; 6
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <HMI_doorStatesDisplay>:
 *
 * [Arguments]:              VOID
 *
 * [Returns]:                VOID
 ***************************************************************************************************/
void HMI_doorStatesDisplay(void){
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    14b8:	0e 94 a3 13 	call	0x2746	; 0x2746 <LCD_clearScreen>
	TIMER_init(&timer_Config);
    14bc:	89 e5       	ldi	r24, 0x59	; 89
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	0e 94 df 14 	call	0x29be	; 0x29be <TIMER_init>
	TIMER_setCallBack(Door_stateDisplayCallBack,TIMER0);
    14c4:	82 ec       	ldi	r24, 0xC2	; 194
    14c6:	99 e0       	ldi	r25, 0x09	; 9
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <TIMER_setCallBack>
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <HMI_doorStatesDisplay+0x2e>

	while(g_ticks < NUMBER_OF_OVERFLOWS_15_seconds)
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS UNLOCKING..");
    14d0:	26 e1       	ldi	r18, 0x16	; 22
    14d2:	31 e0       	ldi	r19, 0x01	; 1
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>

	LCD_clearScreen();
	TIMER_init(&timer_Config);
	TIMER_setCallBack(Door_stateDisplayCallBack,TIMER0);

	while(g_ticks < NUMBER_OF_OVERFLOWS_15_seconds)
    14de:	80 91 6f 01 	lds	r24, 0x016F
    14e2:	90 91 70 01 	lds	r25, 0x0170
    14e6:	21 e0       	ldi	r18, 0x01	; 1
    14e8:	89 3c       	cpi	r24, 0xC9	; 201
    14ea:	92 07       	cpc	r25, r18
    14ec:	88 f3       	brcs	.-30     	; 0x14d0 <HMI_doorStatesDisplay+0x20>
    14ee:	07 c0       	rjmp	.+14     	; 0x14fe <HMI_doorStatesDisplay+0x4e>
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS UNLOCKING..");
	}
	while(g_ticks >=NUMBER_OF_OVERFLOWS_15_seconds&&g_ticks< NUMBER_OF_OVERFLOWS_18_seconds)
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS NOW OPEN....");
    14f0:	2a e2       	ldi	r18, 0x2A	; 42
    14f2:	31 e0       	ldi	r19, 0x01	; 1
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>

	while(g_ticks < NUMBER_OF_OVERFLOWS_15_seconds)
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS UNLOCKING..");
	}
	while(g_ticks >=NUMBER_OF_OVERFLOWS_15_seconds&&g_ticks< NUMBER_OF_OVERFLOWS_18_seconds)
    14fe:	80 91 6f 01 	lds	r24, 0x016F
    1502:	90 91 70 01 	lds	r25, 0x0170
    1506:	21 e0       	ldi	r18, 0x01	; 1
    1508:	89 3c       	cpi	r24, 0xC9	; 201
    150a:	92 07       	cpc	r25, r18
    150c:	80 f0       	brcs	.+32     	; 0x152e <HMI_doorStatesDisplay+0x7e>
    150e:	80 91 6f 01 	lds	r24, 0x016F
    1512:	90 91 70 01 	lds	r25, 0x0170
    1516:	22 e0       	ldi	r18, 0x02	; 2
    1518:	84 32       	cpi	r24, 0x24	; 36
    151a:	92 07       	cpc	r25, r18
    151c:	48 f3       	brcs	.-46     	; 0x14f0 <HMI_doorStatesDisplay+0x40>
    151e:	07 c0       	rjmp	.+14     	; 0x152e <HMI_doorStatesDisplay+0x7e>
		LCD_displayStringRowColumn(0,0,"DOOR IS NOW OPEN....");
	}
	while(g_ticks>= NUMBER_OF_OVERFLOWS_18_seconds && g_ticks < NUMBER_OF_OVERFLOWS_33_seconds)
	{

		LCD_displayStringRowColumn(0,0,"DOOR IS LOCKING..");
    1520:	2f e3       	ldi	r18, 0x3F	; 63
    1522:	31 e0       	ldi	r19, 0x01	; 1
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	a9 01       	movw	r20, r18
    152a:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayStringRowColumn>
	}
	while(g_ticks >=NUMBER_OF_OVERFLOWS_15_seconds&&g_ticks< NUMBER_OF_OVERFLOWS_18_seconds)
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS NOW OPEN....");
	}
	while(g_ticks>= NUMBER_OF_OVERFLOWS_18_seconds && g_ticks < NUMBER_OF_OVERFLOWS_33_seconds)
    152e:	80 91 6f 01 	lds	r24, 0x016F
    1532:	90 91 70 01 	lds	r25, 0x0170
    1536:	22 e0       	ldi	r18, 0x02	; 2
    1538:	84 32       	cpi	r24, 0x24	; 36
    153a:	92 07       	cpc	r25, r18
    153c:	40 f0       	brcs	.+16     	; 0x154e <HMI_doorStatesDisplay+0x9e>
    153e:	80 91 6f 01 	lds	r24, 0x016F
    1542:	90 91 70 01 	lds	r25, 0x0170
    1546:	23 e0       	ldi	r18, 0x03	; 3
    1548:	8d 3e       	cpi	r24, 0xED	; 237
    154a:	92 07       	cpc	r25, r18
    154c:	48 f3       	brcs	.-46     	; 0x1520 <HMI_doorStatesDisplay+0x70>
	{

		LCD_displayStringRowColumn(0,0,"DOOR IS LOCKING..");
	}
	if(g_ticks == NUMBER_OF_OVERFLOWS_33_seconds)
    154e:	80 91 6f 01 	lds	r24, 0x016F
    1552:	90 91 70 01 	lds	r25, 0x0170
    1556:	23 e0       	ldi	r18, 0x03	; 3
    1558:	8d 3e       	cpi	r24, 0xED	; 237
    155a:	92 07       	cpc	r25, r18
    155c:	19 f4       	brne	.+6      	; 0x1564 <HMI_doorStatesDisplay+0xb4>
	{
		menu_selector=1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	80 93 6d 01 	sts	0x016D, r24
	}

}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <GPIO_setupPinDirection+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <GPIO_setupPinDirection+0x8>
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	6a 83       	std	Y+2, r22	; 0x02
    157c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	88 30       	cpi	r24, 0x08	; 8
    1582:	08 f0       	brcs	.+2      	; 0x1586 <GPIO_setupPinDirection+0x1c>
    1584:	d5 c0       	rjmp	.+426    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	08 f0       	brcs	.+2      	; 0x158e <GPIO_setupPinDirection+0x24>
    158c:	d1 c0       	rjmp	.+418    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3d 83       	std	Y+5, r19	; 0x05
    1596:	2c 83       	std	Y+4, r18	; 0x04
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <GPIO_setupPinDirection+0x3a>
    15a2:	43 c0       	rjmp	.+134    	; 0x162a <GPIO_setupPinDirection+0xc0>
    15a4:	2c 81       	ldd	r18, Y+4	; 0x04
    15a6:	3d 81       	ldd	r19, Y+5	; 0x05
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <GPIO_setupPinDirection+0x4e>
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	9d 81       	ldd	r25, Y+5	; 0x05
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <GPIO_setupPinDirection+0x68>
    15b6:	bc c0       	rjmp	.+376    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
    15b8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ba:	3d 81       	ldd	r19, Y+5	; 0x05
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <GPIO_setupPinDirection+0x5a>
    15c2:	5f c0       	rjmp	.+190    	; 0x1682 <GPIO_setupPinDirection+0x118>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <GPIO_setupPinDirection+0x66>
    15ce:	85 c0       	rjmp	.+266    	; 0x16da <GPIO_setupPinDirection+0x170>
    15d0:	af c0       	rjmp	.+350    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	a1 f4       	brne	.+40     	; 0x1600 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15d8:	aa e3       	ldi	r26, 0x3A	; 58
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ea e3       	ldi	r30, 0x3A	; 58
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_setupPinDirection+0x8c>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_setupPinDirection+0x88>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	98 c0       	rjmp	.+304    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1600:	aa e3       	ldi	r26, 0x3A	; 58
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	ea e3       	ldi	r30, 0x3A	; 58
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_setupPinDirection+0xb4>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_setupPinDirection+0xb0>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	83 c0       	rjmp	.+262    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	a1 f4       	brne	.+40     	; 0x1658 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1630:	a7 e3       	ldi	r26, 0x37	; 55
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e7 e3       	ldi	r30, 0x37	; 55
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <GPIO_setupPinDirection+0xe4>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <GPIO_setupPinDirection+0xe0>
    1652:	84 2b       	or	r24, r20
    1654:	8c 93       	st	X, r24
    1656:	6c c0       	rjmp	.+216    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1658:	a7 e3       	ldi	r26, 0x37	; 55
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e7 e3       	ldi	r30, 0x37	; 55
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <GPIO_setupPinDirection+0x10c>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <GPIO_setupPinDirection+0x108>
    167a:	80 95       	com	r24
    167c:	84 23       	and	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	57 c0       	rjmp	.+174    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	a1 f4       	brne	.+40     	; 0x16b0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1688:	a4 e3       	ldi	r26, 0x34	; 52
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e4 e3       	ldi	r30, 0x34	; 52
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GPIO_setupPinDirection+0x13c>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GPIO_setupPinDirection+0x138>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	40 c0       	rjmp	.+128    	; 0x1730 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16b0:	a4 e3       	ldi	r26, 0x34	; 52
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e4 e3       	ldi	r30, 0x34	; 52
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <GPIO_setupPinDirection+0x164>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <GPIO_setupPinDirection+0x160>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	2b c0       	rjmp	.+86     	; 0x1730 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	a1 f4       	brne	.+40     	; 0x1708 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16e0:	a1 e3       	ldi	r26, 0x31	; 49
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e1 e3       	ldi	r30, 0x31	; 49
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <GPIO_setupPinDirection+0x194>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <GPIO_setupPinDirection+0x190>
    1702:	84 2b       	or	r24, r20
    1704:	8c 93       	st	X, r24
    1706:	14 c0       	rjmp	.+40     	; 0x1730 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1708:	a1 e3       	ldi	r26, 0x31	; 49
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e1 e3       	ldi	r30, 0x31	; 49
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <GPIO_setupPinDirection+0x1bc>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <GPIO_setupPinDirection+0x1b8>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <GPIO_writePin+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <GPIO_writePin+0x8>
    1748:	0f 92       	push	r0
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	6a 83       	std	Y+2, r22	; 0x02
    1752:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	88 30       	cpi	r24, 0x08	; 8
    1758:	08 f0       	brcs	.+2      	; 0x175c <GPIO_writePin+0x1c>
    175a:	d5 c0       	rjmp	.+426    	; 0x1906 <GPIO_writePin+0x1c6>
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	08 f0       	brcs	.+2      	; 0x1764 <GPIO_writePin+0x24>
    1762:	d1 c0       	rjmp	.+418    	; 0x1906 <GPIO_writePin+0x1c6>
		/* Do Nothing */
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3d 83       	std	Y+5, r19	; 0x05
    176c:	2c 83       	std	Y+4, r18	; 0x04
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <GPIO_writePin+0x3a>
    1778:	43 c0       	rjmp	.+134    	; 0x1800 <GPIO_writePin+0xc0>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <GPIO_writePin+0x4e>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	71 f0       	breq	.+28     	; 0x17a8 <GPIO_writePin+0x68>
    178c:	bc c0       	rjmp	.+376    	; 0x1906 <GPIO_writePin+0x1c6>
    178e:	2c 81       	ldd	r18, Y+4	; 0x04
    1790:	3d 81       	ldd	r19, Y+5	; 0x05
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <GPIO_writePin+0x5a>
    1798:	5f c0       	rjmp	.+190    	; 0x1858 <GPIO_writePin+0x118>
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <GPIO_writePin+0x66>
    17a4:	85 c0       	rjmp	.+266    	; 0x18b0 <GPIO_writePin+0x170>
    17a6:	af c0       	rjmp	.+350    	; 0x1906 <GPIO_writePin+0x1c6>
			{
			case PORTA_ID:
				if(value==LOGIC_HIGH){
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <GPIO_writePin+0x96>
					SET_BIT(PORTA,pin_num);
    17ae:	ab e3       	ldi	r26, 0x3B	; 59
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	eb e3       	ldi	r30, 0x3B	; 59
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_writePin+0x8c>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_writePin+0x88>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	98 c0       	rjmp	.+304    	; 0x1906 <GPIO_writePin+0x1c6>
				}else{
					CLEAR_BIT(PORTA,pin_num);
    17d6:	ab e3       	ldi	r26, 0x3B	; 59
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	eb e3       	ldi	r30, 0x3B	; 59
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_writePin+0xb4>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_writePin+0xb0>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
    17fe:	83 c0       	rjmp	.+262    	; 0x1906 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value==LOGIC_HIGH){
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	a1 f4       	brne	.+40     	; 0x182e <GPIO_writePin+0xee>
					SET_BIT(PORTB,pin_num);
    1806:	a8 e3       	ldi	r26, 0x38	; 56
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e8 e3       	ldi	r30, 0x38	; 56
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <GPIO_writePin+0xe4>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <GPIO_writePin+0xe0>
    1828:	84 2b       	or	r24, r20
    182a:	8c 93       	st	X, r24
    182c:	6c c0       	rjmp	.+216    	; 0x1906 <GPIO_writePin+0x1c6>
				}else{
					CLEAR_BIT(PORTB,pin_num);
    182e:	a8 e3       	ldi	r26, 0x38	; 56
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e8 e3       	ldi	r30, 0x38	; 56
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <GPIO_writePin+0x10c>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <GPIO_writePin+0x108>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	57 c0       	rjmp	.+174    	; 0x1906 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value==LOGIC_HIGH){
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	a1 f4       	brne	.+40     	; 0x1886 <GPIO_writePin+0x146>
					SET_BIT(PORTC,pin_num);
    185e:	a5 e3       	ldi	r26, 0x35	; 53
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e3       	ldi	r30, 0x35	; 53
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <GPIO_writePin+0x13c>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <GPIO_writePin+0x138>
    1880:	84 2b       	or	r24, r20
    1882:	8c 93       	st	X, r24
    1884:	40 c0       	rjmp	.+128    	; 0x1906 <GPIO_writePin+0x1c6>
				}else{
					CLEAR_BIT(PORTC,pin_num);
    1886:	a5 e3       	ldi	r26, 0x35	; 53
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e5 e3       	ldi	r30, 0x35	; 53
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <GPIO_writePin+0x164>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <GPIO_writePin+0x160>
    18a8:	80 95       	com	r24
    18aa:	84 23       	and	r24, r20
    18ac:	8c 93       	st	X, r24
    18ae:	2b c0       	rjmp	.+86     	; 0x1906 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value==LOGIC_HIGH){
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	a1 f4       	brne	.+40     	; 0x18de <GPIO_writePin+0x19e>
					SET_BIT(PORTD,pin_num);
    18b6:	a2 e3       	ldi	r26, 0x32	; 50
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e2 e3       	ldi	r30, 0x32	; 50
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <GPIO_writePin+0x194>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <GPIO_writePin+0x190>
    18d8:	84 2b       	or	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	14 c0       	rjmp	.+40     	; 0x1906 <GPIO_writePin+0x1c6>
				}else{
					CLEAR_BIT(PORTD,pin_num);
    18de:	a2 e3       	ldi	r26, 0x32	; 50
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e2 e3       	ldi	r30, 0x32	; 50
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <GPIO_writePin+0x1bc>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <GPIO_writePin+0x1b8>
    1900:	80 95       	com	r24
    1902:	84 23       	and	r24, r20
    1904:	8c 93       	st	X, r24
				}
				break;
			}
		}
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <GPIO_readPin+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <GPIO_readPin+0x8>
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	88 30       	cpi	r24, 0x08	; 8
    192c:	18 f4       	brcc	.+6      	; 0x1934 <GPIO_readPin+0x1e>
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	84 30       	cpi	r24, 0x04	; 4
    1932:	10 f0       	brcs	.+4      	; 0x1938 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1934:	1d 82       	std	Y+5, r1	; 0x05
    1936:	82 c0       	rjmp	.+260    	; 0x1a3c <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	3c 83       	std	Y+4, r19	; 0x04
    1940:	2b 83       	std	Y+3, r18	; 0x03
    1942:	4b 81       	ldd	r20, Y+3	; 0x03
    1944:	5c 81       	ldd	r21, Y+4	; 0x04
    1946:	41 30       	cpi	r20, 0x01	; 1
    1948:	51 05       	cpc	r21, r1
    194a:	79 f1       	breq	.+94     	; 0x19aa <GPIO_readPin+0x94>
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	91 05       	cpc	r25, r1
    1954:	34 f4       	brge	.+12     	; 0x1962 <GPIO_readPin+0x4c>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	21 15       	cp	r18, r1
    195c:	31 05       	cpc	r19, r1
    195e:	69 f0       	breq	.+26     	; 0x197a <GPIO_readPin+0x64>
    1960:	6c c0       	rjmp	.+216    	; 0x1a3a <GPIO_readPin+0x124>
    1962:	4b 81       	ldd	r20, Y+3	; 0x03
    1964:	5c 81       	ldd	r21, Y+4	; 0x04
    1966:	42 30       	cpi	r20, 0x02	; 2
    1968:	51 05       	cpc	r21, r1
    196a:	b9 f1       	breq	.+110    	; 0x19da <GPIO_readPin+0xc4>
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <GPIO_readPin+0x62>
    1976:	49 c0       	rjmp	.+146    	; 0x1a0a <GPIO_readPin+0xf4>
    1978:	60 c0       	rjmp	.+192    	; 0x1a3a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num)){
    197a:	e9 e3       	ldi	r30, 0x39	; 57
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a9 01       	movw	r20, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_readPin+0x7c>
    198e:	55 95       	asr	r21
    1990:	47 95       	ror	r20
    1992:	8a 95       	dec	r24
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_readPin+0x78>
    1996:	ca 01       	movw	r24, r20
    1998:	81 70       	andi	r24, 0x01	; 1
    199a:	90 70       	andi	r25, 0x00	; 0
    199c:	88 23       	and	r24, r24
    199e:	19 f0       	breq	.+6      	; 0x19a6 <GPIO_readPin+0x90>
				return LOGIC_HIGH;
    19a0:	51 e0       	ldi	r21, 0x01	; 1
    19a2:	5d 83       	std	Y+5, r21	; 0x05
    19a4:	4b c0       	rjmp	.+150    	; 0x1a3c <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    19a6:	1d 82       	std	Y+5, r1	; 0x05
    19a8:	49 c0       	rjmp	.+146    	; 0x1a3c <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num)){
    19aa:	e6 e3       	ldi	r30, 0x36	; 54
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a9 01       	movw	r20, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <GPIO_readPin+0xac>
    19be:	55 95       	asr	r21
    19c0:	47 95       	ror	r20
    19c2:	8a 95       	dec	r24
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <GPIO_readPin+0xa8>
    19c6:	ca 01       	movw	r24, r20
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	90 70       	andi	r25, 0x00	; 0
    19cc:	88 23       	and	r24, r24
    19ce:	19 f0       	breq	.+6      	; 0x19d6 <GPIO_readPin+0xc0>
				return LOGIC_HIGH;
    19d0:	51 e0       	ldi	r21, 0x01	; 1
    19d2:	5d 83       	std	Y+5, r21	; 0x05
    19d4:	33 c0       	rjmp	.+102    	; 0x1a3c <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    19d6:	1d 82       	std	Y+5, r1	; 0x05
    19d8:	31 c0       	rjmp	.+98     	; 0x1a3c <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num)){
    19da:	e3 e3       	ldi	r30, 0x33	; 51
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_readPin+0xdc>
    19ee:	55 95       	asr	r21
    19f0:	47 95       	ror	r20
    19f2:	8a 95       	dec	r24
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_readPin+0xd8>
    19f6:	ca 01       	movw	r24, r20
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	90 70       	andi	r25, 0x00	; 0
    19fc:	88 23       	and	r24, r24
    19fe:	19 f0       	breq	.+6      	; 0x1a06 <GPIO_readPin+0xf0>
				return LOGIC_HIGH;
    1a00:	51 e0       	ldi	r21, 0x01	; 1
    1a02:	5d 83       	std	Y+5, r21	; 0x05
    1a04:	1b c0       	rjmp	.+54     	; 0x1a3c <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    1a06:	1d 82       	std	Y+5, r1	; 0x05
    1a08:	19 c0       	rjmp	.+50     	; 0x1a3c <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num)){
    1a0a:	e0 e3       	ldi	r30, 0x30	; 48
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	88 2f       	mov	r24, r24
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a9 01       	movw	r20, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <GPIO_readPin+0x10c>
    1a1e:	55 95       	asr	r21
    1a20:	47 95       	ror	r20
    1a22:	8a 95       	dec	r24
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <GPIO_readPin+0x108>
    1a26:	ca 01       	movw	r24, r20
    1a28:	81 70       	andi	r24, 0x01	; 1
    1a2a:	90 70       	andi	r25, 0x00	; 0
    1a2c:	88 23       	and	r24, r24
    1a2e:	19 f0       	breq	.+6      	; 0x1a36 <GPIO_readPin+0x120>
				return LOGIC_HIGH;
    1a30:	51 e0       	ldi	r21, 0x01	; 1
    1a32:	5d 83       	std	Y+5, r21	; 0x05
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <GPIO_readPin+0x126>
			}else{
				return LOGIC_LOW;
    1a36:	1d 82       	std	Y+5, r1	; 0x05
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <GPIO_readPin+0x126>
			}
			break;
		}
	}
	return LOGIC_LOW;
    1a3a:	1d 82       	std	Y+5, r1	; 0x05
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <GPIO_setupPortDirection+0x6>
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <GPIO_setupPortDirection+0x8>
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	90 f5       	brcc	.+100    	; 0x1ac8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	3c 83       	std	Y+4, r19	; 0x04
    1a6c:	2b 83       	std	Y+3, r18	; 0x03
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	91 05       	cpc	r25, r1
    1a76:	d1 f0       	breq	.+52     	; 0x1aac <GPIO_setupPortDirection+0x5e>
    1a78:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7c:	22 30       	cpi	r18, 0x02	; 2
    1a7e:	31 05       	cpc	r19, r1
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <GPIO_setupPortDirection+0x3e>
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	61 f0       	breq	.+24     	; 0x1aa2 <GPIO_setupPortDirection+0x54>
    1a8a:	1e c0       	rjmp	.+60     	; 0x1ac8 <GPIO_setupPortDirection+0x7a>
    1a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a90:	22 30       	cpi	r18, 0x02	; 2
    1a92:	31 05       	cpc	r19, r1
    1a94:	81 f0       	breq	.+32     	; 0x1ab6 <GPIO_setupPortDirection+0x68>
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	83 30       	cpi	r24, 0x03	; 3
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	81 f0       	breq	.+32     	; 0x1ac0 <GPIO_setupPortDirection+0x72>
    1aa0:	13 c0       	rjmp	.+38     	; 0x1ac8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1aa2:	ea e3       	ldi	r30, 0x3A	; 58
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	80 83       	st	Z, r24
    1aaa:	0e c0       	rjmp	.+28     	; 0x1ac8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1aac:	e7 e3       	ldi	r30, 0x37	; 55
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	80 83       	st	Z, r24
    1ab4:	09 c0       	rjmp	.+18     	; 0x1ac8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ab6:	e4 e3       	ldi	r30, 0x34	; 52
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	80 83       	st	Z, r24
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ac0:	e1 e3       	ldi	r30, 0x31	; 49
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <GPIO_writePort+0x6>
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <GPIO_writePort+0x8>
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	6a 83       	std	Y+2, r22	; 0x02

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	84 30       	cpi	r24, 0x04	; 4
    1aea:	90 f5       	brcc	.+100    	; 0x1b50 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	3c 83       	std	Y+4, r19	; 0x04
    1af4:	2b 83       	std	Y+3, r18	; 0x03
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	91 05       	cpc	r25, r1
    1afe:	d1 f0       	breq	.+52     	; 0x1b34 <GPIO_writePort+0x5e>
    1b00:	2b 81       	ldd	r18, Y+3	; 0x03
    1b02:	3c 81       	ldd	r19, Y+4	; 0x04
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <GPIO_writePort+0x3e>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <GPIO_writePort+0x54>
    1b12:	1e c0       	rjmp	.+60     	; 0x1b50 <GPIO_writePort+0x7a>
    1b14:	2b 81       	ldd	r18, Y+3	; 0x03
    1b16:	3c 81       	ldd	r19, Y+4	; 0x04
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	81 f0       	breq	.+32     	; 0x1b3e <GPIO_writePort+0x68>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	91 05       	cpc	r25, r1
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <GPIO_writePort+0x72>
    1b28:	13 c0       	rjmp	.+38     	; 0x1b50 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1b2a:	eb e3       	ldi	r30, 0x3B	; 59
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	80 83       	st	Z, r24
    1b32:	0e c0       	rjmp	.+28     	; 0x1b50 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1b34:	e8 e3       	ldi	r30, 0x38	; 56
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	80 83       	st	Z, r24
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1b3e:	e5 e3       	ldi	r30, 0x35	; 53
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	80 83       	st	Z, r24
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1b48:	e2 e3       	ldi	r30, 0x32	; 50
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <GPIO_readPort+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <GPIO_readPort+0x8>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	/*
		 * Check if the input number is greater than NUM_OF_PORTS value.
		 * In this case the input is not valid port number
		 */
		if(port_num >= NUM_OF_PORTS)
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	84 30       	cpi	r24, 0x04	; 4
    1b70:	10 f0       	brcs	.+4      	; 0x1b76 <GPIO_readPort+0x18>
		{
			return LOGIC_LOW;
    1b72:	1c 82       	std	Y+4, r1	; 0x04
    1b74:	34 c0       	rjmp	.+104    	; 0x1bde <GPIO_readPort+0x80>
		}
		else
		{
			/* Setup the port direction as required */
			switch(port_num)
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3b 83       	std	Y+3, r19	; 0x03
    1b7e:	2a 83       	std	Y+2, r18	; 0x02
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	91 05       	cpc	r25, r1
    1b88:	d1 f0       	breq	.+52     	; 0x1bbe <GPIO_readPort+0x60>
    1b8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b8e:	22 30       	cpi	r18, 0x02	; 2
    1b90:	31 05       	cpc	r19, r1
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <GPIO_readPort+0x40>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	61 f0       	breq	.+24     	; 0x1bb4 <GPIO_readPort+0x56>
    1b9c:	1f c0       	rjmp	.+62     	; 0x1bdc <GPIO_readPort+0x7e>
    1b9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	81 f0       	breq	.+32     	; 0x1bc8 <GPIO_readPort+0x6a>
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bac:	83 30       	cpi	r24, 0x03	; 3
    1bae:	91 05       	cpc	r25, r1
    1bb0:	81 f0       	breq	.+32     	; 0x1bd2 <GPIO_readPort+0x74>
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <GPIO_readPort+0x7e>
			{
			case PORTA_ID:
				return PINA;
    1bb4:	e9 e3       	ldi	r30, 0x39	; 57
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	90 81       	ld	r25, Z
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	10 c0       	rjmp	.+32     	; 0x1bde <GPIO_readPort+0x80>
				break;
			case PORTB_ID:
				return PINB;
    1bbe:	e6 e3       	ldi	r30, 0x36	; 54
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	20 81       	ld	r18, Z
    1bc4:	2c 83       	std	Y+4, r18	; 0x04
    1bc6:	0b c0       	rjmp	.+22     	; 0x1bde <GPIO_readPort+0x80>
				break;
			case PORTC_ID:
				return PINC;
    1bc8:	e3 e3       	ldi	r30, 0x33	; 51
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	30 81       	ld	r19, Z
    1bce:	3c 83       	std	Y+4, r19	; 0x04
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <GPIO_readPort+0x80>
				break;
			case PORTD_ID:
				return PIND;
    1bd2:	e0 e3       	ldi	r30, 0x30	; 48
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8c 83       	std	Y+4, r24	; 0x04
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <GPIO_readPort+0x80>
				break;
			}
		}
		return LOGIC_LOW;
    1bdc:	1c 82       	std	Y+4, r1	; 0x04
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <KEYPAD_getPressedKey+0x6>
    1bf4:	0f 92       	push	r0
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1bfa:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1bfc:	1b 82       	std	Y+3, r1	; 0x03
    1bfe:	43 c0       	rjmp	.+134    	; 0x1c86 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	98 2f       	mov	r25, r24
    1c0c:	9c 5f       	subi	r25, 0xFC	; 252
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	69 2f       	mov	r22, r25
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9c 01       	movw	r18, r24
    1c20:	2c 5f       	subi	r18, 0xFC	; 252
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <KEYPAD_getPressedKey+0x40>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	2a 95       	dec	r18
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <KEYPAD_getPressedKey+0x3c>
    1c32:	80 95       	com	r24
    1c34:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	69 81       	ldd	r22, Y+1	; 0x01
    1c3a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1c3e:	1a 82       	std	Y+2, r1	; 0x02
    1c40:	1c c0       	rjmp	.+56     	; 0x1c7a <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	6a 81       	ldd	r22, Y+2	; 0x02
    1c46:	0e 94 8b 0c 	call	0x1916	; 0x1916 <GPIO_readPin>
    1c4a:	88 23       	and	r24, r24
    1c4c:	99 f4       	brne	.+38     	; 0x1c74 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	89 0f       	add	r24, r25
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	8f 5f       	subi	r24, 0xFF	; 255
    1c78:	8a 83       	std	Y+2, r24	; 0x02
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	84 30       	cpi	r24, 0x04	; 4
    1c7e:	08 f3       	brcs	.-62     	; 0x1c42 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	8f 5f       	subi	r24, 0xFF	; 255
    1c84:	8b 83       	std	Y+3, r24	; 0x03
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	84 30       	cpi	r24, 0x04	; 4
    1c8a:	08 f4       	brcc	.+2      	; 0x1c8e <KEYPAD_getPressedKey+0xa0>
    1c8c:	b9 cf       	rjmp	.-142    	; 0x1c00 <KEYPAD_getPressedKey+0x12>
    1c8e:	b6 cf       	rjmp	.-148    	; 0x1bfc <KEYPAD_getPressedKey+0xe>

00001c90 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c9e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	3c 83       	std	Y+4, r19	; 0x04
    1ca8:	2b 83       	std	Y+3, r18	; 0x03
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	88 30       	cpi	r24, 0x08	; 8
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1cb4:	70 c0       	rjmp	.+224    	; 0x1d96 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1cb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cba:	29 30       	cpi	r18, 0x09	; 9
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	5c f5       	brge	.+86     	; 0x1d16 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	84 30       	cpi	r24, 0x04	; 4
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1cca:	59 c0       	rjmp	.+178    	; 0x1d7e <KEYPAD_4x4_adjustKeyNumber+0xee>
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	25 30       	cpi	r18, 0x05	; 5
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	9c f4       	brge	.+38     	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	91 05       	cpc	r25, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1ce0:	48 c0       	rjmp	.+144    	; 0x1d72 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	23 30       	cpi	r18, 0x03	; 3
    1ce8:	31 05       	cpc	r19, r1
    1cea:	0c f0       	brlt	.+2      	; 0x1cee <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1cec:	45 c0       	rjmp	.+138    	; 0x1d78 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1cf8:	39 c0       	rjmp	.+114    	; 0x1d6c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1cfa:	67 c0       	rjmp	.+206    	; 0x1dca <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1cfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1d00:	26 30       	cpi	r18, 0x06	; 6
    1d02:	31 05       	cpc	r19, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d06:	41 c0       	rjmp	.+130    	; 0x1d8a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	87 30       	cpi	r24, 0x07	; 7
    1d0e:	91 05       	cpc	r25, r1
    1d10:	0c f0       	brlt	.+2      	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d12:	3e c0       	rjmp	.+124    	; 0x1d90 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d14:	37 c0       	rjmp	.+110    	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d16:	2b 81       	ldd	r18, Y+3	; 0x03
    1d18:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1a:	2c 30       	cpi	r18, 0x0C	; 12
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d20:	46 c0       	rjmp	.+140    	; 0x1dae <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	8d 30       	cpi	r24, 0x0D	; 13
    1d28:	91 05       	cpc	r25, r1
    1d2a:	5c f4       	brge	.+22     	; 0x1d42 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d30:	2a 30       	cpi	r18, 0x0A	; 10
    1d32:	31 05       	cpc	r19, r1
    1d34:	b1 f1       	breq	.+108    	; 0x1da2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	8b 30       	cpi	r24, 0x0B	; 11
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	a4 f5       	brge	.+104    	; 0x1da8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1d40:	2d c0       	rjmp	.+90     	; 0x1d9c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1d42:	2b 81       	ldd	r18, Y+3	; 0x03
    1d44:	3c 81       	ldd	r19, Y+4	; 0x04
    1d46:	2e 30       	cpi	r18, 0x0E	; 14
    1d48:	31 05       	cpc	r19, r1
    1d4a:	b9 f1       	breq	.+110    	; 0x1dba <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	8e 30       	cpi	r24, 0x0E	; 14
    1d52:	91 05       	cpc	r25, r1
    1d54:	7c f1       	brlt	.+94     	; 0x1db4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1d56:	2b 81       	ldd	r18, Y+3	; 0x03
    1d58:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5a:	2f 30       	cpi	r18, 0x0F	; 15
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	79 f1       	breq	.+94     	; 0x1dbe <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	80 31       	cpi	r24, 0x10	; 16
    1d66:	91 05       	cpc	r25, r1
    1d68:	69 f1       	breq	.+90     	; 0x1dc4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1d6a:	2f c0       	rjmp	.+94     	; 0x1dca <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1d6c:	87 e0       	ldi	r24, 0x07	; 7
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	2e c0       	rjmp	.+92     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1d72:	88 e0       	ldi	r24, 0x08	; 8
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	2b c0       	rjmp	.+86     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1d78:	89 e0       	ldi	r24, 0x09	; 9
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	28 c0       	rjmp	.+80     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d7e:	85 e2       	ldi	r24, 0x25	; 37
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	25 c0       	rjmp	.+74     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1d84:	84 e0       	ldi	r24, 0x04	; 4
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	22 c0       	rjmp	.+68     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1d8a:	85 e0       	ldi	r24, 0x05	; 5
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	1f c0       	rjmp	.+62     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1d90:	86 e0       	ldi	r24, 0x06	; 6
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	1c c0       	rjmp	.+56     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d96:	8a e2       	ldi	r24, 0x2A	; 42
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	19 c0       	rjmp	.+50     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	16 c0       	rjmp	.+44     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	13 c0       	rjmp	.+38     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1da8:	83 e0       	ldi	r24, 0x03	; 3
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	10 c0       	rjmp	.+32     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1dae:	8d e2       	ldi	r24, 0x2D	; 45
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	0d c0       	rjmp	.+26     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1db4:	8d e0       	ldi	r24, 0x0D	; 13
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1dba:	19 82       	std	Y+1, r1	; 0x01
    1dbc:	08 c0       	rjmp	.+16     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1dbe:	8d e3       	ldi	r24, 0x3D	; 61
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	05 c0       	rjmp	.+10     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1dc4:	8b e2       	ldi	r24, 0x2B	; 43
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	66 e0       	ldi	r22, 0x06	; 6
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	65 e0       	ldi	r22, 0x05	; 5
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	64 e0       	ldi	r22, 0x04	; 4
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	6f ef       	ldi	r22, 0xFF	; 255
    1e08:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1e0c:	88 e3       	ldi	r24, 0x38	; 56
    1e0e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e12:	8c e0       	ldi	r24, 0x0C	; 12
    1e14:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_sendCommand>
}
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	ea 97       	sbiw	r28, 0x3a	; 58
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1e3a:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	66 e0       	ldi	r22, 0x06	; 6
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	65 e0       	ldi	r22, 0x05	; 5
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_writePin>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e8       	ldi	r26, 0x80	; 128
    1e56:	bf e3       	ldi	r27, 0x3F	; 63
    1e58:	8d ab       	std	Y+53, r24	; 0x35
    1e5a:	9e ab       	std	Y+54, r25	; 0x36
    1e5c:	af ab       	std	Y+55, r26	; 0x37
    1e5e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	6d a9       	ldd	r22, Y+53	; 0x35
    1e62:	7e a9       	ldd	r23, Y+54	; 0x36
    1e64:	8f a9       	ldd	r24, Y+55	; 0x37
    1e66:	98 ad       	ldd	r25, Y+56	; 0x38
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	89 ab       	std	Y+49, r24	; 0x31
    1e7a:	9a ab       	std	Y+50, r25	; 0x32
    1e7c:	ab ab       	std	Y+51, r26	; 0x33
    1e7e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e80:	69 a9       	ldd	r22, Y+49	; 0x31
    1e82:	7a a9       	ldd	r23, Y+50	; 0x32
    1e84:	8b a9       	ldd	r24, Y+51	; 0x33
    1e86:	9c a9       	ldd	r25, Y+52	; 0x34
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	98 ab       	std	Y+48, r25	; 0x30
    1e9e:	8f a7       	std	Y+47, r24	; 0x2f
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1ea2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	6d a9       	ldd	r22, Y+53	; 0x35
    1ebc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ebe:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	98 ab       	std	Y+48, r25	; 0x30
    1ee0:	8f a7       	std	Y+47, r24	; 0x2f
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_sendCommand+0xde>
    1ee4:	88 ec       	ldi	r24, 0xC8	; 200
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9e a7       	std	Y+46, r25	; 0x2e
    1eea:	8d a7       	std	Y+45, r24	; 0x2d
    1eec:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eee:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_sendCommand+0xcc>
    1ef4:	9e a7       	std	Y+46, r25	; 0x2e
    1ef6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efa:	98 a9       	ldd	r25, Y+48	; 0x30
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	98 ab       	std	Y+48, r25	; 0x30
    1f00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f04:	98 a9       	ldd	r25, Y+48	; 0x30
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_sendCommand+0xc0>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f10:	8b a9       	ldd	r24, Y+51	; 0x33
    1f12:	9c a9       	ldd	r25, Y+52	; 0x34
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	98 ab       	std	Y+48, r25	; 0x30
    1f1e:	8f a7       	std	Y+47, r24	; 0x2f
    1f20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f22:	98 a9       	ldd	r25, Y+48	; 0x30
    1f24:	9c a7       	std	Y+44, r25	; 0x2c
    1f26:	8b a7       	std	Y+43, r24	; 0x2b
    1f28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_sendCommand+0x108>
    1f30:	9c a7       	std	Y+44, r25	; 0x2c
    1f32:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	64 e0       	ldi	r22, 0x04	; 4
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_writePin>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e8       	ldi	r26, 0x80	; 128
    1f44:	bf e3       	ldi	r27, 0x3F	; 63
    1f46:	8f a3       	std	Y+39, r24	; 0x27
    1f48:	98 a7       	std	Y+40, r25	; 0x28
    1f4a:	a9 a7       	std	Y+41, r26	; 0x29
    1f4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f50:	78 a5       	ldd	r23, Y+40	; 0x28
    1f52:	89 a5       	ldd	r24, Y+41	; 0x29
    1f54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a ef       	ldi	r20, 0xFA	; 250
    1f5c:	54 e4       	ldi	r21, 0x44	; 68
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8b a3       	std	Y+35, r24	; 0x23
    1f68:	9c a3       	std	Y+36, r25	; 0x24
    1f6a:	ad a3       	std	Y+37, r26	; 0x25
    1f6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f70:	7c a1       	ldd	r23, Y+36	; 0x24
    1f72:	8d a1       	ldd	r24, Y+37	; 0x25
    1f74:	9e a1       	ldd	r25, Y+38	; 0x26
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9a a3       	std	Y+34, r25	; 0x22
    1f8c:	89 a3       	std	Y+33, r24	; 0x21
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1f90:	6b a1       	ldd	r22, Y+35	; 0x23
    1f92:	7c a1       	ldd	r23, Y+36	; 0x24
    1f94:	8d a1       	ldd	r24, Y+37	; 0x25
    1f96:	9e a1       	ldd	r25, Y+38	; 0x26
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6f a1       	ldd	r22, Y+39	; 0x27
    1faa:	78 a5       	ldd	r23, Y+40	; 0x28
    1fac:	89 a5       	ldd	r24, Y+41	; 0x29
    1fae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9a a3       	std	Y+34, r25	; 0x22
    1fce:	89 a3       	std	Y+33, r24	; 0x21
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <LCD_sendCommand+0x1cc>
    1fd2:	88 ec       	ldi	r24, 0xC8	; 200
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	98 a3       	std	Y+32, r25	; 0x20
    1fd8:	8f 8f       	std	Y+31, r24	; 0x1f
    1fda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fdc:	98 a1       	ldd	r25, Y+32	; 0x20
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_sendCommand+0x1ba>
    1fe2:	98 a3       	std	Y+32, r25	; 0x20
    1fe4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9a a3       	std	Y+34, r25	; 0x22
    1fee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <LCD_sendCommand+0x1ae>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffe:	8d a1       	ldd	r24, Y+37	; 0x25
    2000:	9e a1       	ldd	r25, Y+38	; 0x26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9a a3       	std	Y+34, r25	; 0x22
    200c:	89 a3       	std	Y+33, r24	; 0x21
    200e:	89 a1       	ldd	r24, Y+33	; 0x21
    2010:	9a a1       	ldd	r25, Y+34	; 0x22
    2012:	9e 8f       	std	Y+30, r25	; 0x1e
    2014:	8d 8f       	std	Y+29, r24	; 0x1d
    2016:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2018:	9e 8d       	ldd	r25, Y+30	; 0x1e
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_sendCommand+0x1f6>
    201e:	9e 8f       	std	Y+30, r25	; 0x1e
    2020:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	6a ad       	ldd	r22, Y+58	; 0x3a
    2026:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <GPIO_writePort>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e8       	ldi	r26, 0x80	; 128
    2030:	bf e3       	ldi	r27, 0x3F	; 63
    2032:	89 8f       	std	Y+25, r24	; 0x19
    2034:	9a 8f       	std	Y+26, r25	; 0x1a
    2036:	ab 8f       	std	Y+27, r26	; 0x1b
    2038:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	69 8d       	ldd	r22, Y+25	; 0x19
    203c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8d 8b       	std	Y+21, r24	; 0x15
    2054:	9e 8b       	std	Y+22, r25	; 0x16
    2056:	af 8b       	std	Y+23, r26	; 0x17
    2058:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    205a:	6d 89       	ldd	r22, Y+21	; 0x15
    205c:	7e 89       	ldd	r23, Y+22	; 0x16
    205e:	8f 89       	ldd	r24, Y+23	; 0x17
    2060:	98 8d       	ldd	r25, Y+24	; 0x18
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <LCD_sendCommand+0x258>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9c 8b       	std	Y+20, r25	; 0x14
    2078:	8b 8b       	std	Y+19, r24	; 0x13
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    207c:	6d 89       	ldd	r22, Y+21	; 0x15
    207e:	7e 89       	ldd	r23, Y+22	; 0x16
    2080:	8f 89       	ldd	r24, Y+23	; 0x17
    2082:	98 8d       	ldd	r25, Y+24	; 0x18
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	69 8d       	ldd	r22, Y+25	; 0x19
    2096:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2098:	8b 8d       	ldd	r24, Y+27	; 0x1b
    209a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <LCD_sendCommand+0x2b8>
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9a 8b       	std	Y+18, r25	; 0x12
    20c4:	89 8b       	std	Y+17, r24	; 0x11
    20c6:	89 89       	ldd	r24, Y+17	; 0x11
    20c8:	9a 89       	ldd	r25, Y+18	; 0x12
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_sendCommand+0x2a6>
    20ce:	9a 8b       	std	Y+18, r25	; 0x12
    20d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	8b 89       	ldd	r24, Y+19	; 0x13
    20d4:	9c 89       	ldd	r25, Y+20	; 0x14
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9c 8b       	std	Y+20, r25	; 0x14
    20da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	8b 89       	ldd	r24, Y+19	; 0x13
    20de:	9c 89       	ldd	r25, Y+20	; 0x14
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <LCD_sendCommand+0x29a>
    20e4:	14 c0       	rjmp	.+40     	; 0x210e <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	6d 89       	ldd	r22, Y+21	; 0x15
    20e8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ea:	8f 89       	ldd	r24, Y+23	; 0x17
    20ec:	98 8d       	ldd	r25, Y+24	; 0x18
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9c 8b       	std	Y+20, r25	; 0x14
    20f8:	8b 8b       	std	Y+19, r24	; 0x13
    20fa:	8b 89       	ldd	r24, Y+19	; 0x13
    20fc:	9c 89       	ldd	r25, Y+20	; 0x14
    20fe:	98 8b       	std	Y+16, r25	; 0x10
    2100:	8f 87       	std	Y+15, r24	; 0x0f
    2102:	8f 85       	ldd	r24, Y+15	; 0x0f
    2104:	98 89       	ldd	r25, Y+16	; 0x10
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_sendCommand+0x2e2>
    210a:	98 8b       	std	Y+16, r25	; 0x10
    210c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	64 e0       	ldi	r22, 0x04	; 4
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_writePin>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	bf e3       	ldi	r27, 0x3F	; 63
    2120:	8b 87       	std	Y+11, r24	; 0x0b
    2122:	9c 87       	std	Y+12, r25	; 0x0c
    2124:	ad 87       	std	Y+13, r26	; 0x0d
    2126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a ef       	ldi	r20, 0xFA	; 250
    2136:	54 e4       	ldi	r21, 0x44	; 68
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8f 83       	std	Y+7, r24	; 0x07
    2142:	98 87       	std	Y+8, r25	; 0x08
    2144:	a9 87       	std	Y+9, r26	; 0x09
    2146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2148:	6f 81       	ldd	r22, Y+7	; 0x07
    214a:	78 85       	ldd	r23, Y+8	; 0x08
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <LCD_sendCommand+0x346>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	6b 85       	ldd	r22, Y+11	; 0x0b
    2184:	7c 85       	ldd	r23, Y+12	; 0x0c
    2186:	8d 85       	ldd	r24, Y+13	; 0x0d
    2188:	9e 85       	ldd	r25, Y+14	; 0x0e
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <LCD_sendCommand+0x3a6>
    21ac:	88 ec       	ldi	r24, 0xC8	; 200
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 83       	std	Y+4, r25	; 0x04
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_sendCommand+0x394>
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	9e 81       	ldd	r25, Y+6	; 0x06
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <LCD_sendCommand+0x388>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6f 81       	ldd	r22, Y+7	; 0x07
    21d6:	78 85       	ldd	r23, Y+8	; 0x08
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	9a 83       	std	Y+2, r25	; 0x02
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_sendCommand+0x3d0>
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21fc:	ea 96       	adiw	r28, 0x3a	; 58
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	ea 97       	sbiw	r28, 0x3a	; 58
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2224:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2226:	83 e0       	ldi	r24, 0x03	; 3
    2228:	66 e0       	ldi	r22, 0x06	; 6
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	65 e0       	ldi	r22, 0x05	; 5
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_writePin>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a0 e8       	ldi	r26, 0x80	; 128
    2240:	bf e3       	ldi	r27, 0x3F	; 63
    2242:	8d ab       	std	Y+53, r24	; 0x35
    2244:	9e ab       	std	Y+54, r25	; 0x36
    2246:	af ab       	std	Y+55, r26	; 0x37
    2248:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	6d a9       	ldd	r22, Y+53	; 0x35
    224c:	7e a9       	ldd	r23, Y+54	; 0x36
    224e:	8f a9       	ldd	r24, Y+55	; 0x37
    2250:	98 ad       	ldd	r25, Y+56	; 0x38
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a ef       	ldi	r20, 0xFA	; 250
    2258:	54 e4       	ldi	r21, 0x44	; 68
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	89 ab       	std	Y+49, r24	; 0x31
    2264:	9a ab       	std	Y+50, r25	; 0x32
    2266:	ab ab       	std	Y+51, r26	; 0x33
    2268:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    226a:	69 a9       	ldd	r22, Y+49	; 0x31
    226c:	7a a9       	ldd	r23, Y+50	; 0x32
    226e:	8b a9       	ldd	r24, Y+51	; 0x33
    2270:	9c a9       	ldd	r25, Y+52	; 0x34
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	98 ab       	std	Y+48, r25	; 0x30
    2288:	8f a7       	std	Y+47, r24	; 0x2f
    228a:	3f c0       	rjmp	.+126    	; 0x230a <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    228c:	69 a9       	ldd	r22, Y+49	; 0x31
    228e:	7a a9       	ldd	r23, Y+50	; 0x32
    2290:	8b a9       	ldd	r24, Y+51	; 0x33
    2292:	9c a9       	ldd	r25, Y+52	; 0x34
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	6d a9       	ldd	r22, Y+53	; 0x35
    22a6:	7e a9       	ldd	r23, Y+54	; 0x36
    22a8:	8f a9       	ldd	r24, Y+55	; 0x37
    22aa:	98 ad       	ldd	r25, Y+56	; 0x38
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	98 ab       	std	Y+48, r25	; 0x30
    22ca:	8f a7       	std	Y+47, r24	; 0x2f
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <LCD_displayCharacter+0xde>
    22ce:	88 ec       	ldi	r24, 0xC8	; 200
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9e a7       	std	Y+46, r25	; 0x2e
    22d4:	8d a7       	std	Y+45, r24	; 0x2d
    22d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    22d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_displayCharacter+0xcc>
    22de:	9e a7       	std	Y+46, r25	; 0x2e
    22e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e4:	98 a9       	ldd	r25, Y+48	; 0x30
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	98 ab       	std	Y+48, r25	; 0x30
    22ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ee:	98 a9       	ldd	r25, Y+48	; 0x30
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <LCD_displayCharacter+0xc0>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	69 a9       	ldd	r22, Y+49	; 0x31
    22f8:	7a a9       	ldd	r23, Y+50	; 0x32
    22fa:	8b a9       	ldd	r24, Y+51	; 0x33
    22fc:	9c a9       	ldd	r25, Y+52	; 0x34
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	98 ab       	std	Y+48, r25	; 0x30
    2308:	8f a7       	std	Y+47, r24	; 0x2f
    230a:	8f a5       	ldd	r24, Y+47	; 0x2f
    230c:	98 a9       	ldd	r25, Y+48	; 0x30
    230e:	9c a7       	std	Y+44, r25	; 0x2c
    2310:	8b a7       	std	Y+43, r24	; 0x2b
    2312:	8b a5       	ldd	r24, Y+43	; 0x2b
    2314:	9c a5       	ldd	r25, Y+44	; 0x2c
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_displayCharacter+0x108>
    231a:	9c a7       	std	Y+44, r25	; 0x2c
    231c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    231e:	83 e0       	ldi	r24, 0x03	; 3
    2320:	64 e0       	ldi	r22, 0x04	; 4
    2322:	41 e0       	ldi	r20, 0x01	; 1
    2324:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_writePin>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 e8       	ldi	r26, 0x80	; 128
    232e:	bf e3       	ldi	r27, 0x3F	; 63
    2330:	8f a3       	std	Y+39, r24	; 0x27
    2332:	98 a7       	std	Y+40, r25	; 0x28
    2334:	a9 a7       	std	Y+41, r26	; 0x29
    2336:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	6f a1       	ldd	r22, Y+39	; 0x27
    233a:	78 a5       	ldd	r23, Y+40	; 0x28
    233c:	89 a5       	ldd	r24, Y+41	; 0x29
    233e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a ef       	ldi	r20, 0xFA	; 250
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	8b a3       	std	Y+35, r24	; 0x23
    2352:	9c a3       	std	Y+36, r25	; 0x24
    2354:	ad a3       	std	Y+37, r26	; 0x25
    2356:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2358:	6b a1       	ldd	r22, Y+35	; 0x23
    235a:	7c a1       	ldd	r23, Y+36	; 0x24
    235c:	8d a1       	ldd	r24, Y+37	; 0x25
    235e:	9e a1       	ldd	r25, Y+38	; 0x26
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	2c f4       	brge	.+10     	; 0x237a <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9a a3       	std	Y+34, r25	; 0x22
    2376:	89 a3       	std	Y+33, r24	; 0x21
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    237a:	6b a1       	ldd	r22, Y+35	; 0x23
    237c:	7c a1       	ldd	r23, Y+36	; 0x24
    237e:	8d a1       	ldd	r24, Y+37	; 0x25
    2380:	9e a1       	ldd	r25, Y+38	; 0x26
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	3f ef       	ldi	r19, 0xFF	; 255
    2386:	4f e7       	ldi	r20, 0x7F	; 127
    2388:	57 e4       	ldi	r21, 0x47	; 71
    238a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    238e:	18 16       	cp	r1, r24
    2390:	4c f5       	brge	.+82     	; 0x23e4 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2392:	6f a1       	ldd	r22, Y+39	; 0x27
    2394:	78 a5       	ldd	r23, Y+40	; 0x28
    2396:	89 a5       	ldd	r24, Y+41	; 0x29
    2398:	9a a5       	ldd	r25, Y+42	; 0x2a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e2       	ldi	r20, 0x20	; 32
    23a0:	51 e4       	ldi	r21, 0x41	; 65
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	9a a3       	std	Y+34, r25	; 0x22
    23b8:	89 a3       	std	Y+33, r24	; 0x21
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <LCD_displayCharacter+0x1cc>
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	98 a3       	std	Y+32, r25	; 0x20
    23c2:	8f 8f       	std	Y+31, r24	; 0x1f
    23c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23c6:	98 a1       	ldd	r25, Y+32	; 0x20
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_displayCharacter+0x1ba>
    23cc:	98 a3       	std	Y+32, r25	; 0x20
    23ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	89 a1       	ldd	r24, Y+33	; 0x21
    23d2:	9a a1       	ldd	r25, Y+34	; 0x22
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	9a a3       	std	Y+34, r25	; 0x22
    23d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23da:	89 a1       	ldd	r24, Y+33	; 0x21
    23dc:	9a a1       	ldd	r25, Y+34	; 0x22
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	69 f7       	brne	.-38     	; 0x23bc <LCD_displayCharacter+0x1ae>
    23e2:	14 c0       	rjmp	.+40     	; 0x240c <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	6b a1       	ldd	r22, Y+35	; 0x23
    23e6:	7c a1       	ldd	r23, Y+36	; 0x24
    23e8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ea:	9e a1       	ldd	r25, Y+38	; 0x26
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9a a3       	std	Y+34, r25	; 0x22
    23f6:	89 a3       	std	Y+33, r24	; 0x21
    23f8:	89 a1       	ldd	r24, Y+33	; 0x21
    23fa:	9a a1       	ldd	r25, Y+34	; 0x22
    23fc:	9e 8f       	std	Y+30, r25	; 0x1e
    23fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2400:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2402:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_displayCharacter+0x1f6>
    2408:	9e 8f       	std	Y+30, r25	; 0x1e
    240a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	6a ad       	ldd	r22, Y+58	; 0x3a
    2410:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <GPIO_writePort>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a0 e8       	ldi	r26, 0x80	; 128
    241a:	bf e3       	ldi	r27, 0x3F	; 63
    241c:	89 8f       	std	Y+25, r24	; 0x19
    241e:	9a 8f       	std	Y+26, r25	; 0x1a
    2420:	ab 8f       	std	Y+27, r26	; 0x1b
    2422:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	69 8d       	ldd	r22, Y+25	; 0x19
    2426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a ef       	ldi	r20, 0xFA	; 250
    2432:	54 e4       	ldi	r21, 0x44	; 68
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8d 8b       	std	Y+21, r24	; 0x15
    243e:	9e 8b       	std	Y+22, r25	; 0x16
    2440:	af 8b       	std	Y+23, r26	; 0x17
    2442:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2444:	6d 89       	ldd	r22, Y+21	; 0x15
    2446:	7e 89       	ldd	r23, Y+22	; 0x16
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	2c f4       	brge	.+10     	; 0x2466 <LCD_displayCharacter+0x258>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9c 8b       	std	Y+20, r25	; 0x14
    2462:	8b 8b       	std	Y+19, r24	; 0x13
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2466:	6d 89       	ldd	r22, Y+21	; 0x15
    2468:	7e 89       	ldd	r23, Y+22	; 0x16
    246a:	8f 89       	ldd	r24, Y+23	; 0x17
    246c:	98 8d       	ldd	r25, Y+24	; 0x18
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	4c f5       	brge	.+82     	; 0x24d0 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247e:	69 8d       	ldd	r22, Y+25	; 0x19
    2480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9c 8b       	std	Y+20, r25	; 0x14
    24a4:	8b 8b       	std	Y+19, r24	; 0x13
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <LCD_displayCharacter+0x2b8>
    24a8:	88 ec       	ldi	r24, 0xC8	; 200
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9a 8b       	std	Y+18, r25	; 0x12
    24ae:	89 8b       	std	Y+17, r24	; 0x11
    24b0:	89 89       	ldd	r24, Y+17	; 0x11
    24b2:	9a 89       	ldd	r25, Y+18	; 0x12
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <LCD_displayCharacter+0x2a6>
    24b8:	9a 8b       	std	Y+18, r25	; 0x12
    24ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	8b 89       	ldd	r24, Y+19	; 0x13
    24be:	9c 89       	ldd	r25, Y+20	; 0x14
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	9c 8b       	std	Y+20, r25	; 0x14
    24c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c6:	8b 89       	ldd	r24, Y+19	; 0x13
    24c8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	69 f7       	brne	.-38     	; 0x24a8 <LCD_displayCharacter+0x29a>
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d0:	6d 89       	ldd	r22, Y+21	; 0x15
    24d2:	7e 89       	ldd	r23, Y+22	; 0x16
    24d4:	8f 89       	ldd	r24, Y+23	; 0x17
    24d6:	98 8d       	ldd	r25, Y+24	; 0x18
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9c 8b       	std	Y+20, r25	; 0x14
    24e2:	8b 8b       	std	Y+19, r24	; 0x13
    24e4:	8b 89       	ldd	r24, Y+19	; 0x13
    24e6:	9c 89       	ldd	r25, Y+20	; 0x14
    24e8:	98 8b       	std	Y+16, r25	; 0x10
    24ea:	8f 87       	std	Y+15, r24	; 0x0f
    24ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ee:	98 89       	ldd	r25, Y+16	; 0x10
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_displayCharacter+0x2e2>
    24f4:	98 8b       	std	Y+16, r25	; 0x10
    24f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24f8:	83 e0       	ldi	r24, 0x03	; 3
    24fa:	64 e0       	ldi	r22, 0x04	; 4
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_writePin>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a0 e8       	ldi	r26, 0x80	; 128
    2508:	bf e3       	ldi	r27, 0x3F	; 63
    250a:	8b 87       	std	Y+11, r24	; 0x0b
    250c:	9c 87       	std	Y+12, r25	; 0x0c
    250e:	ad 87       	std	Y+13, r26	; 0x0d
    2510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a ef       	ldi	r20, 0xFA	; 250
    2520:	54 e4       	ldi	r21, 0x44	; 68
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8f 83       	std	Y+7, r24	; 0x07
    252c:	98 87       	std	Y+8, r25	; 0x08
    252e:	a9 87       	std	Y+9, r26	; 0x09
    2530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	2c f4       	brge	.+10     	; 0x2554 <LCD_displayCharacter+0x346>
		__ticks = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	3f c0       	rjmp	.+126    	; 0x25d2 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	4c f5       	brge	.+82     	; 0x25be <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256c:	6b 85       	ldd	r22, Y+11	; 0x0b
    256e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2570:	8d 85       	ldd	r24, Y+13	; 0x0d
    2572:	9e 85       	ldd	r25, Y+14	; 0x0e
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <LCD_displayCharacter+0x3a6>
    2596:	88 ec       	ldi	r24, 0xC8	; 200
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_displayCharacter+0x394>
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	69 f7       	brne	.-38     	; 0x2596 <LCD_displayCharacter+0x388>
    25bc:	14 c0       	rjmp	.+40     	; 0x25e6 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	9e 81       	ldd	r25, Y+6	; 0x06
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <LCD_displayCharacter+0x3d0>
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25e6:	ea 96       	adiw	r28, 0x3a	; 58
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <LCD_displayString+0x6>
    25fe:	0f 92       	push	r0
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9b 83       	std	Y+3, r25	; 0x03
    2606:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2608:	19 82       	std	Y+1, r1	; 0x01
    260a:	0e c0       	rjmp	.+28     	; 0x2628 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	fc 01       	movw	r30, r24
    2618:	e2 0f       	add	r30, r18
    261a:	f3 1f       	adc	r31, r19
    261c:	80 81       	ld	r24, Z
    261e:	0e 94 07 11 	call	0x220e	; 0x220e <LCD_displayCharacter>
		i++;
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	9b 81       	ldd	r25, Y+3	; 0x03
    2632:	fc 01       	movw	r30, r24
    2634:	e2 0f       	add	r30, r18
    2636:	f3 1f       	adc	r31, r19
    2638:	80 81       	ld	r24, Z
    263a:	88 23       	and	r24, r24
    263c:	39 f7       	brne	.-50     	; 0x260c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	00 d0       	rcall	.+0      	; 0x2650 <LCD_moveCursor+0x6>
    2650:	00 d0       	rcall	.+0      	; 0x2652 <LCD_moveCursor+0x8>
    2652:	0f 92       	push	r0
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	8a 83       	std	Y+2, r24	; 0x02
    265a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	3d 83       	std	Y+5, r19	; 0x05
    2664:	2c 83       	std	Y+4, r18	; 0x04
    2666:	8c 81       	ldd	r24, Y+4	; 0x04
    2668:	9d 81       	ldd	r25, Y+5	; 0x05
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	91 05       	cpc	r25, r1
    266e:	c1 f0       	breq	.+48     	; 0x26a0 <LCD_moveCursor+0x56>
    2670:	2c 81       	ldd	r18, Y+4	; 0x04
    2672:	3d 81       	ldd	r19, Y+5	; 0x05
    2674:	22 30       	cpi	r18, 0x02	; 2
    2676:	31 05       	cpc	r19, r1
    2678:	2c f4       	brge	.+10     	; 0x2684 <LCD_moveCursor+0x3a>
    267a:	8c 81       	ldd	r24, Y+4	; 0x04
    267c:	9d 81       	ldd	r25, Y+5	; 0x05
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	61 f0       	breq	.+24     	; 0x269a <LCD_moveCursor+0x50>
    2682:	19 c0       	rjmp	.+50     	; 0x26b6 <LCD_moveCursor+0x6c>
    2684:	2c 81       	ldd	r18, Y+4	; 0x04
    2686:	3d 81       	ldd	r19, Y+5	; 0x05
    2688:	22 30       	cpi	r18, 0x02	; 2
    268a:	31 05       	cpc	r19, r1
    268c:	69 f0       	breq	.+26     	; 0x26a8 <LCD_moveCursor+0x5e>
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9d 81       	ldd	r25, Y+5	; 0x05
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	91 05       	cpc	r25, r1
    2696:	61 f0       	breq	.+24     	; 0x26b0 <LCD_moveCursor+0x66>
    2698:	0e c0       	rjmp	.+28     	; 0x26b6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	0b c0       	rjmp	.+22     	; 0x26b6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	80 5c       	subi	r24, 0xC0	; 192
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	07 c0       	rjmp	.+14     	; 0x26b6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	80 5f       	subi	r24, 0xF0	; 240
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	80 5b       	subi	r24, 0xB0	; 176
    26b4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	80 68       	ori	r24, 0x80	; 128
    26ba:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_sendCommand>
}
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <LCD_displayStringRowColumn+0x6>
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <LCD_displayStringRowColumn+0x8>
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	6a 83       	std	Y+2, r22	; 0x02
    26de:	5c 83       	std	Y+4, r21	; 0x04
    26e0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	6a 81       	ldd	r22, Y+2	; 0x02
    26e6:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_displayString>
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	62 97       	sbiw	r28, 0x12	; 18
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	9a 8b       	std	Y+18, r25	; 0x12
    2716:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2718:	89 89       	ldd	r24, Y+17	; 0x11
    271a:	9a 89       	ldd	r25, Y+18	; 0x12
    271c:	9e 01       	movw	r18, r28
    271e:	2f 5f       	subi	r18, 0xFF	; 255
    2720:	3f 4f       	sbci	r19, 0xFF	; 255
    2722:	b9 01       	movw	r22, r18
    2724:	4a e0       	ldi	r20, 0x0A	; 10
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	0e 94 41 19 	call	0x3282	; 0x3282 <itoa>
   LCD_displayString(buff); /* Display the string */
    272c:	ce 01       	movw	r24, r28
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_displayString>
}
    2734:	62 96       	adiw	r28, 0x12	; 18
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_sendCommand>
}
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <__vector_9>:

/*******************************************************************************
 *                      TIMER 0 ISR                               			    *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    275a:	1f 92       	push	r1
    275c:	0f 92       	push	r0
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	0f 92       	push	r0
    2762:	11 24       	eor	r1, r1
    2764:	2f 93       	push	r18
    2766:	3f 93       	push	r19
    2768:	4f 93       	push	r20
    276a:	5f 93       	push	r21
    276c:	6f 93       	push	r22
    276e:	7f 93       	push	r23
    2770:	8f 93       	push	r24
    2772:	9f 93       	push	r25
    2774:	af 93       	push	r26
    2776:	bf 93       	push	r27
    2778:	ef 93       	push	r30
    277a:	ff 93       	push	r31
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    2784:	80 91 73 01 	lds	r24, 0x0173
    2788:	90 91 74 01 	lds	r25, 0x0174
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	29 f0       	breq	.+10     	; 0x279a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER0_callBackPtr(); */
    2790:	e0 91 73 01 	lds	r30, 0x0173
    2794:	f0 91 74 01 	lds	r31, 0x0174
    2798:	09 95       	icall
	}
}
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	ff 91       	pop	r31
    27a0:	ef 91       	pop	r30
    27a2:	bf 91       	pop	r27
    27a4:	af 91       	pop	r26
    27a6:	9f 91       	pop	r25
    27a8:	8f 91       	pop	r24
    27aa:	7f 91       	pop	r23
    27ac:	6f 91       	pop	r22
    27ae:	5f 91       	pop	r21
    27b0:	4f 91       	pop	r20
    27b2:	3f 91       	pop	r19
    27b4:	2f 91       	pop	r18
    27b6:	0f 90       	pop	r0
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	0f 90       	pop	r0
    27bc:	1f 90       	pop	r1
    27be:	18 95       	reti

000027c0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    27c0:	1f 92       	push	r1
    27c2:	0f 92       	push	r0
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	0f 92       	push	r0
    27c8:	11 24       	eor	r1, r1
    27ca:	2f 93       	push	r18
    27cc:	3f 93       	push	r19
    27ce:	4f 93       	push	r20
    27d0:	5f 93       	push	r21
    27d2:	6f 93       	push	r22
    27d4:	7f 93       	push	r23
    27d6:	8f 93       	push	r24
    27d8:	9f 93       	push	r25
    27da:	af 93       	push	r26
    27dc:	bf 93       	push	r27
    27de:	ef 93       	push	r30
    27e0:	ff 93       	push	r31
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    27ea:	80 91 73 01 	lds	r24, 0x0173
    27ee:	90 91 74 01 	lds	r25, 0x0174
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	29 f0       	breq	.+10     	; 0x2800 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER2_callBackPtr(); */
    27f6:	e0 91 73 01 	lds	r30, 0x0173
    27fa:	f0 91 74 01 	lds	r31, 0x0174
    27fe:	09 95       	icall
	}
}
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	ff 91       	pop	r31
    2806:	ef 91       	pop	r30
    2808:	bf 91       	pop	r27
    280a:	af 91       	pop	r26
    280c:	9f 91       	pop	r25
    280e:	8f 91       	pop	r24
    2810:	7f 91       	pop	r23
    2812:	6f 91       	pop	r22
    2814:	5f 91       	pop	r21
    2816:	4f 91       	pop	r20
    2818:	3f 91       	pop	r19
    281a:	2f 91       	pop	r18
    281c:	0f 90       	pop	r0
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	0f 90       	pop	r0
    2822:	1f 90       	pop	r1
    2824:	18 95       	reti

00002826 <__vector_8>:
/*******************************************************************************
 *                      TIMER 1 ISR                               			    *
 *******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    2826:	1f 92       	push	r1
    2828:	0f 92       	push	r0
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	0f 92       	push	r0
    282e:	11 24       	eor	r1, r1
    2830:	2f 93       	push	r18
    2832:	3f 93       	push	r19
    2834:	4f 93       	push	r20
    2836:	5f 93       	push	r21
    2838:	6f 93       	push	r22
    283a:	7f 93       	push	r23
    283c:	8f 93       	push	r24
    283e:	9f 93       	push	r25
    2840:	af 93       	push	r26
    2842:	bf 93       	push	r27
    2844:	ef 93       	push	r30
    2846:	ff 93       	push	r31
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    2850:	80 91 75 01 	lds	r24, 0x0175
    2854:	90 91 76 01 	lds	r25, 0x0176
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	29 f0       	breq	.+10     	; 0x2866 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER1_callBackPtr(); */
    285c:	e0 91 75 01 	lds	r30, 0x0175
    2860:	f0 91 76 01 	lds	r31, 0x0176
    2864:	09 95       	icall
	}
}
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	ff 91       	pop	r31
    286c:	ef 91       	pop	r30
    286e:	bf 91       	pop	r27
    2870:	af 91       	pop	r26
    2872:	9f 91       	pop	r25
    2874:	8f 91       	pop	r24
    2876:	7f 91       	pop	r23
    2878:	6f 91       	pop	r22
    287a:	5f 91       	pop	r21
    287c:	4f 91       	pop	r20
    287e:	3f 91       	pop	r19
    2880:	2f 91       	pop	r18
    2882:	0f 90       	pop	r0
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	0f 90       	pop	r0
    2888:	1f 90       	pop	r1
    288a:	18 95       	reti

0000288c <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    288c:	1f 92       	push	r1
    288e:	0f 92       	push	r0
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	0f 92       	push	r0
    2894:	11 24       	eor	r1, r1
    2896:	2f 93       	push	r18
    2898:	3f 93       	push	r19
    289a:	4f 93       	push	r20
    289c:	5f 93       	push	r21
    289e:	6f 93       	push	r22
    28a0:	7f 93       	push	r23
    28a2:	8f 93       	push	r24
    28a4:	9f 93       	push	r25
    28a6:	af 93       	push	r26
    28a8:	bf 93       	push	r27
    28aa:	ef 93       	push	r30
    28ac:	ff 93       	push	r31
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    28b6:	80 91 75 01 	lds	r24, 0x0175
    28ba:	90 91 76 01 	lds	r25, 0x0176
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	29 f0       	breq	.+10     	; 0x28cc <__vector_6+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER1_callBackPtr(); */
    28c2:	e0 91 75 01 	lds	r30, 0x0175
    28c6:	f0 91 76 01 	lds	r31, 0x0176
    28ca:	09 95       	icall
	}
}
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	ff 91       	pop	r31
    28d2:	ef 91       	pop	r30
    28d4:	bf 91       	pop	r27
    28d6:	af 91       	pop	r26
    28d8:	9f 91       	pop	r25
    28da:	8f 91       	pop	r24
    28dc:	7f 91       	pop	r23
    28de:	6f 91       	pop	r22
    28e0:	5f 91       	pop	r21
    28e2:	4f 91       	pop	r20
    28e4:	3f 91       	pop	r19
    28e6:	2f 91       	pop	r18
    28e8:	0f 90       	pop	r0
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	0f 90       	pop	r0
    28ee:	1f 90       	pop	r1
    28f0:	18 95       	reti

000028f2 <__vector_4>:
/*******************************************************************************
 *                      TIMER 2 ISR                               			    *
 *******************************************************************************/
ISR(TIMER2_OVF_vect)
{
    28f2:	1f 92       	push	r1
    28f4:	0f 92       	push	r0
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	0f 92       	push	r0
    28fa:	11 24       	eor	r1, r1
    28fc:	2f 93       	push	r18
    28fe:	3f 93       	push	r19
    2900:	4f 93       	push	r20
    2902:	5f 93       	push	r21
    2904:	6f 93       	push	r22
    2906:	7f 93       	push	r23
    2908:	8f 93       	push	r24
    290a:	9f 93       	push	r25
    290c:	af 93       	push	r26
    290e:	bf 93       	push	r27
    2910:	ef 93       	push	r30
    2912:	ff 93       	push	r31
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    291c:	80 91 77 01 	lds	r24, 0x0177
    2920:	90 91 78 01 	lds	r25, 0x0178
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	29 f0       	breq	.+10     	; 0x2932 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_TIMER2_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER2_callBackPtr(); */
    2928:	e0 91 77 01 	lds	r30, 0x0177
    292c:	f0 91 78 01 	lds	r31, 0x0178
    2930:	09 95       	icall
	}
}
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	ff 91       	pop	r31
    2938:	ef 91       	pop	r30
    293a:	bf 91       	pop	r27
    293c:	af 91       	pop	r26
    293e:	9f 91       	pop	r25
    2940:	8f 91       	pop	r24
    2942:	7f 91       	pop	r23
    2944:	6f 91       	pop	r22
    2946:	5f 91       	pop	r21
    2948:	4f 91       	pop	r20
    294a:	3f 91       	pop	r19
    294c:	2f 91       	pop	r18
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	0f 90       	pop	r0
    2954:	1f 90       	pop	r1
    2956:	18 95       	reti

00002958 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    2958:	1f 92       	push	r1
    295a:	0f 92       	push	r0
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	0f 92       	push	r0
    2960:	11 24       	eor	r1, r1
    2962:	2f 93       	push	r18
    2964:	3f 93       	push	r19
    2966:	4f 93       	push	r20
    2968:	5f 93       	push	r21
    296a:	6f 93       	push	r22
    296c:	7f 93       	push	r23
    296e:	8f 93       	push	r24
    2970:	9f 93       	push	r25
    2972:	af 93       	push	r26
    2974:	bf 93       	push	r27
    2976:	ef 93       	push	r30
    2978:	ff 93       	push	r31
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    2982:	80 91 77 01 	lds	r24, 0x0177
    2986:	90 91 78 01 	lds	r25, 0x0178
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	29 f0       	breq	.+10     	; 0x2998 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application*/
		(*g_TIMER2_callBackPtr)(); /* another method to call the function using pointer to function g_TIMER2_callBackPtr(); */
    298e:	e0 91 77 01 	lds	r30, 0x0177
    2992:	f0 91 78 01 	lds	r31, 0x0178
    2996:	09 95       	icall
	}
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	ff 91       	pop	r31
    299e:	ef 91       	pop	r30
    29a0:	bf 91       	pop	r27
    29a2:	af 91       	pop	r26
    29a4:	9f 91       	pop	r25
    29a6:	8f 91       	pop	r24
    29a8:	7f 91       	pop	r23
    29aa:	6f 91       	pop	r22
    29ac:	5f 91       	pop	r21
    29ae:	4f 91       	pop	r20
    29b0:	3f 91       	pop	r19
    29b2:	2f 91       	pop	r18
    29b4:	0f 90       	pop	r0
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	0f 90       	pop	r0
    29ba:	1f 90       	pop	r1
    29bc:	18 95       	reti

000029be <TIMER_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/


void TIMER_init(const Timer_Config* Config_Ptr){
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	2a 97       	sbiw	r28, 0x0a	; 10
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_type){
    29d6:	e9 81       	ldd	r30, Y+1	; 0x01
    29d8:	fa 81       	ldd	r31, Y+2	; 0x02
    29da:	80 81       	ld	r24, Z
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	3a 87       	std	Y+10, r19	; 0x0a
    29e2:	29 87       	std	Y+9, r18	; 0x09
    29e4:	89 85       	ldd	r24, Y+9	; 0x09
    29e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	91 05       	cpc	r25, r1
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <TIMER_init+0x32>
    29ee:	92 c0       	rjmp	.+292    	; 0x2b14 <TIMER_init+0x156>
    29f0:	e9 85       	ldd	r30, Y+9	; 0x09
    29f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    29f4:	e2 30       	cpi	r30, 0x02	; 2
    29f6:	f1 05       	cpc	r31, r1
    29f8:	09 f4       	brne	.+2      	; 0x29fc <TIMER_init+0x3e>
    29fa:	40 c1       	rjmp	.+640    	; 0x2c7c <TIMER_init+0x2be>
    29fc:	29 85       	ldd	r18, Y+9	; 0x09
    29fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a00:	21 15       	cp	r18, r1
    2a02:	31 05       	cpc	r19, r1
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <TIMER_init+0x4a>
    2a06:	e7 c1       	rjmp	.+974    	; 0x2dd6 <TIMER_init+0x418>
	case TIMER0:
		TIMER_deinit(TIMER0);
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <TIMER_deinit>

		TIMER0_INITIAL_VALUE_REGISTER=(Config_Ptr->timer_initialValue)&(0XFF);
    2a0e:	22 e5       	ldi	r18, 0x52	; 82
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	e9 81       	ldd	r30, Y+1	; 0x01
    2a14:	fa 81       	ldd	r31, Y+2	; 0x02
    2a16:	83 81       	ldd	r24, Z+3	; 0x03
    2a18:	94 81       	ldd	r25, Z+4	; 0x04
    2a1a:	a5 81       	ldd	r26, Z+5	; 0x05
    2a1c:	b6 81       	ldd	r27, Z+6	; 0x06
    2a1e:	f9 01       	movw	r30, r18
    2a20:	80 83       	st	Z, r24
		/*add clock to first 3 bits*/
		TIMER0_CONTROL_REGISTER=(TIMER0_CONTROL_REGISTER&TIMER0_CLOCK_CLEAR_MASK)|(Config_Ptr->timer_clock);
    2a22:	a3 e5       	ldi	r26, 0x53	; 83
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e3 e5       	ldi	r30, 0x53	; 83
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	98 2f       	mov	r25, r24
    2a2e:	98 7f       	andi	r25, 0xF8	; 248
    2a30:	e9 81       	ldd	r30, Y+1	; 0x01
    2a32:	fa 81       	ldd	r31, Y+2	; 0x02
    2a34:	81 81       	ldd	r24, Z+1	; 0x01
    2a36:	89 2b       	or	r24, r25
    2a38:	8c 93       	st	X, r24
		/*Clear COM00 and COM01*/
		CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_COMPARE_OUTPUT_MODE_BIT0);
    2a3a:	a3 e5       	ldi	r26, 0x53	; 83
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e3 e5       	ldi	r30, 0x53	; 83
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 7e       	andi	r24, 0xEF	; 239
    2a46:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_COMPARE_OUTPUT_MODE_BIT1);
    2a48:	a3 e5       	ldi	r26, 0x53	; 83
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e3 e5       	ldi	r30, 0x53	; 83
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	8f 7d       	andi	r24, 0xDF	; 223
    2a54:	8c 93       	st	X, r24
		switch(Config_Ptr->timer_mode){
    2a56:	e9 81       	ldd	r30, Y+1	; 0x01
    2a58:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	38 87       	std	Y+8, r19	; 0x08
    2a62:	2f 83       	std	Y+7, r18	; 0x07
    2a64:	8f 81       	ldd	r24, Y+7	; 0x07
    2a66:	98 85       	ldd	r25, Y+8	; 0x08
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	31 f0       	breq	.+12     	; 0x2a78 <TIMER_init+0xba>
    2a6c:	ef 81       	ldd	r30, Y+7	; 0x07
    2a6e:	f8 85       	ldd	r31, Y+8	; 0x08
    2a70:	e1 30       	cpi	r30, 0x01	; 1
    2a72:	f1 05       	cpc	r31, r1
    2a74:	19 f1       	breq	.+70     	; 0x2abc <TIMER_init+0xfe>
    2a76:	af c1       	rjmp	.+862    	; 0x2dd6 <TIMER_init+0x418>
		case NORMAL:

			/*
			 * Make FOC0 to be Active as it is overflow mode non-pwm
			 */
			TIMER0_CONTROL_REGISTER = SET_BIT(TIMER0_CONTROL_REGISTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    2a78:	23 e5       	ldi	r18, 0x53	; 83
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	a3 e5       	ldi	r26, 0x53	; 83
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e3 e5       	ldi	r30, 0x53	; 83
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	80 68       	ori	r24, 0x80	; 128
    2a88:	8c 93       	st	X, r24
    2a8a:	8c 91       	ld	r24, X
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	80 83       	st	Z, r24
			/*
			 * Normal Overflow mode:
			 * Clear WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    2a90:	a3 e5       	ldi	r26, 0x53	; 83
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e3 e5       	ldi	r30, 0x53	; 83
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	8f 7b       	andi	r24, 0xBF	; 191
    2a9c:	8c 93       	st	X, r24
			CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    2a9e:	a3 e5       	ldi	r26, 0x53	; 83
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e3 e5       	ldi	r30, 0x53	; 83
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	87 7f       	andi	r24, 0xF7	; 247
    2aaa:	8c 93       	st	X, r24

			/*Enable Interrupts for overflow mode*/
			SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_OVERFLOW_INTERRUPT);
    2aac:	a9 e5       	ldi	r26, 0x59	; 89
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e9 e5       	ldi	r30, 0x59	; 89
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	81 60       	ori	r24, 0x01	; 1
    2ab8:	8c 93       	st	X, r24
    2aba:	8d c1       	rjmp	.+794    	; 0x2dd6 <TIMER_init+0x418>
			break;
		case COMPARE:


			TIMER0_COMPARE_VALUE_REGISTER = ((Config_Ptr->timer_compareValue)) & 0XFF;
    2abc:	2c e5       	ldi	r18, 0x5C	; 92
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac4:	87 81       	ldd	r24, Z+7	; 0x07
    2ac6:	90 85       	ldd	r25, Z+8	; 0x08
    2ac8:	a1 85       	ldd	r26, Z+9	; 0x09
    2aca:	b2 85       	ldd	r27, Z+10	; 0x0a
    2acc:	f9 01       	movw	r30, r18
    2ace:	80 83       	st	Z, r24


			/*
			 * Make FOC0 to be Active as it is overflow mode non-pwm
			 */
			TIMER0_CONTROL_REGISTER = SET_BIT(TIMER0_CONTROL_REGISTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    2ad0:	23 e5       	ldi	r18, 0x53	; 83
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	a3 e5       	ldi	r26, 0x53	; 83
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e3 e5       	ldi	r30, 0x53	; 83
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	80 68       	ori	r24, 0x80	; 128
    2ae0:	8c 93       	st	X, r24
    2ae2:	8c 91       	ld	r24, X
    2ae4:	f9 01       	movw	r30, r18
    2ae6:	80 83       	st	Z, r24
			/*
			 * Compare mode:
			 * Clear WGM00 bit in TCCR0 register
			 * Set WGM01 bit in TCCR0 register
			 */
			CLEAR_BIT(TIMER0_CONTROL_REGISTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    2ae8:	a3 e5       	ldi	r26, 0x53	; 83
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e3 e5       	ldi	r30, 0x53	; 83
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	8f 7b       	andi	r24, 0xBF	; 191
    2af4:	8c 93       	st	X, r24
			SET_BIT(TIMER0_CONTROL_REGISTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    2af6:	a3 e5       	ldi	r26, 0x53	; 83
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e3 e5       	ldi	r30, 0x53	; 83
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	88 60       	ori	r24, 0x08	; 8
    2b02:	8c 93       	st	X, r24

			/*Enable Interrupts for Compare mode*/
			SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT);
    2b04:	a9 e5       	ldi	r26, 0x59	; 89
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e9 e5       	ldi	r30, 0x59	; 89
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	82 60       	ori	r24, 0x02	; 2
    2b10:	8c 93       	st	X, r24
    2b12:	61 c1       	rjmp	.+706    	; 0x2dd6 <TIMER_init+0x418>
		}


		break;
		case TIMER1:
			TIMER_deinit(TIMER1);
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <TIMER_deinit>
			TIMER1_INITIAL_VALUE_REGISTER=((Config_Ptr->timer_initialValue)) & 0XFFFF;
    2b1a:	2c e4       	ldi	r18, 0x4C	; 76
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b20:	fa 81       	ldd	r31, Y+2	; 0x02
    2b22:	83 81       	ldd	r24, Z+3	; 0x03
    2b24:	94 81       	ldd	r25, Z+4	; 0x04
    2b26:	a5 81       	ldd	r26, Z+5	; 0x05
    2b28:	b6 81       	ldd	r27, Z+6	; 0x06
    2b2a:	f9 01       	movw	r30, r18
    2b2c:	91 83       	std	Z+1, r25	; 0x01
    2b2e:	80 83       	st	Z, r24

			TIMER1_CONTROL_REGISTER_B=(TIMER1_CONTROL_REGISTER_B&0XF8)|(Config_Ptr->timer_clock);
    2b30:	ae e4       	ldi	r26, 0x4E	; 78
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	ee e4       	ldi	r30, 0x4E	; 78
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	98 2f       	mov	r25, r24
    2b3c:	98 7f       	andi	r25, 0xF8	; 248
    2b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b40:	fa 81       	ldd	r31, Y+2	; 0x02
    2b42:	81 81       	ldd	r24, Z+1	; 0x01
    2b44:	89 2b       	or	r24, r25
    2b46:	8c 93       	st	X, r24
			 *
			 *              OC1A/OC1B disconnected
			 *              Clear COM1A0/COM1A1 bits in TCCR1A register
			 *              Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_CONTROL_REGISTER_A = TIMER1_CONTROL_REGISTER_A & 0X0F;
    2b48:	af e4       	ldi	r26, 0x4F	; 79
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	ef e4       	ldi	r30, 0x4F	; 79
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	8f 70       	andi	r24, 0x0F	; 15
    2b54:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode){
    2b56:	e9 81       	ldd	r30, Y+1	; 0x01
    2b58:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	28 2f       	mov	r18, r24
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	3e 83       	std	Y+6, r19	; 0x06
    2b62:	2d 83       	std	Y+5, r18	; 0x05
    2b64:	8d 81       	ldd	r24, Y+5	; 0x05
    2b66:	9e 81       	ldd	r25, Y+6	; 0x06
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	31 f0       	breq	.+12     	; 0x2b78 <TIMER_init+0x1ba>
    2b6c:	ed 81       	ldd	r30, Y+5	; 0x05
    2b6e:	fe 81       	ldd	r31, Y+6	; 0x06
    2b70:	e1 30       	cpi	r30, 0x01	; 1
    2b72:	f1 05       	cpc	r31, r1
    2b74:	a1 f1       	breq	.+104    	; 0x2bde <TIMER_init+0x220>
    2b76:	2f c1       	rjmp	.+606    	; 0x2dd6 <TIMER_init+0x418>
				/*
				 * Normal Overflow mode:
				 * Clear WGM10/WMG11 bit in TCCR1A register
				 *Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGISTER_A = TIMER1_CONTROL_REGISTER_A & 0XFC ;
    2b78:	af e4       	ldi	r26, 0x4F	; 79
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	ef e4       	ldi	r30, 0x4F	; 79
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	8c 7f       	andi	r24, 0xFC	; 252
    2b84:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGISTER_B = TIMER1_CONTROL_REGISTER_B & 0XE7 ;
    2b86:	ae e4       	ldi	r26, 0x4E	; 78
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	ee e4       	ldi	r30, 0x4E	; 78
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	87 7e       	andi	r24, 0xE7	; 231
    2b92:	8c 93       	st	X, r24

				/*
				 * Make FOC1A/FOC1B to be Active as it is a non_pwm mode
				 */
				TIMER1_CONTROL_REGISTER_A =  SET_BIT(TIMER1_CONTROL_REGISTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2b94:	2f e4       	ldi	r18, 0x4F	; 79
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	af e4       	ldi	r26, 0x4F	; 79
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	ef e4       	ldi	r30, 0x4F	; 79
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	88 60       	ori	r24, 0x08	; 8
    2ba4:	8c 93       	st	X, r24
    2ba6:	8c 91       	ld	r24, X
    2ba8:	f9 01       	movw	r30, r18
    2baa:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGISTER_A =  SET_BIT(TIMER1_CONTROL_REGISTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    2bac:	2f e4       	ldi	r18, 0x4F	; 79
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	af e4       	ldi	r26, 0x4F	; 79
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	ef e4       	ldi	r30, 0x4F	; 79
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	84 60       	ori	r24, 0x04	; 4
    2bbc:	8c 93       	st	X, r24
    2bbe:	8c 91       	ld	r24, X
    2bc0:	f9 01       	movw	r30, r18
    2bc2:	80 83       	st	Z, r24

				/*
				 * Enable Timer1 overflow interrupt
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_OVERFLOW_INTERRUPT);
    2bc4:	29 e5       	ldi	r18, 0x59	; 89
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	a9 e5       	ldi	r26, 0x59	; 89
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e9 e5       	ldi	r30, 0x59	; 89
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	84 60       	ori	r24, 0x04	; 4
    2bd4:	8c 93       	st	X, r24
    2bd6:	8c 91       	ld	r24, X
    2bd8:	f9 01       	movw	r30, r18
    2bda:	80 83       	st	Z, r24
    2bdc:	fc c0       	rjmp	.+504    	; 0x2dd6 <TIMER_init+0x418>
				 * Compare mode:
				 * Clear WGM10/WGM11 bits in TCCR1A register
				 * Set WGM12 bit in TCCR1B register
				 * Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGISTER_A = TIMER1_CONTROL_REGISTER_A & 0XFC ;
    2bde:	af e4       	ldi	r26, 0x4F	; 79
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	ef e4       	ldi	r30, 0x4F	; 79
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	8c 7f       	andi	r24, 0xFC	; 252
    2bea:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGISTER_B = SET_BIT(TIMER1_CONTROL_REGISTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    2bec:	2e e4       	ldi	r18, 0x4E	; 78
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	ae e4       	ldi	r26, 0x4E	; 78
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	ee e4       	ldi	r30, 0x4E	; 78
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 60       	ori	r24, 0x08	; 8
    2bfc:	8c 93       	st	X, r24
    2bfe:	8c 91       	ld	r24, X
    2c00:	f9 01       	movw	r30, r18
    2c02:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGISTER_B = CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    2c04:	2e e4       	ldi	r18, 0x4E	; 78
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	ae e4       	ldi	r26, 0x4E	; 78
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	ee e4       	ldi	r30, 0x4E	; 78
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	8f 7e       	andi	r24, 0xEF	; 239
    2c14:	8c 93       	st	X, r24
    2c16:	8c 91       	ld	r24, X
    2c18:	f9 01       	movw	r30, r18
    2c1a:	80 83       	st	Z, r24

				/*
				 *  Make FOC1A/FOC1B to be Active as it is compare mode
				 */
				TIMER1_CONTROL_REGISTER_A =  SET_BIT(TIMER1_CONTROL_REGISTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2c1c:	2f e4       	ldi	r18, 0x4F	; 79
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	af e4       	ldi	r26, 0x4F	; 79
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	ef e4       	ldi	r30, 0x4F	; 79
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	88 60       	ori	r24, 0x08	; 8
    2c2c:	8c 93       	st	X, r24
    2c2e:	8c 91       	ld	r24, X
    2c30:	f9 01       	movw	r30, r18
    2c32:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGISTER_A =  SET_BIT(TIMER1_CONTROL_REGISTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    2c34:	2f e4       	ldi	r18, 0x4F	; 79
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	af e4       	ldi	r26, 0x4F	; 79
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	ef e4       	ldi	r30, 0x4F	; 79
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	84 60       	ori	r24, 0x04	; 4
    2c44:	8c 93       	st	X, r24
    2c46:	8c 91       	ld	r24, X
    2c48:	f9 01       	movw	r30, r18
    2c4a:	80 83       	st	Z, r24

				/*
				 * Configure Compare match value for Timer1 to start count from it
				 * 0XFFFF so that value doesn't exceed 16_bits
				 */
				TIMER1_COMPARE_VALUE_REGISTER_A = ((Config_Ptr->timer_compareValue)) & 0XFFFF;
    2c4c:	2a e4       	ldi	r18, 0x4A	; 74
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	e9 81       	ldd	r30, Y+1	; 0x01
    2c52:	fa 81       	ldd	r31, Y+2	; 0x02
    2c54:	87 81       	ldd	r24, Z+7	; 0x07
    2c56:	90 85       	ldd	r25, Z+8	; 0x08
    2c58:	a1 85       	ldd	r26, Z+9	; 0x09
    2c5a:	b2 85       	ldd	r27, Z+10	; 0x0a
    2c5c:	f9 01       	movw	r30, r18
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	80 83       	st	Z, r24

				/*
				 * Enable Timer1 compare match interrupt
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT);
    2c62:	29 e5       	ldi	r18, 0x59	; 89
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	a9 e5       	ldi	r26, 0x59	; 89
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e9 e5       	ldi	r30, 0x59	; 89
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 61       	ori	r24, 0x10	; 16
    2c72:	8c 93       	st	X, r24
    2c74:	8c 91       	ld	r24, X
    2c76:	f9 01       	movw	r30, r18
    2c78:	80 83       	st	Z, r24
    2c7a:	ad c0       	rjmp	.+346    	; 0x2dd6 <TIMER_init+0x418>
				break;
			}

			break;
			case TIMER2:
				TIMER_deinit(TIMER2);
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <TIMER_deinit>
				/*
				 * Configure initial value for Timer2 to start count from it
				 * 0XFF so that value doesn't exceed 8_bits
				 */

				TIMER2_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_initialValue) ) & 0XFF;
    2c82:	24 e4       	ldi	r18, 0x44	; 68
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	e9 81       	ldd	r30, Y+1	; 0x01
    2c88:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8a:	83 81       	ldd	r24, Z+3	; 0x03
    2c8c:	94 81       	ldd	r25, Z+4	; 0x04
    2c8e:	a5 81       	ldd	r26, Z+5	; 0x05
    2c90:	b6 81       	ldd	r27, Z+6	; 0x06
    2c92:	f9 01       	movw	r30, r18
    2c94:	80 83       	st	Z, r24
				/*
				 * TIMER Pre-scaler value for Timer2 in TCCR2 Register
				 * 0XF8 to make sure that the least 3-bits in TCCR2 register=0
				 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
				 */
				TIMER2_CONTROL_REGISTER = (TIMER2_CONTROL_REGISTER  & TIMER2_CLOCK_CLEAR_MASK) | (Config_Ptr->timer_clock);
    2c96:	a5 e4       	ldi	r26, 0x45	; 69
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e5 e4       	ldi	r30, 0x45	; 69
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	98 2f       	mov	r25, r24
    2ca2:	98 7f       	andi	r25, 0xF8	; 248
    2ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca8:	81 81       	ldd	r24, Z+1	; 0x01
    2caa:	89 2b       	or	r24, r25
    2cac:	8c 93       	st	X, r24
				 *  Compare mode:
				 *              OC2 disconnected
				 *              Clear COM20 bit in TCCR2 register
				 *              Clear COM21 bit in TCCR2 register
				 */
				TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER, TIMER2_COMPARE_OUTPUT_MODE_BIT0);
    2cae:	25 e4       	ldi	r18, 0x45	; 69
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	a5 e4       	ldi	r26, 0x45	; 69
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e5 e4       	ldi	r30, 0x45	; 69
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	8f 7e       	andi	r24, 0xEF	; 239
    2cbe:	8c 93       	st	X, r24
    2cc0:	8c 91       	ld	r24, X
    2cc2:	f9 01       	movw	r30, r18
    2cc4:	80 83       	st	Z, r24
				TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER, TIMER2_COMPARE_OUTPUT_MODE_BIT1);
    2cc6:	25 e4       	ldi	r18, 0x45	; 69
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	a5 e4       	ldi	r26, 0x45	; 69
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e5 e4       	ldi	r30, 0x45	; 69
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	8f 7d       	andi	r24, 0xDF	; 223
    2cd6:	8c 93       	st	X, r24
    2cd8:	8c 91       	ld	r24, X
    2cda:	f9 01       	movw	r30, r18
    2cdc:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    2cde:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce2:	82 81       	ldd	r24, Z+2	; 0x02
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	3c 83       	std	Y+4, r19	; 0x04
    2cea:	2b 83       	std	Y+3, r18	; 0x03
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	31 f0       	breq	.+12     	; 0x2d00 <TIMER_init+0x342>
    2cf4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf6:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf8:	e1 30       	cpi	r30, 0x01	; 1
    2cfa:	f1 05       	cpc	r31, r1
    2cfc:	91 f1       	breq	.+100    	; 0x2d62 <TIMER_init+0x3a4>
    2cfe:	6b c0       	rjmp	.+214    	; 0x2dd6 <TIMER_init+0x418>
					/*
					 * Normal Overflow mode:
					 *                      Clear WGM00 bit in TCCR0 register
					 *                      Clear WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    2d00:	25 e4       	ldi	r18, 0x45	; 69
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	a5 e4       	ldi	r26, 0x45	; 69
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e5 e4       	ldi	r30, 0x45	; 69
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8f 7b       	andi	r24, 0xBF	; 191
    2d10:	8c 93       	st	X, r24
    2d12:	8c 91       	ld	r24, X
    2d14:	f9 01       	movw	r30, r18
    2d16:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    2d18:	25 e4       	ldi	r18, 0x45	; 69
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	a5 e4       	ldi	r26, 0x45	; 69
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e5 e4       	ldi	r30, 0x45	; 69
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	87 7f       	andi	r24, 0xF7	; 247
    2d28:	8c 93       	st	X, r24
    2d2a:	8c 91       	ld	r24, X
    2d2c:	f9 01       	movw	r30, r18
    2d2e:	80 83       	st	Z, r24

					/*
					 * Make FOC2 to be Active as it is overflow mode
					 */
					TIMER2_CONTROL_REGISTER =  SET_BIT(TIMER2_CONTROL_REGISTER ,TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    2d30:	25 e4       	ldi	r18, 0x45	; 69
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	a5 e4       	ldi	r26, 0x45	; 69
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e5 e4       	ldi	r30, 0x45	; 69
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	80 68       	ori	r24, 0x80	; 128
    2d40:	8c 93       	st	X, r24
    2d42:	8c 91       	ld	r24, X
    2d44:	f9 01       	movw	r30, r18
    2d46:	80 83       	st	Z, r24


					/*
					 * Enable Timer2 overflow interrupt
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER,TIMER2_OUTPUT_OVERFLOW_INTERRUPT);
    2d48:	29 e5       	ldi	r18, 0x59	; 89
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	a9 e5       	ldi	r26, 0x59	; 89
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e9 e5       	ldi	r30, 0x59	; 89
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	80 64       	ori	r24, 0x40	; 64
    2d58:	8c 93       	st	X, r24
    2d5a:	8c 91       	ld	r24, X
    2d5c:	f9 01       	movw	r30, r18
    2d5e:	80 83       	st	Z, r24
    2d60:	3a c0       	rjmp	.+116    	; 0x2dd6 <TIMER_init+0x418>
					/*
					 *  Compare mode:
					 *               Clear WGM20 bit in TCCR2 register
					 *               Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGISTER  = CLEAR_BIT(TIMER2_CONTROL_REGISTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    2d62:	25 e4       	ldi	r18, 0x45	; 69
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	a5 e4       	ldi	r26, 0x45	; 69
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e5 e4       	ldi	r30, 0x45	; 69
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	8f 7b       	andi	r24, 0xBF	; 191
    2d72:	8c 93       	st	X, r24
    2d74:	8c 91       	ld	r24, X
    2d76:	f9 01       	movw	r30, r18
    2d78:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGISTER  = SET_BIT(TIMER2_CONTROL_REGISTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    2d7a:	25 e4       	ldi	r18, 0x45	; 69
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	a5 e4       	ldi	r26, 0x45	; 69
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e5 e4       	ldi	r30, 0x45	; 69
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 81       	ld	r24, Z
    2d88:	88 60       	ori	r24, 0x08	; 8
    2d8a:	8c 93       	st	X, r24
    2d8c:	8c 91       	ld	r24, X
    2d8e:	f9 01       	movw	r30, r18
    2d90:	80 83       	st	Z, r24

					/*
					 *  Make FOC2 to be Active as it is compare mode
					 */
					TIMER2_CONTROL_REGISTER =  SET_BIT(TIMER2_CONTROL_REGISTER , TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    2d92:	25 e4       	ldi	r18, 0x45	; 69
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	a5 e4       	ldi	r26, 0x45	; 69
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e5 e4       	ldi	r30, 0x45	; 69
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	80 68       	ori	r24, 0x80	; 128
    2da2:	8c 93       	st	X, r24
    2da4:	8c 91       	ld	r24, X
    2da6:	f9 01       	movw	r30, r18
    2da8:	80 83       	st	Z, r24
					/*
					 * Configure compare match value for Timer2 to start count from it
					 * 0XFF so that value doesn't exceed 8_bits
					 */

					TIMER2_COMPARE_VALUE_REGISTER = ((Config_Ptr->timer_compareValue)) & 0XFF;
    2daa:	23 e4       	ldi	r18, 0x43	; 67
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	e9 81       	ldd	r30, Y+1	; 0x01
    2db0:	fa 81       	ldd	r31, Y+2	; 0x02
    2db2:	87 81       	ldd	r24, Z+7	; 0x07
    2db4:	90 85       	ldd	r25, Z+8	; 0x08
    2db6:	a1 85       	ldd	r26, Z+9	; 0x09
    2db8:	b2 85       	ldd	r27, Z+10	; 0x0a
    2dba:	f9 01       	movw	r30, r18
    2dbc:	80 83       	st	Z, r24

					/*
					 * Enable Timer2 compare match interrupt
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    2dbe:	29 e5       	ldi	r18, 0x59	; 89
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	a9 e5       	ldi	r26, 0x59	; 89
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e9 e5       	ldi	r30, 0x59	; 89
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	80 68       	ori	r24, 0x80	; 128
    2dce:	8c 93       	st	X, r24
    2dd0:	8c 91       	ld	r24, X
    2dd2:	f9 01       	movw	r30, r18
    2dd4:	80 83       	st	Z, r24


					break;
				}
	}
}
    2dd6:	2a 96       	adiw	r28, 0x0a	; 10
    2dd8:	0f b6       	in	r0, 0x3f	; 63
    2dda:	f8 94       	cli
    2ddc:	de bf       	out	0x3e, r29	; 62
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	cd bf       	out	0x3d, r28	; 61
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	08 95       	ret

00002de8 <TIMER_setCallBack>:



void TIMER_setCallBack(void(*a_ptr)(void),Timer_Type timer_type){
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <TIMER_setCallBack+0x6>
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <TIMER_setCallBack+0x8>
    2df0:	0f 92       	push	r0
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	9a 83       	std	Y+2, r25	; 0x02
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type){
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	28 2f       	mov	r18, r24
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	3d 83       	std	Y+5, r19	; 0x05
    2e04:	2c 83       	std	Y+4, r18	; 0x04
    2e06:	8c 81       	ldd	r24, Y+4	; 0x04
    2e08:	9d 81       	ldd	r25, Y+5	; 0x05
    2e0a:	81 30       	cpi	r24, 0x01	; 1
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	81 f0       	breq	.+32     	; 0x2e30 <TIMER_setCallBack+0x48>
    2e10:	2c 81       	ldd	r18, Y+4	; 0x04
    2e12:	3d 81       	ldd	r19, Y+5	; 0x05
    2e14:	22 30       	cpi	r18, 0x02	; 2
    2e16:	31 05       	cpc	r19, r1
    2e18:	91 f0       	breq	.+36     	; 0x2e3e <TIMER_setCallBack+0x56>
    2e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	a1 f4       	brne	.+40     	; 0x2e4a <TIMER_setCallBack+0x62>
	case TIMER0:
		g_TIMER0_callBackPtr=a_ptr;
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	90 93 74 01 	sts	0x0174, r25
    2e2a:	80 93 73 01 	sts	0x0173, r24
    2e2e:	0d c0       	rjmp	.+26     	; 0x2e4a <TIMER_setCallBack+0x62>
		break;
	case TIMER1:
		g_TIMER1_callBackPtr=a_ptr;
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	90 93 76 01 	sts	0x0176, r25
    2e38:	80 93 75 01 	sts	0x0175, r24
    2e3c:	06 c0       	rjmp	.+12     	; 0x2e4a <TIMER_setCallBack+0x62>
		break;
	case TIMER2:
		g_TIMER2_callBackPtr=a_ptr;
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	90 93 78 01 	sts	0x0178, r25
    2e46:	80 93 77 01 	sts	0x0177, r24
		break;
	}
}
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	08 95       	ret

00002e5a <TIMER_stop>:



void TIMER_stop(Timer_Type timer_type){
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <TIMER_stop+0x6>
    2e60:	0f 92       	push	r0
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type){
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	3b 83       	std	Y+3, r19	; 0x03
    2e70:	2a 83       	std	Y+2, r18	; 0x02
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	9b 81       	ldd	r25, Y+3	; 0x03
    2e76:	81 30       	cpi	r24, 0x01	; 1
    2e78:	91 05       	cpc	r25, r1
    2e7a:	89 f0       	breq	.+34     	; 0x2e9e <TIMER_stop+0x44>
    2e7c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e7e:	3b 81       	ldd	r19, Y+3	; 0x03
    2e80:	22 30       	cpi	r18, 0x02	; 2
    2e82:	31 05       	cpc	r19, r1
    2e84:	a1 f0       	breq	.+40     	; 0x2eae <TIMER_stop+0x54>
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	b9 f4       	brne	.+46     	; 0x2ebc <TIMER_stop+0x62>
	case TIMER0:
		TIMER0_CONTROL_REGISTER=( TIMER0_CONTROL_REGISTER & TIMER0_CLOCK_CLEAR_MASK );
    2e8e:	a3 e5       	ldi	r26, 0x53	; 83
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	e3 e5       	ldi	r30, 0x53	; 83
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	88 7f       	andi	r24, 0xF8	; 248
    2e9a:	8c 93       	st	X, r24
    2e9c:	0f c0       	rjmp	.+30     	; 0x2ebc <TIMER_stop+0x62>
		break;
	case TIMER1:
		TIMER1_CONTROL_REGISTER_B=(TIMER1_CONTROL_REGISTER_B&TIMER1_CLOCK_CLEAR_MASK);
    2e9e:	ae e4       	ldi	r26, 0x4E	; 78
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	ee e4       	ldi	r30, 0x4E	; 78
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	88 7f       	andi	r24, 0xF8	; 248
    2eaa:	8c 93       	st	X, r24
    2eac:	07 c0       	rjmp	.+14     	; 0x2ebc <TIMER_stop+0x62>
		break;
	case TIMER2:
		TIMER2_CONTROL_REGISTER=(TIMER2_CONTROL_REGISTER&TIMER2_CLOCK_CLEAR_MASK);
    2eae:	a5 e4       	ldi	r26, 0x45	; 69
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	e5 e4       	ldi	r30, 0x45	; 69
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	88 7f       	andi	r24, 0xF8	; 248
    2eba:	8c 93       	st	X, r24

		break;
	}
}
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <TIMER_deinit>:



void TIMER_deinit(Timer_Type timer_type){
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <TIMER_deinit+0x6>
    2ece:	0f 92       	push	r0
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type){
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	28 2f       	mov	r18, r24
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	3b 83       	std	Y+3, r19	; 0x03
    2ede:	2a 83       	std	Y+2, r18	; 0x02
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	91 05       	cpc	r25, r1
    2ee8:	b1 f0       	breq	.+44     	; 0x2f16 <TIMER_deinit+0x4e>
    2eea:	2a 81       	ldd	r18, Y+2	; 0x02
    2eec:	3b 81       	ldd	r19, Y+3	; 0x03
    2eee:	22 30       	cpi	r18, 0x02	; 2
    2ef0:	31 05       	cpc	r19, r1
    2ef2:	19 f1       	breq	.+70     	; 0x2f3a <TIMER_deinit+0x72>
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	59 f5       	brne	.+86     	; 0x2f52 <TIMER_deinit+0x8a>
	case TIMER0:
		TIMER0_CONTROL_REGISTER=0x00;
    2efc:	e3 e5       	ldi	r30, 0x53	; 83
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER=0x00;
    2f02:	e2 e5       	ldi	r30, 0x52	; 82
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	10 82       	st	Z, r1
		TIMER0_COMPARE_VALUE_REGISTER=0x00;
    2f08:	ec e5       	ldi	r30, 0x5C	; 92
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER=0x00;
    2f0e:	e9 e5       	ldi	r30, 0x59	; 89
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	10 82       	st	Z, r1
    2f14:	1e c0       	rjmp	.+60     	; 0x2f52 <TIMER_deinit+0x8a>
		break;
	case TIMER1:
		TIMER1_CONTROL_REGISTER_A=0;
    2f16:	ef e4       	ldi	r30, 0x4F	; 79
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	10 82       	st	Z, r1
		TIMER1_CONTROL_REGISTER_B=0;
    2f1c:	ee e4       	ldi	r30, 0x4E	; 78
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	10 82       	st	Z, r1
		TIMER1_INITIAL_VALUE_REGISTER=0;
    2f22:	ec e4       	ldi	r30, 0x4C	; 76
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	11 82       	std	Z+1, r1	; 0x01
    2f28:	10 82       	st	Z, r1
		TIMER1_COMPARE_VALUE_REGISTER_A=0;
    2f2a:	ea e4       	ldi	r30, 0x4A	; 74
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	11 82       	std	Z+1, r1	; 0x01
    2f30:	10 82       	st	Z, r1
		TIMER1_INTERRUPT_MASK_REGISTER=0;
    2f32:	e9 e5       	ldi	r30, 0x59	; 89
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	10 82       	st	Z, r1
    2f38:	0c c0       	rjmp	.+24     	; 0x2f52 <TIMER_deinit+0x8a>
		break;
	case TIMER2:
		TIMER2_CONTROL_REGISTER=0x00;
    2f3a:	e5 e4       	ldi	r30, 0x45	; 69
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	10 82       	st	Z, r1
		TIMER2_INITIAL_VALUE_REGISTER=0x00;
    2f40:	e4 e4       	ldi	r30, 0x44	; 68
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	10 82       	st	Z, r1
		TIMER2_COMPARE_VALUE_REGISTER=0x00;
    2f46:	e3 e4       	ldi	r30, 0x43	; 67
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	10 82       	st	Z, r1
		TIMER2_INTERRUPT_MASK_REGISTER=0x00;
    2f4c:	e9 e5       	ldi	r30, 0x59	; 89
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	10 82       	st	Z, r1
		break;
	}
}
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_config *Config_Ptr)
{
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	00 d0       	rcall	.+0      	; 0x2f64 <UART_init+0x6>
    2f64:	00 d0       	rcall	.+0      	; 0x2f66 <UART_init+0x8>
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	9c 83       	std	Y+4, r25	; 0x04
    2f6c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f6e:	1a 82       	std	Y+2, r1	; 0x02
    2f70:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f72:	eb e2       	ldi	r30, 0x2B	; 43
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f7a:	ea e2       	ldi	r30, 0x2A	; 42
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	88 e1       	ldi	r24, 0x18	; 24
    2f80:	80 83       	st	Z, r24

	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC

	 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    2f82:	a0 e4       	ldi	r26, 0x40	; 64
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e0 e4       	ldi	r30, 0x40	; 64
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	80 68       	ori	r24, 0x80	; 128
    2f8e:	8c 93       	st	X, r24


	UCSRC=( UCSRC&0XBF)|((Config_Ptr->mode)<<6);
    2f90:	a0 e4       	ldi	r26, 0x40	; 64
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e0 e4       	ldi	r30, 0x40	; 64
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	2f 7b       	andi	r18, 0xBF	; 191
    2f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa2:	80 81       	ld	r24, Z
    2fa4:	88 2f       	mov	r24, r24
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	00 24       	eor	r0, r0
    2faa:	96 95       	lsr	r25
    2fac:	87 95       	ror	r24
    2fae:	07 94       	ror	r0
    2fb0:	96 95       	lsr	r25
    2fb2:	87 95       	ror	r24
    2fb4:	07 94       	ror	r0
    2fb6:	98 2f       	mov	r25, r24
    2fb8:	80 2d       	mov	r24, r0
    2fba:	82 2b       	or	r24, r18
    2fbc:	8c 93       	st	X, r24
	UCSRC=( UCSRC&0XCF)|((Config_Ptr->parity)<<4);
    2fbe:	a0 e4       	ldi	r26, 0x40	; 64
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e0 e4       	ldi	r30, 0x40	; 64
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	28 2f       	mov	r18, r24
    2fca:	2f 7c       	andi	r18, 0xCF	; 207
    2fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fce:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd0:	85 81       	ldd	r24, Z+5	; 0x05
    2fd2:	88 2f       	mov	r24, r24
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	82 95       	swap	r24
    2fd8:	92 95       	swap	r25
    2fda:	90 7f       	andi	r25, 0xF0	; 240
    2fdc:	98 27       	eor	r25, r24
    2fde:	80 7f       	andi	r24, 0xF0	; 240
    2fe0:	98 27       	eor	r25, r24
    2fe2:	82 2b       	or	r24, r18
    2fe4:	8c 93       	st	X, r24

	UCSRC=( UCSRC&0XF7)|((Config_Ptr->stopBit)<<3);
    2fe6:	a0 e4       	ldi	r26, 0x40	; 64
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e0 e4       	ldi	r30, 0x40	; 64
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	27 7f       	andi	r18, 0xF7	; 247
    2ff4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff8:	86 81       	ldd	r24, Z+6	; 0x06
    2ffa:	88 2f       	mov	r24, r24
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	82 2b       	or	r24, r18
    300c:	8c 93       	st	X, r24
	UCSRC=( UCSRC&0XF9)|((Config_Ptr->charSize)<<1);
    300e:	a0 e4       	ldi	r26, 0x40	; 64
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	e0 e4       	ldi	r30, 0x40	; 64
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	28 2f       	mov	r18, r24
    301a:	29 7f       	andi	r18, 0xF9	; 249
    301c:	eb 81       	ldd	r30, Y+3	; 0x03
    301e:	fc 81       	ldd	r31, Y+4	; 0x04
    3020:	87 81       	ldd	r24, Z+7	; 0x07
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	82 2b       	or	r24, r18
    302c:	8c 93       	st	X, r24
	UCSRC=( UCSRC&0XFE)|((Config_Ptr->mode));
    302e:	a0 e4       	ldi	r26, 0x40	; 64
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e0 e4       	ldi	r30, 0x40	; 64
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	98 2f       	mov	r25, r24
    303a:	9e 7f       	andi	r25, 0xFE	; 254
    303c:	eb 81       	ldd	r30, Y+3	; 0x03
    303e:	fc 81       	ldd	r31, Y+4	; 0x04
    3040:	80 81       	ld	r24, Z
    3042:	89 2b       	or	r24, r25
    3044:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3046:	eb 81       	ldd	r30, Y+3	; 0x03
    3048:	fc 81       	ldd	r31, Y+4	; 0x04
    304a:	81 81       	ldd	r24, Z+1	; 0x01
    304c:	92 81       	ldd	r25, Z+2	; 0x02
    304e:	a3 81       	ldd	r26, Z+3	; 0x03
    3050:	b4 81       	ldd	r27, Z+4	; 0x04
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	aa 1f       	adc	r26, r26
    3058:	bb 1f       	adc	r27, r27
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	aa 1f       	adc	r26, r26
    3060:	bb 1f       	adc	r27, r27
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	aa 1f       	adc	r26, r26
    3068:	bb 1f       	adc	r27, r27
    306a:	9c 01       	movw	r18, r24
    306c:	ad 01       	movw	r20, r26
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	92 e1       	ldi	r25, 0x12	; 18
    3072:	aa e7       	ldi	r26, 0x7A	; 122
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	bc 01       	movw	r22, r24
    3078:	cd 01       	movw	r24, r26
    307a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__udivmodsi4>
    307e:	da 01       	movw	r26, r20
    3080:	c9 01       	movw	r24, r18
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3088:	e0 e4       	ldi	r30, 0x40	; 64
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	9a 81       	ldd	r25, Y+2	; 0x02
    3090:	89 2f       	mov	r24, r25
    3092:	99 27       	eor	r25, r25
    3094:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3096:	e9 e2       	ldi	r30, 0x29	; 41
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	80 83       	st	Z, r24
}
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	0f 92       	push	r0
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    30b8:	eb e2       	ldi	r30, 0x2B	; 43
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	88 2f       	mov	r24, r24
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	80 72       	andi	r24, 0x20	; 32
    30c4:	90 70       	andi	r25, 0x00	; 0
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	b9 f3       	breq	.-18     	; 0x30b8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    30ca:	ec e2       	ldi	r30, 0x2C	; 44
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	80 83       	st	Z, r24

}
    30d2:	0f 90       	pop	r0
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    30e2:	eb e2       	ldi	r30, 0x2B	; 43
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	88 23       	and	r24, r24
    30ea:	dc f7       	brge	.-10     	; 0x30e2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    30ec:	ec e2       	ldi	r30, 0x2C	; 44
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
}
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <UART_sendString+0x6>
    30fe:	0f 92       	push	r0
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	9b 83       	std	Y+3, r25	; 0x03
    3106:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3108:	19 82       	std	Y+1, r1	; 0x01
    310a:	0e c0       	rjmp	.+28     	; 0x3128 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	9b 81       	ldd	r25, Y+3	; 0x03
    3116:	fc 01       	movw	r30, r24
    3118:	e2 0f       	add	r30, r18
    311a:	f3 1f       	adc	r31, r19
    311c:	80 81       	ld	r24, Z
    311e:	0e 94 56 18 	call	0x30ac	; 0x30ac <UART_sendByte>
		i++;
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	8f 5f       	subi	r24, 0xFF	; 255
    3126:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	9b 81       	ldd	r25, Y+3	; 0x03
    3132:	fc 01       	movw	r30, r24
    3134:	e2 0f       	add	r30, r18
    3136:	f3 1f       	adc	r31, r19
    3138:	80 81       	ld	r24, Z
    313a:	88 23       	and	r24, r24
    313c:	39 f7       	brne	.-50     	; 0x310c <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}


}
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	00 d0       	rcall	.+0      	; 0x3154 <UART_receiveString+0xa>
    3154:	0f 92       	push	r0
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	9b 83       	std	Y+3, r25	; 0x03
    315c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    315e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	9b 81       	ldd	r25, Y+3	; 0x03
    316a:	8c 01       	movw	r16, r24
    316c:	02 0f       	add	r16, r18
    316e:	13 1f       	adc	r17, r19
    3170:	0e 94 6d 18 	call	0x30da	; 0x30da <UART_recieveByte>
    3174:	f8 01       	movw	r30, r16
    3176:	80 83       	st	Z, r24
    3178:	0f c0       	rjmp	.+30     	; 0x3198 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	8f 5f       	subi	r24, 0xFF	; 255
    317e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	28 2f       	mov	r18, r24
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	9b 81       	ldd	r25, Y+3	; 0x03
    318a:	8c 01       	movw	r16, r24
    318c:	02 0f       	add	r16, r18
    318e:	13 1f       	adc	r17, r19
    3190:	0e 94 6d 18 	call	0x30da	; 0x30da <UART_recieveByte>
    3194:	f8 01       	movw	r30, r16
    3196:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	fc 01       	movw	r30, r24
    31a4:	e2 0f       	add	r30, r18
    31a6:	f3 1f       	adc	r31, r19
    31a8:	80 81       	ld	r24, Z
    31aa:	83 32       	cpi	r24, 0x23	; 35
    31ac:	31 f7       	brne	.-52     	; 0x317a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	fc 01       	movw	r30, r24
    31ba:	e2 0f       	add	r30, r18
    31bc:	f3 1f       	adc	r31, r19
    31be:	10 82       	st	Z, r1
}
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	08 95       	ret

000031d0 <__udivmodsi4>:
    31d0:	a1 e2       	ldi	r26, 0x21	; 33
    31d2:	1a 2e       	mov	r1, r26
    31d4:	aa 1b       	sub	r26, r26
    31d6:	bb 1b       	sub	r27, r27
    31d8:	fd 01       	movw	r30, r26
    31da:	0d c0       	rjmp	.+26     	; 0x31f6 <__udivmodsi4_ep>

000031dc <__udivmodsi4_loop>:
    31dc:	aa 1f       	adc	r26, r26
    31de:	bb 1f       	adc	r27, r27
    31e0:	ee 1f       	adc	r30, r30
    31e2:	ff 1f       	adc	r31, r31
    31e4:	a2 17       	cp	r26, r18
    31e6:	b3 07       	cpc	r27, r19
    31e8:	e4 07       	cpc	r30, r20
    31ea:	f5 07       	cpc	r31, r21
    31ec:	20 f0       	brcs	.+8      	; 0x31f6 <__udivmodsi4_ep>
    31ee:	a2 1b       	sub	r26, r18
    31f0:	b3 0b       	sbc	r27, r19
    31f2:	e4 0b       	sbc	r30, r20
    31f4:	f5 0b       	sbc	r31, r21

000031f6 <__udivmodsi4_ep>:
    31f6:	66 1f       	adc	r22, r22
    31f8:	77 1f       	adc	r23, r23
    31fa:	88 1f       	adc	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	1a 94       	dec	r1
    3200:	69 f7       	brne	.-38     	; 0x31dc <__udivmodsi4_loop>
    3202:	60 95       	com	r22
    3204:	70 95       	com	r23
    3206:	80 95       	com	r24
    3208:	90 95       	com	r25
    320a:	9b 01       	movw	r18, r22
    320c:	ac 01       	movw	r20, r24
    320e:	bd 01       	movw	r22, r26
    3210:	cf 01       	movw	r24, r30
    3212:	08 95       	ret

00003214 <__prologue_saves__>:
    3214:	2f 92       	push	r2
    3216:	3f 92       	push	r3
    3218:	4f 92       	push	r4
    321a:	5f 92       	push	r5
    321c:	6f 92       	push	r6
    321e:	7f 92       	push	r7
    3220:	8f 92       	push	r8
    3222:	9f 92       	push	r9
    3224:	af 92       	push	r10
    3226:	bf 92       	push	r11
    3228:	cf 92       	push	r12
    322a:	df 92       	push	r13
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	ca 1b       	sub	r28, r26
    323e:	db 0b       	sbc	r29, r27
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	09 94       	ijmp

0000324c <__epilogue_restores__>:
    324c:	2a 88       	ldd	r2, Y+18	; 0x12
    324e:	39 88       	ldd	r3, Y+17	; 0x11
    3250:	48 88       	ldd	r4, Y+16	; 0x10
    3252:	5f 84       	ldd	r5, Y+15	; 0x0f
    3254:	6e 84       	ldd	r6, Y+14	; 0x0e
    3256:	7d 84       	ldd	r7, Y+13	; 0x0d
    3258:	8c 84       	ldd	r8, Y+12	; 0x0c
    325a:	9b 84       	ldd	r9, Y+11	; 0x0b
    325c:	aa 84       	ldd	r10, Y+10	; 0x0a
    325e:	b9 84       	ldd	r11, Y+9	; 0x09
    3260:	c8 84       	ldd	r12, Y+8	; 0x08
    3262:	df 80       	ldd	r13, Y+7	; 0x07
    3264:	ee 80       	ldd	r14, Y+6	; 0x06
    3266:	fd 80       	ldd	r15, Y+5	; 0x05
    3268:	0c 81       	ldd	r16, Y+4	; 0x04
    326a:	1b 81       	ldd	r17, Y+3	; 0x03
    326c:	aa 81       	ldd	r26, Y+2	; 0x02
    326e:	b9 81       	ldd	r27, Y+1	; 0x01
    3270:	ce 0f       	add	r28, r30
    3272:	d1 1d       	adc	r29, r1
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	de bf       	out	0x3e, r29	; 62
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	cd bf       	out	0x3d, r28	; 61
    327e:	ed 01       	movw	r28, r26
    3280:	08 95       	ret

00003282 <itoa>:
    3282:	fb 01       	movw	r30, r22
    3284:	9f 01       	movw	r18, r30
    3286:	e8 94       	clt
    3288:	42 30       	cpi	r20, 0x02	; 2
    328a:	c4 f0       	brlt	.+48     	; 0x32bc <itoa+0x3a>
    328c:	45 32       	cpi	r20, 0x25	; 37
    328e:	b4 f4       	brge	.+44     	; 0x32bc <itoa+0x3a>
    3290:	4a 30       	cpi	r20, 0x0A	; 10
    3292:	29 f4       	brne	.+10     	; 0x329e <itoa+0x1c>
    3294:	97 fb       	bst	r25, 7
    3296:	1e f4       	brtc	.+6      	; 0x329e <itoa+0x1c>
    3298:	90 95       	com	r25
    329a:	81 95       	neg	r24
    329c:	9f 4f       	sbci	r25, 0xFF	; 255
    329e:	64 2f       	mov	r22, r20
    32a0:	77 27       	eor	r23, r23
    32a2:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__udivmodhi4>
    32a6:	80 5d       	subi	r24, 0xD0	; 208
    32a8:	8a 33       	cpi	r24, 0x3A	; 58
    32aa:	0c f0       	brlt	.+2      	; 0x32ae <itoa+0x2c>
    32ac:	89 5d       	subi	r24, 0xD9	; 217
    32ae:	81 93       	st	Z+, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	a1 f7       	brne	.-24     	; 0x329e <itoa+0x1c>
    32b6:	16 f4       	brtc	.+4      	; 0x32bc <itoa+0x3a>
    32b8:	5d e2       	ldi	r21, 0x2D	; 45
    32ba:	51 93       	st	Z+, r21
    32bc:	10 82       	st	Z, r1
    32be:	c9 01       	movw	r24, r18
    32c0:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <strrev>

000032c4 <strrev>:
    32c4:	dc 01       	movw	r26, r24
    32c6:	fc 01       	movw	r30, r24
    32c8:	67 2f       	mov	r22, r23
    32ca:	71 91       	ld	r23, Z+
    32cc:	77 23       	and	r23, r23
    32ce:	e1 f7       	brne	.-8      	; 0x32c8 <strrev+0x4>
    32d0:	32 97       	sbiw	r30, 0x02	; 2
    32d2:	04 c0       	rjmp	.+8      	; 0x32dc <strrev+0x18>
    32d4:	7c 91       	ld	r23, X
    32d6:	6d 93       	st	X+, r22
    32d8:	70 83       	st	Z, r23
    32da:	62 91       	ld	r22, -Z
    32dc:	ae 17       	cp	r26, r30
    32de:	bf 07       	cpc	r27, r31
    32e0:	c8 f3       	brcs	.-14     	; 0x32d4 <strrev+0x10>
    32e2:	08 95       	ret

000032e4 <__udivmodhi4>:
    32e4:	aa 1b       	sub	r26, r26
    32e6:	bb 1b       	sub	r27, r27
    32e8:	51 e1       	ldi	r21, 0x11	; 17
    32ea:	07 c0       	rjmp	.+14     	; 0x32fa <__udivmodhi4_ep>

000032ec <__udivmodhi4_loop>:
    32ec:	aa 1f       	adc	r26, r26
    32ee:	bb 1f       	adc	r27, r27
    32f0:	a6 17       	cp	r26, r22
    32f2:	b7 07       	cpc	r27, r23
    32f4:	10 f0       	brcs	.+4      	; 0x32fa <__udivmodhi4_ep>
    32f6:	a6 1b       	sub	r26, r22
    32f8:	b7 0b       	sbc	r27, r23

000032fa <__udivmodhi4_ep>:
    32fa:	88 1f       	adc	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	5a 95       	dec	r21
    3300:	a9 f7       	brne	.-22     	; 0x32ec <__udivmodhi4_loop>
    3302:	80 95       	com	r24
    3304:	90 95       	com	r25
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	08 95       	ret

0000330c <_exit>:
    330c:	f8 94       	cli

0000330e <__stop_program>:
    330e:	ff cf       	rjmp	.-2      	; 0x330e <__stop_program>
